* Write a factorial(阶乘 n!) function
You can uses your favourite programming language
** Reference Answer 1 Recursive
Qualified, not suprise. If not realize 0!=1, the he/she lacks some mathematics skill.
#+BEGIN_SRC js
function factorial (num) {
    if (num < 0) {
        return -1;
    } else if (num === 0 || num === 1) {
        return 1;
    } else {
        return (num * factorial(num - 1));
    }
}
#+END_SRC
** Reference Answer 2 Loop
Same as above, using while/for loop.
#+BEGIN_SRC js
function factorial (num) {
    if (num < 0) {
        return -1;
    } else if (num === 0 || num === 1) {
        return 1;
    } else {
        for (var i = num - 1; i >= 1; i--) {
            num *= i;
        }
    }
    return num;
}
#+END_SRC

** Reference Answer 3 Elegent
Using conditional ternary operator, shrinked in bytes. He/she masters the diversity of coding skill, try to achieve verbose-less expressions of logic.  
#+BEGIN_SRC js
function factorial(n){
    return n>0?n*factorial(n-1):1;
}
#+END_SRC

** Sugars & Salts 
1. If he/she thinks about overflow of the return value, then very comprehensive thoughts and mathematics sense;
2. If he/she asks whether "n" is a non-negative integar or fraction, then consider whether he/she is over qualified;
3. If he/she caches the caculated results, then maybe over qualified.

* Write a SQL query
Given following table (with sql query "SELECT * FROM journal"):
| Company | Partner | Account       | Amount |
|---------+---------+---------------+--------|
| B       | C       | Receivables_A |     60 |
| B       | C       | Receivables_B |     80 |
| C       | B       | Payables_A    |    -60 |
| C       | B       | Payables_B    |    -75 |

Write a SQL query to show following list:
| Buyer | Seller | Account       | Buyer Amount | Seller Amount |
|-------+--------+---------------+--------------+---------------|
| C     | B      | Receivables_A |           60 |               |
|       |        | Payables_A    |              |            60 |
|       |        | Receivables_B |           80 |               |
|       |        | Payables_B    |              |            75 |

** Reference Answer
#+BEGIN_SRC sql
select 
  company as 'Buyer',
  partner as 'Seller',
  Account,
  '' as 'Buyer Amount',
  (0-Amount) as 'Seller Amount'
from journal
where Account like 'Payables_*'
union
select
  partner as 'Buyer',
  company as 'Seller',
  Account,
  Amount as 'Buyer Amount',
  '' as 'Seller Amount'
from journal 
where Account like 'Receivables_*' 
order by Buyer, Seller;
#+END_SRC

* Database Modeling
Given following unnormalized table:
| Corp | Corp Name    | Companys                     | Departments            |
|------+--------------+------------------------------+------------------------|
|    1 | Corp Group A | Company1, Company2, Company3 | IT Dept, FI Dept       |
|    2 | Corp Group B | Company4, Company5           | Sales Dept, FI Dept    |
|    3 | Corp Group C | Company6                     | IT Dept, Sales Dept    |
|    4 | Corp Group D | Company7, Company8           | Purchase Dept, FI Dept |
|    5 | Corp Group E | Company9                     | HR Dept, FI Dept       | 

Please normalize it so that it can achieve 3 Normal Forms.

** Reference Answer
#+CAPTION: Corp
| Corp(Key) | Corp Name    |
|-----------+--------------|
|         1 | Corp Group A |
|         2 | Corp Group B |
|         3 | Corp Group C |
|         4 | Corp Group D |
|         5 | Corp Group E |

#+CAPTION: Company
| Company(Key) | Company Name |
|--------------+--------------|
|            1 | Company1     |
|            2 | Company2     |
|            3 | Company3     |
|            4 | Company4     |
|            5 | Company5     |
|            6 | Company6     |
|          ... | ...          |

#+CAPTION: Corp-Company Relationship
| Corp(Key) | Company(Key) | Valid From |   Valid To |
|-----------+--------------+------------+------------|
|         1 |            1 | 2017.01.01 | 9999.12.31 |
|         1 |            2 | 2017.01.01 | 9999.12.31 |
|         1 |            3 | 2017.01.01 | 9999.12.31 |
|         2 |            4 | 2017.01.01 | 9999.12.31 |
|         2 |            5 | 2017.01.01 | 9999.12.31 |
|         3 |            6 | 2017.01.01 | 9999.12.31 |
|       ... |          ... |            |            | 
Corporation and Company are indepandent entities. If Valid From and Valid To are provided, then the condidate has good sense of "Relationship". 

#+CAPTION: Department
| Company(Key) | DeptNo(Key) | DeptName   |
|--------------+-------------+------------|
|            1 |           1 | IT Dept    |
|            1 |           2 | FI Dept    |
|            2 |           1 | IT Dept    |
|            2 |           2 | FI Dept    |
|            4 |           1 | Sales Dept |
|            4 |           2 | FI Dept    |
|          ... |         ... | ...        |
Department is the sub-entity of company.

* Reading Codes
Given following codes:
#+BEGIN_SRC C
void main()  
{  
    int i,j;  
    for(i = 1; i <= 9; i++)  
    {   
        for(j = 1; j <= i; j++) 
        {  
            printf("%d*%d=%-4d",i,j,i*j);  
        }  
        printf("\n");  
    }  
} 
#+END_SRC

Write down the print result:

** Reference Answer:
1*1=1   
2*1=2   2*2=4   
3*1=3   3*2=6   3*3=9   
4*1=4   4*2=8   4*3=12  4*4=16
5*1=5   5*2=10  5*3=15  5*4=20  5*5=25  
6*1=6   6*2=12  6*3=18  6*4=24  6*5=30  6*6=36
7*1=7   7*2=14  7*3=21  7*4=28  7*5=35  7*6=42  7*7=49
8*1=8   8*2=16  8*3=24  8*4=32  8*5=40  8*6=48  8*7=56  8*8=64
9*1=9   9*2=18  9*3=27  9*4=36  9*5=45  9*6=54  9*7=63  9*8=72  9*9=81

If the condidate notice "%-4d" means left align with 4 spaces, then he/she has very good coding basis. 

* Testing Codes
Given following 2 function specifications of the "Date" object:
#+BEGIN_SRC js
/**
 * Add time
 * @param strInterval: s:seconds, n:minutes, h:hours, d:days, w:weeks, q:quarters, m:month, y:year
 * @param Number:  number of interval
 * @returns: Date
 */
Date.DateAdd = function(strInterval, Number) {
  //Implement codes to add Number of strIntervals to this Date, and return the Date object;
};

/**
 * Minus time
 * @param strInterval: s:seconds, n:minutes, h:hours, d:days, w:weeks, q:quarters, m:month, y:year
 * @param Number:  number of interval
 * @returns: Date
 */
Date.DateMinus = function(strInterval, Number) {
   //Implement codes to minus Number of strIntervals from this Date, and return the Date object;
};
#+END_SRC

Write down your unit test cases/scripts:

** Reference Answer
#+BEGIN_SRC js
describe('Unit Test Cases for Date Add&Minus', function(){
   var testDate;
   
   describe('Test Add&Minus Seconds', function(){
     beforeEach('Initialize TestDate',function(){
         testDate = new Date("2010-01-01 08:30:00");
     });
     it('should add 1 second correctly!', function(){
         testDate = testDate.DateAdd('s',1);
         testDate.should.be.equal("2010-01-01 08:30:01");
     });
     it('should add 61 seconds correctly!', function(){
         testDate = testDate.DateAdd('s',61);
         testDate.should.be.equal("2010-01-01 08:31:01");
     });
     it('should minus 1 second correctly!', function(){
         testDate = testDate.DateMinus('s',1);
         testDate.should.be.equal("2010-01-01 08:29:59");
     });
   });

   describe('Test Add&Minus Minutes', function(){
     beforeEach('Initialize TestDate',function(){
         testDate = new Date("2010-01-01 08:30:00");
     });
     it('should add 1 minute correctly!', function(){
         testDate = testDate.DateAdd('n',1);
         testDate.should.be.equal("2010-01-01 08:31:00");
     });
     it('should add 30 minutes correctly!', function(){
         testDate = testDate.DateAdd('n',30);
         testDate.should.be.equal("2010-01-01 09:00:00");
     });
     it('should minus 1 minute correctly!', function(){
         testDate = testDate.DateMinus('n',1);
         testDate.should.be.equal("2010-01-01 08:29:00");
     });
     it('should minus 31 minutes correctly!', function(){
         testDate = testDate.DateMinus('n',31);
         testDate.should.be.equal("2010-01-01 07:59:00");
     });
   });

   ...
}
#+END_SRC
It is not necessary for the condidate to write down all the test cases. It only examines if he/she has the good sense of testing, boundary values, organization of the test cases. 

* Requirements Analysis
Suppose you have a blog website on which you post your own essays and articles. All the contents are open to public. Now you want some of the contents to be restricted, and only open to the registered users, who may have registed accounts of your website. The pitty thing is that your website doesn't has the user identification and accessing module. You have to develop one by yourself.

You then conclude the requirements using the "User Story" paradigm, which is very popular within Agile Software Development methodologies. Here given 2 samples:

1. *As a* blog reader, *I can* log in to the blog website with a username/password pair, *so that* I can gain access to the restricted contents of the site.
2. *As a* blog reader, *I can* register an account from the blog website, *so that* I can use it to login into the site.

You may add more user stories to make the requirements more close to reality. However, you are mainly asked to detailize each story using following format:
(Take story 1 as an example)
|      |      | <40>                                     | <40>                                     |
| Flow | Step | When...                                  | Then...                                  |
|------+------+------------------------------------------+------------------------------------------|
| Main |    1 | the user is not logged in                |                                          |
|      |    2 | the user requests to view any 'Restricted' page |                                          |
|      |    3 |                                          | the system tells the user it is restricted |
|      |    4 |                                          | the system displays the log in page      |
|      |  ... | ...                                      | ...                                      |
|      |    7 | the user enters a valid user ID and password, and requests to log in |                                          |
|      |  ... | ...                                      | ...                                      |
| 7a   |    1 | the user enters a valid user ID but an invalid password |                                          |
|      |    2 |                                          | the system re-displays the log in page   |
|      |  ... | ...                                      | ...                                      |
| 7b   |    1 | the user enters a valid user ID but an invalid password |                                          |
|      |  ... | ...                                      | ...                                      | 

*Note:* The “Flow” column identifies the main flow and the alternative flows of the use case. For example, flow 7a is the first alternative flow to branch off main flow step 7, and flow 7b is the second to branch off the same step.  
 
** Reference Answer 
Stroy 1: *As a* blog reader, *I can* log in to the blog website with a username/password pair, *so that* I can gain access to the restricted contents of the site.
|      |      | <40>                                     | <40>                                     |
| Flow | Step | When...                                  | Then...                                  |
|------+------+------------------------------------------+------------------------------------------|
| Main |    1 | the user is not logged in                |                                          |
|      |    2 | the user requests to view any 'Restricted' page |                                          |
|      |    3 |                                          | the system tells the user it is restricted |
|      |    4 |                                          | the system displays the log in page      |
|      |    5 |                                          | the login page includes a username field with 16 chars long, a password field with "marked" data entry, and a login button |
|      |    6 |                                          | the login button is gray before the user enter both the username and password correctly |
|      |    7 | the user enters a valid user ID and password, and requests to log in |                                          |
|      |    8 |                                          | the system identifies the user and generated a session |
|      |    9 |                                          | the system captures an audit trail of the date and time the user logged in |
|      |   10 |                                          | the system changes the page status to “user logged in”, with banner of the userid in the up-right corner. |
|      |   11 |                                          | the system takes the user to the page they initially requested |
| 7a   |    1 | the user enters a valid user ID but an invalid password |                                          |
|      |    2 |                                          | the system re-displays the log in page   |
|      |    3 |                                          | the system displays an error message: “Incorrect user ID or password” |
| 7b   |    1 | the user enters a valid user ID but an invalid password |                                          |
|      |    2 |                                          | the system re-displays the log in page   |
|      |    3 |                                          | the system displays an error message: “Incorrect user ID or password” |
