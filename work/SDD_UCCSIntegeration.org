#+PAGEID: 1943200300
#+VERSION: 18
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: [[https://wiki.wdf.sap.corp/wiki/pages/viewpage.action?pageId=1943200300][SDD-UCCS Integration]]

** Integrate Validation Result into UC-CS Task Log
In Validation Engine (VEC for short), rules are grouped into a method, which is an AMDP that produces validation result. Validation Result can be persisted in table ~VEC_RESULT~, with header information saved in table ~VEC_DRR~. 

As VEC tasks can be synchronized to UC-CS tasks, which allows VEC method can be invoked from UC-CS Data Monitor. By this way, VEC displaces the existing UC-CS validation. According to the UC-CS' design, a validation run is bound to a validatio
n task. And UC-CS tasks are categorized into several task categories. There exists a Fiori APP called "Task Log" which centrally displays the runtime logs generated by different UC-CS tasks. As now, validation task is one of the UC-CS tasks, the attempt is to have validation result be displayed in or at least accessed from the "Task Log" APP. 

*** The Fiori APP: Task Log

The Fiori APP: "Task Log" currently is a report-like(read-only) APP that has 2 pages: the first list page, and the second object page. The list page contains a list with each item represents a task run. The table which holds the task run information is newly created for UC-CS, and there exists API to populate data into it(Trevor to give the API). So, in the validation run, after calling the validation method AMDP, we need to call the API to populate the task log table. I suppose there is another API to be called for the traditional EC-CS' task logs for the Data Monitor. All these can be achieved in VEC's validation run reports. 

#+CAPTION: Fiori APP: Task Log First Page
[[../image/UCCSTaskLog.png]] 

The second page has the details of the runtime information(log). There contains header information on the top, a one-level hierarchy on the left side, and a grid list on the right side. Provided the fact that validation result targets to an single entity, which is either a consolidation group, or a consolidation unit, so the left side org-hierarchy is not necessary for validation result. Validation result itself is displayed as a hierarchy, as a rule can be run in different currencies and breakdown by additional attributes. From a short/medium-term view, I can hardly see any chance to let validation result and task log information be unified into one display format.    

#+CAPTION: Fiori APP: Task Log Second Page
[[../image/UCCSTaskLog2.png]] 

#+CAPTION: Fiori APP: Validation Result Second Page
[[../image/VEC_Result.png]] 

The general integration idea(solution) is to have the validation run information be searched and listed in the first page. And let the navigation determine to which second page. If the task category is validation, then the Validation Result's object page is shown, otherwise, it is still the Task Log's second page.  

To correctly show the validation run, there needs 2 additional columns in the Task Log's first page:
1. Consolidation Unit: a validation run targets to a consolidation unit or a consolidation group. They are totally separated. Although, "Task Log" provides group/unit hierarchy in the second object page, but as depicted above, it is not relevant in validation cases. And after all, it will navigate to Validation Result's object page, where there is no such org-hierarchy.
2. Validated Status: This column shows whether a validation run is passed, failed, with warnings, and so on. It is not like the existing column "Status" only shows, from technical point of view, whether there is errors/warning messages generated during a task run. 

To make consistency, in the Validation Result's second page, we can add a link for "Messages: <n>" to show the runtime messages in case it has. 

*** Comments from Trevor
The class "CL_FINCS_GENERIC_LOG_DB_UTIL" can be used to populate data into the task log table "FINCS_LOG_HEADER". The method "CREATE" can be used to create header of Generic with necessary business keys. 

Vince: Validation result is headed by a data release request, which has the DRRUUID as its business key. So we can record DRRUUID to the table "FINCS_LOG_HEADER". 

** Performance Test on Validation View

*** Test Data in ER9/500
First switch to the following global parameter setting:
#+CAPTION: Global Parameters Setting (CXGP)
[[../image/VEC_UCCS_TEST_ENV01.png]] 

Use the consolidation hierarchy "H2"
#+CAPTION: Consolidation Hierarchy (CX1Y)
[[../image/VEC_UCCS_TEST_ENV02.png]] 

Use the FS item hierarchy "BS" and "PL" in Chart-of-Accounts "Y1"
#+CAPTION: FS Item Hierarchy (CX17)
[[../image/VEC_UCCS_TEST_ENV03.png]] 

Check Tcode CX56 to list journal entries. Copy data of consolidation unit 'S2100' in period '12'. 

*** Test Data Generation in CCW
We must generate 2 years data with each year has 17 periods(00~16). There are 16 units involved.
| Data Size | Items Per Unit & Period | Total #Items Per Unit | Total #items |
|-----------+-------------------------+-----------------------+--------------|
| S         | 2,000                   | 68,000                | 1,088,000    |
| M         | 10,000                  | 340,000               | 5,440,000    |
| L         | 50,000                  | 1,700,000             | 27,200,000   |

A test data generator program should be given. The generator can be run to generate different size of data, and can set how many columns in ACDOCU involved. We can refer RTC's program.

*** Performance Test Method
The 3 data sizes are generated in 6 different years. They are distributed like this:
| Data Size | Year      |
|-----------+-----------|
| S         | 2013~2014 |
| M         | 2015~2016 |
| L         | 2017~2018 |

A validation CDS view for performance testing is already created and transported to CCW. The CDS view is made as closely as possible to the real use case. 

10 sample rules will be created manually by AMDP based on the validation CDS view. 

An AMDP is then created which encapsulates the 10 sample rules will be manually created, and transported to CCW within HOME package. The AMDP simulates the validation method. 

Run the AMDP in HANA Studio, record the run time information and get the visualization plan. 
#+BEGIN_SRC sql
set 'CDS_CLIENT'='500';
SELECT SESSION_CONTEXT('CDS_CLIENT') FROM DUMMY;

SELECT 
 *
FROM "SAPER9"."PVECUCCSUNION"( 
   P_TASK_TYPE => '01',
   P_RDIMEN => 'Y1' , 
   P_RITCLG => 'Y1', 
   P_RVERS => 'Y10', 
   P_RLDNR => 'Y1', 
   P_RYEAR => '2015', 
   P_PYEAR => '2014', 
   P_POPER => '012' );
#+END_SRC

** Validation Task and Monitor Integration
VEC has its own task definition. To allow UC-CS consume the task definition, VEC will map and synchronize its tasks to UC-CS tasks. VEC task has its sub-objects, so far, there are 'Context' and 'Assignment'. For detail on how VEC task maps to UC-CS task, please refer [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/SDD-Task][SDD-Task]].

From users' perspective, they can still run validation from UC-CS Data/Cons Monitor. Instead of running CXV1, it will popup the Fiori APP: Validation Result. There are 5 run-options in the context menu when you right click a node in the monitor. For all the 5 options will popup the Validation Result APP. The differences are explained bellow:
1. Test: Test run triggers a validation run without checking and updating the monitor statues.
2. Update: Update run triggers a validation run with checking and updating the monitor statuses.
3. Test with Original List: Test run without considering the blocking statues, otherwise the system only processes the consolidation groups and units which are not blocked.
4. Start w. Selection: Popup the Fiori APP without triggering the running. User will then click the "run validation" button manually.
5. Last Log: Need further investigation. 

#+CAPTION: UC-CS Monitor Integration
[[../image/VEC_UCCS_Moinitor.png]] 

From the monitor, if user clicks a cons group node, then the result will be displayed in multiple cons units. This requires Validation Result can also give multiple cons units display, which also means that in the search&list page of Validation Result, there should be a button to allow run validation in mass mode. And a log window to show the runtime information like logs, error information in a separate dialog window. 
#+CAPTION: UC-CS Validation Result
[[../image/VEC_UCCS_ValidationResult.png]] 

The static method *CL_FINCS_GENERIC_LOG=>START_URL* can be used to popup a browser window from SAPGUI/WebGUI. It is better to have EC-CS team to embed the triggering logic in existing EC-CS codes, considering may be the old validation should be still available in OP releases. 

FICMNF00 VALIDATION_1 and validation_1_ws.

*** DRR Operation
When user clicks "Run Validation" in the Validation Result APP, it always schedule a background job which runs immediately. The background job runs the validation report which can accept more than one entities in the same fiscal period. 

In the validation report, it first locks all the entities given, then checks for each entity has the corresponding DRR exists, if not, create one for the entity. The newly created DRR has the USTATUS with "Initial", SSTATUS with "PROCESSING", RTIME with current timestamp, and JOBCOUNT with current job counter. After successfully executed the validation method, the USTATUS is changed to "Validation Executed", and SSTATUS set to "SUCCESS". If there are catchable system errors happened for certain entity (like missing validation method), then the SSTATUS should be set to "ERROR". In the job log, there will be detail description of the errors which can help user to identify and resolve them. In both cases, the report should unlock the entities involved so that other validation runs can invoke them again. 

Exceptional cases may happen in everywhere. For example, if ABAP dumps occurs before the report unlock the entities, then they will be always in "PROCESSING" status. And user cannot re-run these entities as they are already locked for processing. In these cases, manually intervene takes place to unlock them. 

To make more user friendly, the exceptional cases can be monitored from frontend. When the synchronize background job is scheduled, the Validation Result APP pings the backend to get the latest statues. To avoid too much requests which may be censored by the central performance team, we can design an algorithm for the frequency of the ping request. In the first 6 seconds, we take the frequency of 2s. After that, the frequency increases exponentially, like 4s, 8s, 16s. Until the maximum frequency is 20s, besides reading the SSTATUS in DRR, we should also check the background job status. If it is canceled due to ABAP dumps, then set the DRR status to error, unlock them and stop the ping.      

** Tasks

*** Validation Task Maintenance APP                                     :VEC:                        
Validation Engine has its own task concept. A validation task is always associated with method assignments, and guides how validation will be executed. 

Refer https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/SDD-Task.

*** Prohibit the changes for the synced objects on UC-CS side           :UCCS:
The synced objects include: Period Category, Task, and Validation Method Assignments. To keep the consistency, these objects should only be maintained in the new Task application, and they should not be changed anymore on UC-CS side.

They synced Period Category and Task will be started with prefix '$'. In UC-CS side, a check should be added to forbid create these objects started with '$'.

Refer https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/SDD-Task.

*** Validation Result APP and Validation Run Report                      :VEC:
The Validation Result APP is to replace CXV1. A Validation Run Report is developed to encapsulate validation run logics which is then to be scheduled as an immediate background job.

#+CAPTION: Validation Result APP Search and List View
[[../image/VEC_ValidationResultAPP1.png]] 


#+CAPTION: Validation Result APP Detail View
[[../image/VEC_ValidationResultAPP2.png]] 

The Validation Run Report tries to simulate CXV1 as much as possible. However, there are still some features may be not available or necessary in the new validation solution. 

1. Option "Include Rollup CU" may not be necessary?
2. Option "Read rollup records" may not be necessary?
3. Option "Incl. Adj. to Univ. Doc." may not be necessary?
4. Option "Universal Documents" may not be necessary?
5. LC for standardized validaiton may not be necessary?
6. Currency options may not be necessary. 
7. Option "Log" may not be necessary, as Validation Engine always run with detail logs saved.
8. Additional Financial data valdiation is not available, as the data is not in ACDOCU. However, we can check if it is possible and necessary to deliver CDS views on additional financial data.
9. "Equivalency CUs" is not available.
10. What is "MCDX"?

Refer https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/SDD-Validation+Run+Report

*** ABAP API to popup the validation result APP          :VEC:
VEC should provide an API to be called by Data/Cons moniotr to popup the validation result APP. VEC needs the interface specification from UC-CS.

*** Embed the popup API into Data/Cons Moniotr                         :UCCS: 
UC-CS should embed the popup API in the correct places so that the monitors can open the Validaiton Result APP. 

** OP Migration
1. Check with Joachim to sync on how to switch between Cloud and OP with regarding on transportation.
