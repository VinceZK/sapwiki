#+PAGEID: 1832374030
#+VERSION: 26
#+STARTUP: align
#+TITLE: SDD-Consolidation Views
#+OPTIONS: toc:1
** General Information
*** Stakeholders and Roles
| Role                  | Name               |
|-----------------------+--------------------|
| Author(s)             | Vincent Zhang      |
| Architect             | Vincent Zhang      |
| Product Owner         | Shi Ying           |
| Information Developer | Ciaran             |
| Quality Responsible   | Yao Cen            |
| Developers            | Steve Mo, Sam, Jin |

*** References
|                |                  |               | <30>                           |
| Document Title | Date             | Link          | Comments                       |
|----------------+------------------+---------------+--------------------------------|
| HANA Script    | <2016-02-21 Sun> | [[http://help.sap.com/saphelp_hanaplatform/helpdata/en/92/11209e54ab48959c83a7ac3b4ef877/content.htm?frameset=/en/60/088457716e46889c78662700737118/frameset.htm&current_toc=/en/ed/4f384562ce4861b48e22a8be3171e5/plain.htm&node_id=3][online help]]   | Online help of HANA SQL scripts. You can find all your want about how to write in HANA SQL scripts. |
| AMDP Guide     | <2016-02-21 Sun> | [[http://help.sap.com/abapdocu_740/en/index.htm?file=abenamdp.htm][ABAP Keywords]] | All about AMDP: Keywords and Syntax. |


** Context
Consolidation views are CDS views and HANA calculation views genereated by the modeling tool for different consolidation purposes. 

Based on the foundation views and other meta definitions (Chart of Account, Fiscal Year Variant, consolidation dimension, and so on), the modeling tool can generate upper views which can be used by different up-level applications. Inspired by SEM-BCS, which genreates BW cubes and provides users the maxium flexibility to define their own consolidation model, RTC generates HANA views instead. The main benifit is *we eliminate the data replication without losing much flexibility*. And we leverage full capabiltiy of HANA's in-memory and column-based  technology. 

The overall diagram of the view stack is given with detial explanations attached:
#+Caption: Consolidation Views Stack Overview
[[../image/ConsViews02.png]]

1. The main data source comes from ACDOCA and ACDOCC. Of course, you can replace ACDOCA to any other tables (like ACDOCP for planning, or even Z_tables) depands on the data you want to run consolidation. But ACDOCC cannot be replaced, as it is the only storage to hold the consolidated journal entries generated during consolidation run.
2. As most consolidations read data from financial journals, we mainly use ACDOCA as the data source. Then a foundation view needs to be created based on ACDOCA so that you can project fields from ACDOCA and apply necessary filterings on the ledger field and company code field. The foundation view is created in HANA Stuido either by CDS or HANA calculation view technology. And this is the only step which needs the horriable HANA Stuido. Further more, we can deliever some sample foundation views for the out-of-box usage.  
3. Then the modeling tool will create the base views on the assigned foundation view. The base views mainly apply 6 logics:
   1. Mapping financial orgnization assignments to consolidation entity;
   2. Mapping operational Chart-of-Accounts to group Chart-of-Accounts;
   3. Mapping operational Fiscal-Year-Variant to group Fiscal-Year-Variant;
   4. Union ACDOCC with correct fields mappings.
   5. If the model is set to be integrated with BPC, then there will be 2 sets of base views gerenated. One is using HANA calculation view, the other is CDS view. The logics of the 2 view sets are exactly the same. This is because BPC cannot consume CDS views, however, S/4HANA needs CDS views. And the CDS views are actually created based on the HANA calculation view using table function (The golden lines indicates the view flow).
   6. If the model is not set to be integrated with BPC, then the foundation view should be CDS view, and the HANA calculation views won't be generated (The blue lines indicates the view flow).
4. The base view is the base for all other consolidation views built upon. Consolidation views can be grouped by differenct usages, like for validation, for reporting, for BPC consolidation, and so on. 
5. Validation views are added to the BRF+ application, which is also generated by the model. They can then be accessed by Validation Engine, which allow you to create various rules based on the CDS views(aka rule vocabulary). Validation views are designed for validation purposes, so the main consideration is to facilit end-users to easily define rules. They may have input parameters(like entity, fiscal period, and so on), so that rules based on it can be run in different data contexts.
6. BPC views are HANA calc views which are only consumed by BPC through a virual info-provider(or composite info-provider). There will be multiple views generated according to 2 considerations: 1)whether the data is in ACDOCA or ACDOCC; 2)whether it needs to be timestamp filtering or not.  Then at least, 4 views are generated: Final data from ACDOCA, preliminary data from ACDOCA, final data from ACDOCC, and preliminary data from ACDOCC. The 4 views are merged into a union calculation view.
7. Currency Translation Method(AMDP) directly accesses the base view to retrieve data. The data is then translated and temporary stored in the Global Temporary Table, which can either be reported to the end-user, or be input for the follow-up consolidation tasks(like elimination).
8. There are also consolidation views for reporting, and master data views on entity and FS items.  
 
*** Data Cut-off
A [[https://wiki.wdf.sap.corp/wiki/x/wY4GbQ][Data Release Request]] is raised by a local accountant as a data cut-off record. It contains information like: model, version(category), entity, fiscal year/period, and cut-off timestamp. The group accountant uses this filter information to pull data from ACDOCA/C for further processing. 

The data release requests(DRR) are stored in table =RTC_DRR=, also having user statuses and system statuses recorded. Only if a DRR is in user status "Released", group accountants can run validation on the data it points; If a DRR is in status "Approved", which means the group accountant accept the data submitted, and ready for consolidation. 

Table =RTC_DRR= is either joined with ACDOCA/C, or be picked out of the correct DRR to filter in data so that only before a certain point of the data participates in consolidation. Besides,  actions and logs, like validation result, translation result, comments & attachments, which are related to a data release activity, are all recorded to a DRR.

*** BPC Integration
For the reason of BPC integration, which means you must pass all your logics in the consoldiation views to the BW interfaces(virtual info-providers), you have to make sure all the OLAP operations should work properly on your views. Bearing in mind, info-providers don't support input parameters, which means you can not pass a timestamp to it. Then the only way you can go is *stacking Views*. 

The BPC consolidation views are generated by the modeling tool. For each BPC category, there will be a set of views generated by considering ACDOCA/C and Final/Preliminary. The term "Final" means data needs to be cut-off by given a timestamp, and "Preliminary" means always getting the most recent data in ACDOCA/C. The Final views have already joined with the =RTC_DRR= to get the lastest submitted/approved data. 

So now, each BPC category has the pair <FINAL/PRELIM>_A and <FINAL/PRELIM>_C. With a model having multiple BPC categories, these views are stacked(union) and form the OLAP cube-like thing. 
    
** Overall Design
*** Key Requirements and Design Goals
BPC can access the real-time data in ACDOCA with timestamp filtering. 

The requirement comes from the legal consolidation which require strict data process control. Only the data that local accountants submitted can group accountants run validation and consolidation on them. But if we let BPC access data on ACDOCA directly, group accountants will always access the most recent data without a handover control. Meanwhile, as the continues changing of the data in ACDOCA, it causes the data inconsistency during a consolidation process. 

The general idea is to use timestamps to cut-off data in ACDOCA. The timestamp usually stands for the time that local accountants close their fiscal periods(soft commit). BPC now only accesses the timestamp-filtered data in ACDOCA. Thus we achieve the data handover without data replications. 

If data is provided through flexible uploading, the handover is then potentially executed when the local accountants upload the data into ACDOCC. So, theriodically, timestamp filtering is not necessary. But it is very often the uploading happens in many times for a single package of data. User may first upload parts of the data, and then the following parts one by one; or the user may change/adjust the uploaded data. For either cases, delta changes should be the best option. Then with the delta change approach, timestamp filtering is also suitable. 

*** 1610 Release(Limited)
The design is divided into 2 versions: =1610 Version=, and the =Completed Version=. As you can imagine, to achieve both real-time data access and sophistic status/workflow control are rather complicate and time/resource consuming. We design a simplified version for 1610, which we eliminate the status control and local validation. Details of the limitations and restrictions are listed:

1. Once the local accountant raise a DRR, it is approved automatically, group accountant can only accept it. There is no embedded control on this process, group accountant must notify the local accountant externally if she doesn't want the data.
2. There is no control on local document posting to the consolidated periods. Those "illegal" postings are discarded, or must be resolved by external controls.
3. Data validation is not integrated, there is no system promise that the submitted data is validate according to the rules. Expensive communication effort are necessary between group accountants and local accountants when such cases happen. 
4. Delta consolidation is not possible. Each time the local accountant raises a new pull request, BPC will always do a full re-consolidation based on the new timestamp. 
5. You cannot defer amounts to the next period.
6. Data inconsistency could happen when consolidation is running or processed with errors, and at the time, there are new DRRs are submitted.

** Detail Design
This section gives the pseduo sql scripts for all the consolidation views.

#+CAPTION: Naming Conventions for the Consolidation Views 
|                           |        |      | <40>                                     | <5>   |
| Consolidation View        | Group  | Type | Description                              | IsExpert |
|---------------------------+--------+------+------------------------------------------+-------|
| /RTCART/500VINCE1_ENTITY  | ENTITY | CDS  | Consolidation Entity Master Data View    | X     |
| RTC_C_500VINCE1_ENTITY    | ENTITY | Calc | Consolidation Entity Master Data View    | X     |
| /RTCART/500VINCE1_FSI     | FSI    | CDS  | Group Account in Chart of Accounts       |       |
| /RTCART/500VINCE1_FSIM    | FSI    | CDS  | Mapping Local Chart-of-Accounts to Group Chart-of-Accounts | X     |
| RTC_C_500VINCE1_FSIM      | FSI    | Calc | Mapping Local Chart-of-Accounts to Group Chart-of-Accounts | X     |
| /RTCART/500VINCE1_FYVM    | FYVM   | CDS  | Mapping Calendar Date to Fiscal Year and Period | X     |
| RTC_C_500VINCE1_FYVM      | FYVM   | Calc | Mapping Calendar Date to Fiscal Year and Period | X     |
| /RTCART/500VINCE1_LRADRR  | DRR    | CDS  | Lastest Released and Approved DRR        | X     |
| RTC_C_500VINCE1_LRADRR    | DRR    | Calc | Lastest Released and Approved DRR        | X     |
| /RTCART/500VINCE1_A       | Base   | CDS  | Consolidation base view: on foundation views only | X     |
| /RTCART/500VINCE1_C       | Base   | CDS  | Consolidation base view: on ACDOCC only  | X     |
| RTC_C_500VINCE1_C         | Base   | Calc | Consolidation base view: on ACDOCC only  | X     |
| /RTCART/500VINCE1_U       | Base   | CDS  | Consolidation base view: union Foundation Views and ACDOCC |       |
| /RTCART/500VINCE1_U00     | Base   | CDS  | All Data with Cut-off Timestamp(Not Aggregated) | X     |
| /RTCART/500VINCE1_U10     | Base   | CDS  | All Data of All Entities                 | X     |
| /RTCART/500VINCE1_U11     | Base   | CDS  | Period Data of All Entities              | X     |
| /RTCART/500VINCE1_U20     | Base   | CDS  | All Data of an Entity                    | X     |
| /RTCART/500VINCE1_U21     | Base   | CDS  | Period Data of an Entity                 | X     |
| RTC_C_500VINCE1_BPCFINALA | BPC    | Calc | Consolidation BPC view: Final on Foundation View | X     |
| RTC_C_500VINCE1_BPCFINALC | BPC    | Calc | Consolidation BPC view: Final on ACDOCC  | X     |
| RTC_C_500VINCE1_BPCPRLIMA | BPC    | Calc | Consolidation BPC view: Preliminary on Foundation View | X     |
| RTC_C_500VINCE1_BPCPRLIMC | BPC    | Calc | Consolidation BPC view: Preliminary on ACDOCC | X     |
| RTC_C_500VINCE1_BPCUNION  | BPC    | Calc | Consolidation BPC view: Union View       |       |
| /RTCART/500VINCE1_V00     | VALI   | CDS  | Local Validation view: 16 Periods Amount in One line. | X     |
| /RTCART/500VINCE1_V10     | VALI   | CDS  | Local Validation View: Opening, YTD, YTD-1, Period, and Prior Period Amount |       |
| /RTCART/500VINCE1_R10     | REPO   | CDS  | Report View: Drill-through to item detail of Current Period |       |

*** Consolidation Entity View
The entity view is version independent. Each model genreates one CDS view and one calc view. The underlying table if fixed to =RTC_ENTITY_M=. 

#+Caption: Entity Dimension CDS View /RTCART/500VINCE1_ENTITY
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_ENTITY as 
  select DIM, 
         ENTITY, 
         RCOMP,
         DIMLS, 
         RELIM, 
         REJNR, 
         FXTYP, 
         NAME, 
         LOCAL_CURRENCY, 
         FLEXUP as IsExternal
    from RTC_ENTITY_M
   where MANDT = '820'
     and DIM = '100';
#+END_SRC

#+Caption: Entity Dimension Calculation View RTC_C_500VINCE1_ENTITY
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_ENTITY as 
  select DIM, 
         ENTITY, 
         RCOMP,
         DIMLS, 
         RELIM, 
         REJNR, 
         FXTYP, 
         NAME, 
         LOCAL_CURRENCY, 
         FLEXUP as IsExternal
    from RTC_ENTITY_M
   where MANDT = '820'
     and DIM = '100';
#+END_SRC

The above 2 views only show if the dimension is set on "RCOMP". On other dimensions, fields may be different. Besides, the view should also include all other fields that is not in the INCLUDE structure "RTC_S_ENTITY_BUSINESS_KEY".

*** Data Release Request View
Data Release Request view gives out the latest released/approved requests grouped by each entity each period. There is a base view predefined and delivered to customer as standard contents. Based on which the model dependent views are generated.  
1. CDS View: =P_LRADRR=;
2. HANA Calculation View: =RTC_C_LRADRR=.

#+Caption: Entity Dimension CDS View /RTCART/500VINCE1_ENTITY
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_LRADRR as 
  select RTC_CATG,
         RTC_RLDNR,
         RTC_RVERS,
         FYEAR,
         FPERI,
         ENTITY,
         RTIME
    from P_LRADRR
   where MANDT = '500'
     and MODEL = 'VINCE1';
#+END_SRC

*** FS Items View
Financial Statement Item master data dimension view. It is optional assigned in data validation views and report views, so that user can filter data in dimension attributes. 

The pre-delivered CDS view =P_CONSACCINCOA= is for this purpose. Each model will generate a seperate view based on it.
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_FSI as 
  select *
    from P_CONSACCINCOA
   where MANDT = '820'
     and ChartOfAccounts = 'RTC4';
#+END_SRC

 =I_GLAccountInChartOfAccounts= is delivered by G/L accounting team which supports hierarchy.

For BPC consumption, we can reuse the info-object =/ERP/GLACCT=.

*** FS Items Mapping View
FS Items Mapping View defines all the local accounts and their mappings to the group accounts. A local CoA can be mapped to multiple group CoAs, and vice versa. You can also additionally set filters on the local accounts so that you can control which local accounts should be involved in the consolidation. 

The data source view of stream type "FS Items Mapping" should *at least* contain following fields:
| Field Name | Label                   |
|------------+-------------------------|
| MANDT      | SAP Client              |
| KTOPL      | Local Chart of Accounts |
| SAKNR      | Local Account Number    |
| KKTPL      | Group Chart of Accounts |
| RACCT      | Group Account Number    |

The CDS view =P_CONSACCTM= applies the above protocol, which will be pre-delivered. There is also a HANA calculation view =RTC_C_CONS_ACCT_M= which acts as the counterpart for the BPC consumption. In the BPC integration scenario, stream type "FS Items Mapping" is set to RTC_C_CONS_ACCT_M by default. If you want to change to other views, beside creating a new calculation view, you should also create a CDS view with the same fields and logic. 

Base on the consolidation Chart-of-Accounts you set on the model, it generates FS Items Mapping views. FS Item Mapping view is mainly used to join with FI journal view to filter in the accounts and map to the group accounts. It is not recommended to use FS item Mapping views as the master data dimenstion view.

If you have mapping logic on other fields, for example, "functional area". You should add the field "FUNC_AREA" into the maaping view. Then the field will be used as one of the join condition with the foundation view, which means you should also make sure the function area field exists in the foundation view.
 
#+Caption: FS Item Mapping CDS View
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_FSIM as 
    select *
      from P_CONSACCTM
     where Client = '500'
       and GroupCoA = 'RTC2';
#+END_SRC    

#+Caption: FS Item Mapping Calculation View
#+BEGIN_SRC sql
  create view RTC_C_500VINCE1_FSIM as 
    select *
      from RTC_C_CONS_ACCT_M
     where Client = '500'
       and GroupCoA = 'RTC2';
#+END_SRC

*** Fiscal Year Variant Mapping View
Fiscal Year Variant Mapping View is used to map the one FYV to the other FYV. Fiscal year period may be different with calendar year and month. The view use the posting date(BUDAT) to map calendar date to fiscal year and period, or vice versa. 

1. CDS View: =P_CONSFISCALMAP= maps BUDAT to fiscal year and period;
2. HANA View: =RTC_C_FISCMAP= maps BUDAT to fiscal year and period;
3. CDS View: =P_CONSFISCALMAPA= maps fiscal year and period to the first day of the period;
4. HANA View: =RTC_C_FISCMAPA= maps fiscal year and period to the first day of the period;

Based on above view, there are model dependent views generated by adding FSV and Client filtering. 
#+Caption: FSV Mapping CDS View
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_FYVM as 
    select *
      from P_CONSFISCALMAP
     where Client = '500'
       and fiscal_year_variant = 'K4';
#+END_SRC 

*Note:* The anti mapping view doesn't need the model dependent views. 

*** FI Journal Foundation View
This is an example of streamlined foundation view for company consolidation. It projects fields from ACDOCA, however, company code (RBUKRS) is replaced by RCOMP through join with table T001. Only 2 key figures are chosen: WSL and HSL.
| Field Name | Label                               | Usage                                    |
|------------+-------------------------------------+------------------------------------------|
| RCLNT      | SAP Client                          |                                          |
| RLDNR      | Ledger in General Ledger Accounting | For Drill-through                        |
| GJAHR      | Local Fiscal Year                   | For Drill-through                        |
| RBUKRS     | Company Code                        | For Drill-through                        |
| BELNR      | Accounting Document Number          | For Drill-through                        |
| RCOMP      | Company                             |                                          |
| RASSC      | Trading Partner                     |                                          |
| BUDAT      | Posting Date                        | For FYV alignment                        |
| KTOPL      | Local Chart of Accounts             |                                          |
| RACCT      | Local Account Number                |                                          |
| RMVCT      | Transaction Type                    |                                          |
| RWCUR      | Transaction Currency Key            |                                          |
| RHCUR      | Company Code Currency Key           |                                          |
| WSL        | Amount in Transaction Currency      |                                          |
| HSL        | Amount in Company Code Currency     | Mandatory Amount, represent local amount |
| TIMESTAMP  | Timestamp                           | For Data Cut-off                         |

Through foundation view, you see the FI data still in local point of view. The above foundation view will then be converted to consolidation base view, which maps to the group chart of accounts and aligned with the group fiscal year variant. 

Following 2 foundation views are delivered as samples:
| Type | View              | Description                             |
|------+-------------------+-----------------------------------------|
| CDS  | P_FOUNDATIONA     | Consolidation Foundation View of ACDOCA |
| Calc | RTC_C_FOUNDATIONA | Consolidation Foundation View of ACDOCA |
| CDS  | P_FOUNDATIONP     | Consolidation Foundation View of ACDOCP |
| Calc | RTC_C_FOUNDATIONP | Consolidation Foundation View of ACDOCP |

*** Consolidation Base View
Consolidation base views are the basis for other consolidation views to be built on. It contains the common logic that all other consolidation views needed(except dirll-through reports). In the BPC integration scenario, there are also HANA calculation views act as the base views. 
| Field Name  | Label                           |
|-------------+---------------------------------|
| RCLNT       | SAP Client                      |
| MODEL       | Consolidation Model             |
| RTC_CATG    | Data Category                   |
| ACCTP       | Accounting Principle            |
| RVERS       | Variant                         |
| PLEVEL      | Posting Level                   |
| ENTITY      | Consolidation Entity            |
| PENTITY     | Partner Entity                  |
| PERIV       | Group Fiscal Year Variant       |
| RYEAR       | Group Fiscal Year               |
| POPER       | Group Fiscal Period             |
| FISCYEARPER | Group Fiscal Year and Period    |
| KTOPL       | Group Chart of Accounts         |
| RACCT       | Group Account Number            |
| RMVCT       | Transaction Type                |
| RWCUR       | Transaction Currency Key        |
| RHCUR       | Company Code Currency Key       |
| WSL         | Amount in Transaction Currency  |
| HSL         | Amount in Company Code Currency |
| TIMESTAMP   | Timestamp                       |

1. ENTITY is added by joining  =/RTCART/500VINCE1_ENTITY= on field RCOMP, and RCOMP is removed;
2. PENTITY is added by joining  =/RTCART/500VINCE1_ENTITY= on field RASSC, and RASSC is removed;
3. BUDAT is replaced by joining FINS_FISC_DATE for the fields: PERIV, RYEAR, POPER, and FISCYEARPER.
4. KTOPL and RACCT are replaced by joining =/RTCART/500VINCE1_FSIM= for the fields KKTPL and RACCT.

Now, through the consolidation base view, you see the FI journal data in the group view. 

I give all the pseduo sql of the 9 base views:

**** CDS View on Foundation Views only
In case there are more than one data categories in the model, this view should union all the categories. For example, model "VINCE1" has 2 data categories, one is "ACTUAL" with source data from ACDOCA, the other is "PLAN" with source data from ACDOCP. Then the base view should union of the 2 data sources. 

#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A 
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'ACTUAL'  as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          '00'      as PLEVEL,
          ''        as RTFLG,
          B.ENTITY,
          C.ENTITY as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          A.RMVCT
          A.RWCUR,
          A.RHCUR,
          'LC' as CONS_CUR, 
          A.WSL as WSL,
          A.HSL as HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP
     from P_FOUNDATIONA as A
     join /RTCART/500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join /RTCART/500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join /RTCART/500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join /RTCART/500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
union all
   select A.RCLNT,
          'VINCE1'  as MODEL,
          'PLAN'    as RTC_CATG,
          ''        as RLDNR,
          ''        as RVERS,
          '00'      as PLEVEL,
          ''        as RTFLG,
          ...
          A.WSL as WSL,
          A.HSL as HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP
     from P_FOUNDATIONP as A 
    where A.RCLNT = '500'
#+END_SRC

In case the currency translation mode is set to "CT in G/L Accounting", the foundation view must contains 'HSL' and 'KSL',  then this view is generated in this way:
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A 
as select ...
          '00'      as PLEVEL,
          ''        as RTFLG,
          A.RHCUR,
          ''        as A.RKCUR,
          A.RHCUR   as CONS_CUR,
          A.HSL     as HSL,
          0         as KSL,
          A.HSL as CONS_SL,
          ...
     from P_FOUNDATIONA as A
union all
as select ...
          '15'      as PLEVEL,
          '00'      as RTFLG,
          ''        as RHCUR,
          A.RKCUR,
          A.RKCUR   as CONS_CUR,
          0         as HSL,
          A.KSL,
          A.KSL     as CONS_SL,
          ...
     from P_FOUNDATIONA as A
#+END_SRC

All other fields and logic are the same, except:
1. Each data category is splited into 2 pieces: Local Amount and Group Amount;
2. Local Amount has the posting level 00, empty translation indicator, empty KSL, and assign CONS_SL to HSL;
3. Group Amount has the posting level 15, translation indicator 00, empty HSL, and assign CONS_SL to KSL;
 
**** Calculation View on Foundation Views only
In BPC Integration model, you provide HANA calc foundation view. To allow ABAP to consume the data, you must first create a table function on the calculation view, then create the CDS view on the table function. 

In the table function, you implement an AMDP class to access the hana calc foundation views.
#+BEGIN_SRC sql
define table function /RTCART/500VINCE1_ATF
implemented by method /RTCART/500VINCE1=>CALL_A
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'ACTUAL'  as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          'A'       as SRC,
          'NONE'    as RCONGR1, 
          'INPUT'   as AUDIT_TRA,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,        
          cast (COALESCE( A.RMVCT, 'F15') as rmvct) as RMVCT,
          A.RWCUR,
          A.RHCUR,
          'LC' as CONS_CUR,
          A.WSL,
          A.HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP,
          A.RLDNR,
          A.GJAHR,
          A.RBUKRS,
          A.BELNR,
          A.DOCLN,
          A.RCOMP,
          A.RASSC,
          A.KTOPL as LKTOPL,
          A.RACCT as LRACCT
     from RTC_C_FOUNDATIONA as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
union all
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'PLAN'    as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          'P'       as SRC,
          'NONE'    as RCONGR1, 
          'INPUT'   as AUDIT_TRA,
          ...
     from RTC_C_FOUNDATIONP as P
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'        
#+END_SRC

Convert table function to CDS view
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A as
  select RCLNT,
         MODEL,
         RTC_CATG,
         ACCTP,
         RVERS,
         ENTITY,
         PENTITY, 
         PERIV,
         RYEAR,
         POPER,
         FISCYEARPER,
         KTOPL,
         RACCT,        
         RMVCT,
         RWCUR,
         RHCUR,
         CONS_CUR,
         WSL,
         HSL,
         CONS_SL,
         TIMESTAMP
from /RTCART/500VINCE1_ATF;        
#+END_SRC

**** Calculation View and CDS View on ACDOCC only
The calculation view and CDS view are similar.

#+BEGIN_SRC sql
create view /RTCART/500VINCE1_C 
as select A.RCLNT,
          A.MODEL,
          A.RTC_CATG,
          B.ACCTP,
          A.RVERS,
          A.PLEVEL,
          A.RTFLG,
          A.RCONGR1,   --Only needed in BPC Integeration Mode
          A.AUDIT_TRA, --Only needed in BPC Integeration Mode
          C.ENTITY as ENTITY,
          D.ENTITY as PENTITY,
          -- In Case BPC:
          -- cast (COALESCE( D.ENTITY, 'NONE') as rtc_p_entity) as PENTITY, 
          A.PERIV,
          A.RYEAR,
          A.POPER,
          A.FISCYEARPER,
          A.KTOPL,
          A.RACCT,         
          A.RMVCT,
          A.RWCUR,
          A.RHCUR,
          A.CONS_CUR,
          A.WSL,
          A.HSL,
          A.CONS_SL,
          A.TIMESTAMP
     from ACDOCC as A
     join RTC_LEGER_GROUP as B
       on A.RLDNR = B.RLDNR
     join RTC_C_500VINCE1_ENTITY as C
       on A.RCOMP = C.RCOMP
left join RTC_C_500VINCE1_ENTITY as D
       on A.RASSC = D.RCOMP
    where A.DELFLG = ''
      and A.MODEL = 'VINCE1'
      and A.RLCNT = '500'
      and B.MANDT = '500'
      and B.MODEL = 'VINCE1'          
#+END_SRC

**** CDS View on union of ACDOCA and ACDOCC
Refer /RTCART/VINCE100
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_U as 
   select * from  /RTCART/500VINCE1_A
    union all
   select * from  /RTCART/500VINCE1_C;        
#+END_SRC

**** CDS View: All Data with Cut-off Timestamp(Not Aggregated)
Refer ZVINCE109
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U00
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp:timestamp
as select * from  /RTCART/500VINCE1_U
    where rtc_catg  = :p_rtc_catg
      and (acctp    = :p_acctp or acctp = '')
      and (rvers    = :p_rvers or rvers = '')
      and ryear     = :p_ryear
      and poper     = :p_poper
      and plevl     between '00' and '09'
      and timestamp <= :p_timestamp
union all
   select * from /RTCART/500VINCE1_U as a
     join /RTCART/500VINCE1_LRADRR as b
       on b.rtc_catg = :p_rtc_catg
      and b.acctp = :p_acctp
      and b.rtc_rvers = :p_rvers
      and a.ryear = b.fyear
      and a.poper = b.fperi
      and a.entity = b.entity
      and a.timestamp <= b.rtime
    where a.rtc_catg  = :p_rtc_catg
      and (a.acctp    = :p_acctp or a.acctp = '')
      and (a.rvers    = :p_rvers or a.rvers = '')
      and a.ryear     = :p_ryear
      and b.fyear     = :p_ryear
      and a.poper     < :p_poper
      and b.fperi     < :p_poper  
      and plevl       between '00' and '09'
union all
   select * from /RTCART/500VINCE1_U as a
    where a.rtc_catg  = :p_rtc_catg
      and (a.acctp    = :p_acctp or a.acctp = '')
      and (a.rvers    = :p_rvers or a.rvers = '')
      and a.plevl > '09'    
#+END_SRC
**** CDS View: All Data of All Entities
This view is used as a base view to support Currency Translation. 

Refer: ZVINCE112 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U10
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp: timestamp
as select * from  /RTCART/500VINCE1_U00(
                            p_rtc_catg:$parameters.p_rtc_catg,
                            p_acctp:$parameters.p_acctp,
                            p_rvers:$parameters.p_rvers,
                            p_ryear:$parameters.p_ryear,
                            p_poper:$parameters.p_poper,
                            p_timestamp:$parameters.p_timestamp )
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
} group by *
#+END_SRC
**** CDS View: Period Data of All Entities
Refer: ZVINCE113 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U11
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp_fr : timestamp,
                  p_timestamp_to: timestamp
as select * from /RTCART/500VINCE1_U
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
}
where rtc_catg  = :p_rtc_catg
  and (acctp    = :p_acctp or acctp = '')
  and (rvers    = :p_rvers or rvers = '')
  and ryear     = :p_ryear
  and poper     = :p_poper
  and timestamp >  :p_timestamp_fr
  and timestamp <= :p_timestamp_to
group by *
#+END_SRC
**** CDS View: All Data of an Entity 
This view is used as a base view to support data validation and reporting by an entity. It gives out the current period data before a given timestamp, along with prior periods data by filtering in each the approved timestamp. 

Refer: ZVINCE110
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U20
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity: rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp: timestamp
as select * from  /RTCART/500VINCE1_U00(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.p_rvers,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp )
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
} where entity = :p_entity
group by *  
#+END_SRC

**** CDS View: Period Data of an Entity
Refer: ZVINCE111
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U21
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity: rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp_fr: timestamp,
                  p_timestamp_to: timestamp
as select * from /RTCART/500VINCE1_U
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
}
where rtc_catg  = :p_rtc_catg
  and (acctp    = :p_acctp or acctp = '')
  and (rvers    = :p_rvers or rvers = '')
  and entity    = :p_entity
  and ryear     = :p_ryear
  and poper     = :p_poper
  and timestamp > :p_timestamp_fr 
  and timestamp <= :p_timestamp_to 
group by * 
#+END_SRC

*** Consolidation Views for BPC
HANA calculation views are generated for the consumption from BPC. Each BPC category has 2 views: one if for the data in ACDOCA and the other is for the data in ACDOCC. There is also a union view which merges all the calculations views of all the BPC categories. If a new BPC category is added, 2 new views will be merged into the union view. The union view is then assigned to a BW virtual provider, on which there is alos a write-back class to allow BPC write data back to ACDOCC. User can also choose to use a composite provider to union data in other cubes, but this is optional. 

The simplified diagram looks like this:
#+Caption: HANA Views for BPC
[[../image/ConsViews06.png]]

Generally, there is 2 types of BPC category: one needs the data cut-off, the other is not. We usually use "FINAL" as the category which needs data cut-off, and "Preliminary" as the category which needs not.

**** Final View A
This view gives out the submitted report data for these S/4 integrated entities. 
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_BPCFINALA as 
   select A.RCLNT,
          A.MODEL,
          'FINAL'   as BPC_CATG,
          '100' as DIM,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          cast (COALESCE( A.RMVCT, 'F15') as rmvct) as RMVCT,
          'INPUT'   as AUDIT_TRA,
          'NONE'    as RCONGR1,
          SUM(A.CONS_SL) as CONS_SL
     from RTC_C_FOUNDATION as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
     join RTC_C_LRADRR as F
       on A.RYEAR = F.FYEAR
      and A.POPER = F.FPERI
      and A.ENTITY = F.ENTITY
      and A.TIMESTAMP <= F.RTIME
    where A.RCLNT = '500'
      and F.BPC_CATG = 'FINAL'
 group by *;
#+END_SRC

**** Final View C
For those external companies who supplies data through flexible upload, the data is first stored in a staging area (PLEVEL = 00), then the local accountant commits the data which copies the changed data from staging area to the formal area (PLEVEL = 01). Each commit appends delta amounts to the formal area with a timestamp. So now it is the same logic as the data in ACDOCA, we need to join the latest approved request.

The column "AUDIT_TRA" and "RCONGR1" should be fixed with values when doing Flexible upload and S4 CT.
#+BEGIN_SRC sql
  select A.RCLNT,
         A.MODEL,
         'FINAL'   as BPC_CATG,
         A.RCONGR1,
         '100' as DIM,
         C.ENTITY,
         C.PENTITY,
         A.PERIV,
         A.FISCYEARPER,
         A.KTOPL,
         A.RACCT,         
         A.RMVCT,
         A.AUDIT_TRA, 
         A.CONS_CUR,
         sum(A.CONS_SL) as CONS_SL
         from RTC_C_500VINCE1_C as A
         join RTC_C_LRADRR as B
           on A.RYEAR = B.FYEAR
          and A.POPER = B.FPERI
          and A.ENTITY = B.ENTITY
          and A.TIMESTAMP <= B.RTIME
        where A.DCATE   = 'Actual'
          and B.DCATE   = 'Actual'
          and (A.ACCTP = '' or  A.ACCTP   = 'GAAP')
          and (A.RVERS = '' or A.RVERS = '100')
          and A.PLEVEL between '00' and '09'
     group by *
union all
  select A.RCLNT,
         A.MODEL,
         'FINAL'   as BPC_CATG,
         A.RCONGR1,
         '100' as DIM,
         C.ENTITY,
         C.PENTITY,
         A.PERIV,
         A.FISCYEARPER,
         A.KTOPL,
         A.RACCT,         
         A.RMVCT,
         A.AUDIT_TRA, 
         A.CONS_CUR,
         sum(A.CONS_SL) as CONS_SL
         from RTC_C_500VINCE1_C as A
        where A.DCATE = 'Actual'
          and (A.ACCTP = '' or  A.ACCTP = 'CL')
          and (A.RVERS = '' or A.RVERS = '100')
          and A.PLEVEL > '09' --Posting Level > 09 means consolidation engine generated data
     group by *
#+END_SRC

**** Preliminary View A
The view gives out the up-to-time report data for S/4 integrated entities.
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_BPCPRELIMA as 
   select A.RCLNT,
          A.MODEL,
          'PRELIM'   as BPC_CATG,
          '100' as DIM,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          cast (COALESCE( A.RMVCT, 'F15') as rmvct) as RMVCT,
          'INPUT'   as AUDIT_TRA,
          'NONE'    as RCONGR1,
          SUM(A.CONS_SL) as CONS_SL
     from RTC_C_FOUNDATION as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
 group by *;
#+END_SRC

**** Preliminary View C
#+BEGIN_SRC sql
select A.RCLNT,
       A.MODEL,
       'PRELIM'  as BPC_CATG,
       A.RCONGR1,
       '100' as DIM,
       A.ENTITY,
       A.PENTITY,
       A.PERIV,
       A.FISCYEARPER,
       A.KTOPL,
       A.RACCT,         
       A.RMVCT,
       A.AUDIT_TRA,
       A.CONS_CUR,
       sum(A.CONS_SL) as CONS_SL
     from RTC_C_500VINCE1_C as A
    where A.DCATE = 'Actual'
      and (A.ACCTP = '' or  A.ACCTP   = 'CL')
      and (A.RVERS = '' or A.RVERS = '200')
      and A.PLEVEL >= '00'
 group by *;  
#+END_SRC

**** Union View
The union view merges all the views above with "Union all" operator. Which is then assigned to a BW virtual info-provider. BPC can now access the data just like a standard OLAP cube.

*** Validation View
Validation Views are all CDS, which can be used by validation engine or others. Currently, the validation view is on entity base, which means it can only give data per entity.

V00 is build upon U20 by spreading the amounts in a row with 17 periods(000~016). *It only showS the amount of CONS_SL*.

Refer: ZVINCE120
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_V00
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity:rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp:timestamp
as select from  /RTCART/500VINCE1_U20(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.prvers,
                  p_entity:$parameters.p_entity,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp)
{ 
  --First include all characteristic fields except poper, rtflg
  
  --Then only for cons_sl, calculate its 16 periods' amounts
  @Semantics.amount.currencyCode: 'CONS_CUR' 
  sum(case poper 
        when '000' then 
          cast(wsl as abap.dec( 23, 2 )) 
        else 
          cast(0 as abap.dec( 23, 2 )) 
      end) as wslvt,

  @Semantics.amount.currencyCode: 'CONS_CUR' 
  sum(case poper 
        when '001' then 
          cast(wsl as abap.dec( 23, 2 )) 
        else 
          cast(0 as abap.dec( 23, 2 )) 
      end) as wsl01,
   ...
 @Semantics.currencyCode
 cons_cur 
}group by <all characteristic fields>
#+END_SRC

V10 is build upon V00 by caculating the Opening, YTD, YTD-1, Period, and PriorPeriod amounts. And it also adds an input parameter "p_curr", and only filter data between 00 and 09.

Refer: ZVINCE141
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_V10
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity:rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_curr:rtc_curr,
                  p_timestamp:timestamp
as select from  /RTCART/500VINCE1_V00(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.p_rvers,
                  p_entity:$parameters.p_entity,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp)
association [1..1] to /RTCART/500VINCE1_ENTITY  as _Entity  on $projection.Entity =_Entity.entity  
association [1..1] to /RTCART/500VINCE1_ENTITY  as _Pentity on $projection.pentity =_Pentity.entity   
association [1..1] to /RTCART/500VINCE1_FSI as _Account on $projection.ktopl = _Account.ChartOfAccounts
                                                and $projection.racct = _Account.GLAccount    
{  
   ktopl as ChartofAccounts,   
   entity as Entity,   
   pentity as PartnerEntity,   
   racct as Account,   
   rmvct as FlowType,
  --First include all characteristic fields
  
   @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then cons_slvt
     else 0
   end as abap.dec( 23, 2 )) as Opening,
   @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then cons_slvt
     when '001' then (cons_slvt+cons_sl01)
     when '002' then (cons_slvt+cons_sl01+cons_sl02)
     when '003' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03)
     when '004' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04)
     when '005' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05)
     when '006' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06)
     when '007' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07)
     when '008' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08)
     when '009' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09)
     when '010' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10)
     when '011' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11)
     when '012' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12)
     when '013' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13)
     when '014' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14)
     when '015' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15)
     when '016' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15+cons_sl16)         
     else 0
  end as abap.dec( 23, 2 )) as YTD,  
    @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then 0
     when '001' then cons_slvt
     when '002' then (cons_slvt+cons_sl01)
     when '003' then (cons_slvt+cons_sl01+cons_sl02)
     when '004' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03)
     when '005' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04)
     when '006' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05)
     when '007' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06)
     when '008' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07)
     when '009' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08)
     when '010' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09)
     when '011' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10)
     when '012' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11)
     when '013' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12)
     when '014' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13)
     when '015' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14)
     when '016' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15)    
     else 0
  end as abap.dec( 23, 2 )) as PriorYTD,  
  @Semantics.amount.currencyCode: 'Currency'
  cast(
  case $parameters.p_poper
     when '000' then cons_slvt
     when '001' then cons_sl01
     when '002' then cons_sl02
     when '003' then cons_sl03
     when '004' then cons_sl04
     when '005' then cons_sl05
     when '006' then cons_sl06
     when '007' then cons_sl07
     when '008' then cons_sl08
     when '009' then cons_sl09
     when '010' then cons_sl10
     when '011' then cons_sl11
     when '012' then cons_sl12    
     when '013' then cons_sl13
     when '014' then cons_sl14
     when '015' then cons_sl15
     when '016' then cons_sl16
     else 0  
  end as abap.dec( 23, 2 )) as Period,  
  @Semantics.amount.currencyCode: 'Currency'
  cast(
  case $parameters.p_poper
     when '000' then 0
     when '001' then cons_slvt
     when '002' then cons_sl01
     when '003' then cons_sl02
     when '004' then cons_sl03
     when '005' then cons_sl04
     when '006' then cons_sl05
     when '007' then cons_sl06
     when '008' then cons_sl07
     when '009' then cons_sl08
     when '010' then cons_sl09
     when '011' then cons_sl10
     when '012' then cons_sl11    
     when '013' then cons_sl12
     when '014' then cons_sl13
     when '015' then cons_sl14
     when '016' then cons_sl15
     else 0  
  end as abap.dec( 23, 2 )) as PriorPeriod,  
  @Semantics.currencyCode
  cons_cur as Currency
}where cons_cur = $parameters.p_curr
   and plevl between '00' and '09'
#+END_SRC

*** Report View
Refer: ZVINCE101
The drill-through report needs a view which contains additional columns to breakdown or navigate to the detial line items. The drill-through report view named "R00" has the similar logic with consolidation base view, but with addtional columns:

| Field Name  | Lablel                              |
|-------------+-------------------------------------|
| RCLNT       | SAP Client                          |
| MODEL       | Consolidation Model                 |
| RTC_CATG    | Data Category                       |
| ACCTP       | Accounting Principle                |
| RVERS       | Variant                             |
| SRC         | Data source tag for Drill-through   |
| ENTITY      | Consolidation Entity                |
| PENTITY     | Partner Entity                      |
| PERIV       | Group Fiscal Year Variant           |
| RYEAR       | Group Fiscal Year                   |
| POPER       | Group Fiscal Period                 |
| FISCYEARPER | Group Fiscal Year and Period        |
| KTOPL       | Group Chart of Accounts             |
| RACCT       | Group Account Number                |
| RMVCT       | Transaction Type                    |
| RWCUR       | Transaction Currency Key            |
| RHCUR       | Company Code Currency Key           |
| WSL         | Amount in Transaction Currency      |
| HSL         | Amount in Company Code Currency     |
| TIMESTAMP   | Timestamp                           |
| LRLDNR      | Ledger in General Ledger Accounting |
| RBUKRS      | Company Code                        |
| GJAHR       | Local Fiscal Year                   |
| BELNR       | Accounting Document Number          |
| RCOMP       | Company                             |
| RASSC       | Trading Partner                     |
| LKTOPL      | Local Chart of Accounts             |
| LRACCT      | Local Account Number                |

1. ENTITY is added by joining /RTCART/500VINCE1_ENTITY on field RCOMP.
2. PENTITY is added by joining /RTCART/500VINCE1_ENTITY on field RASSC.
3. BUDAT is replaced by joining FINS_FISC_DATE for the fields: PERIV, RYEAR, POPER, and FISCYEARPER.
4. LKTOPL and LRACCT are renamed from KTOPL and RACCT.
5. New KTOPL and RACCT are added by joining /RTCART/500VINCE1_FSIM for the fields KKTPL and RACCT.

Now, through the consolidation base view, you see the FI journal data in both the local view and group view. The drill-through view at least merges data from 2 sources: one is the foundation view, the other is the ACDOCC. There could be multiple data categories assigned, so the foundation views could be more than one. Following pseduo SQL is given:

#+BEGIN_SRC sql
create view /RTCART/500VINCE1_R10
as select RCLNT,
          MODEL,
          RTC_CATG,
          ACCTP,
          RVERS,
          SRC,
          ENTITY,
          PENTITY,
          PERIV,
          RYEAR,
          POPER,
          FISCYEARPER,
          KTOPL,
          RACCT,        
          RMVCT,
          RWCUR,
          RHCUR,
          CONS_CUR,
          WSL,
          HSL,
          CONS_SL,
          TIMESTAMP,
          RLDNR,
          GJAHR,
          RBUKRS,
          BELNR,
          DOCLN,
          RCOMP,
          RASSC,
          LKTOPL,
          LRACCT
     from /RTCART/VINCE100_ATF --in case BPC
     --from P_FOUNDATIONA 
union all
   select A.RCLNT,
          A.MODEL,
          A.RTC_CATG,
          A.ACCTP,
          A.RVERS,
          A.PLEVEL,
          'C'  as SRC,
          B.ENTITY,
          C.ENTITY as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT as RACCT,        
          A.RMVCT,
          A.RWCUR,
          A.RHCUR,
          A.CONS_CUR,
          A.WSL,
          A.HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP,
          A.RLDNR,
          A.RYEAR as GJAHR,
          A.RBUKRS,
          A.BELNR,
          A.DOCLN,
          A.RCOMP,
          A.RASSC,
          A.KTOPL as LKTOPL,
          A.RACCT as LRACCT
     from ACDOCC as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
      and A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500' 
      and A.MODEL = 'VINCE1'
      and A.DELFLG = ''
      and (A.PLEVEL = '' or A.PLEVEL = '03') --Only flexible uploaded/roll-up data and defer.
#+END_SRC

The report structure is fixed as the ACDOCC + [LKTOPL, LRACCT, ACCTP]. Incase Integration with BPC, the above view is first utilized using calculation view, then convert to CDS using table function.
