#+PAGEID: 1832374030
#+VERSION: 36
#+STARTUP: align
#+TITLE: SDD-Consolidation Views
#+OPTIONS: toc:1
** General Information
*** Stakeholders and Roles
| Role                  | Name          |
|-----------------------+---------------|
| Author(s)             | Vincent Zhang |
| Architect             | Vincent Zhang |
| Product Owner         | Shi Ying      |
| Information Developer | Zou Grace     |
| Quality Responsible   | Yao Cen       |
| Developers            | Huang Jin     |

*** References
|                |                  |               | <30>                           |
| Document Title | Date             | Link          | Comments                       |
|----------------+------------------+---------------+--------------------------------|
| HANA Script    | <2016-02-21 Sun> | [[http://help.sap.com/saphelp_hanaplatform/helpdata/en/92/11209e54ab48959c83a7ac3b4ef877/content.htm?frameset=/en/60/088457716e46889c78662700737118/frameset.htm&current_toc=/en/ed/4f384562ce4861b48e22a8be3171e5/plain.htm&node_id=3][online help]]   | Online help of HANA SQL scripts. You can find all your want about how to write in HANA SQL scripts. |
| AMDP Guide     | <2016-02-21 Sun> | [[http://help.sap.com/abapdocu_740/en/index.htm?file=abenamdp.htm][ABAP Keywords]] | All about AMDP: Keywords and Syntax. |


** Context
Consolidation views are CDS views and HANA calculation views generated by the modeling tool for different consolidation purposes. 

Based on the foundation views and other meta definitions (Chart of Account, Fiscal Year Variant, consolidation dimension, and so on), the modeling tool can generate upper views which can be used by different up-level applications. Inspired by SEM-BCS, which generates BW cubes and provides users the maximum flexibility to define their own consolidation model, RTC generates HANA views instead. The main benefit is *we eliminate the data replication without losing much flexibility*. And we leverage full capability of HANA's in-memory and column-based  technology. 

The overall diagram of the view stack is given with detail explanations attached:
#+Caption: Consolidation Views Stack Overview
[[../image/ConsViews02.png]]

1. The main data source comes from ACDOCA and ACDOCC. Of course, you can replace ACDOCA to any other tables (like ACDOCP for planning, or even Z_tables) depends on the data you want to run consolidation. But ACDOCC cannot be replaced, as it is the only storage to hold the consolidated journal entries generated during consolidation run.
2. As most consolidations read data from financial journals, we mainly use ACDOCA as the data source. Then a foundation view needs to be created based on ACDOCA so that you can project fields from ACDOCA and apply necessary falterings on the ledger field and company code field. The foundation view is created in HANA Studio either by CDS or HANA calculation view technology. And this is the only step which needs the horrible HANA Studio. Further more, we can deliver some sample foundation views for the out-of-box usage.  
3. Then the modeling tool will create the base views on the assigned foundation view. The base views mainly apply 6 logics:
   1. Mapping financial organization assignments to consolidation entity;
   2. Mapping operational Chart-of-Accounts to group Chart-of-Accounts;
   3. Mapping operational Fiscal-Year-Variant to group Fiscal-Year-Variant;
   4. Union ACDOCC with correct fields mappings.
   5. If the model is set to be integrated with BPC, then there will be 2 sets of base views generate. One is using HANA calculation view, the other is CDS view. The logics of the 2 view sets are exactly the same. This is because BPC cannot consume CDS views, however, S/4HANA needs CDS views. And the CDS views are actually created based on the HANA calculation view using table function (The golden lines indicates the view flow).
   6. If the model is not set to be integrated with BPC, then the foundation view should be CDS view, and the HANA calculation views won't be generated (The blue lines indicates the view flow).
4. The base view is the base for all other consolidation views built upon. Consolidation views can be grouped by different usages, like for validation, for reporting, for BPC consolidation, and so on. 
5. Validation views are added to the BRF+ application, which is also generated by the model. They can then be accessed by Validation Engine, which allow you to create various rules based on the CDS views(aka rule vocabulary). Validation views are designed for validation purposes, so the main consideration is to facilitate end-users to easily define rules. They may have input parameters(like entity, fiscal period, and so on), so that rules based on it can be run in different data contexts.
6. BPC views are HANA calc views which are only consumed by BPC through a virtual info-provider(or composite info-provider). There will be multiple views generated according to 2 considerations: 1)whether the data is in ACDOCA or ACDOCC; 2)whether it needs to be timestamp filtering or not.  Then at least, 4 views are generated: Final data from ACDOCA, preliminary data from ACDOCA, final data from ACDOCC, and preliminary data from ACDOCC. The 4 views are merged into a union calculation view.
7. Currency Translation Method(AMDP) directly accesses the base view to retrieve data. The data is then translated and temporary stored in the Global Temporary Table, which can either be reported to the end-user, or be input for the follow-up consolidation tasks(like elimination).
8. There are also consolidation views for reporting, and master data views on entity and FS items.  
 
*** Data Cut-off
A [[https://wiki.wdf.sap.corp/wiki/x/wY4GbQ][Data Release Request]] is raised by a local accountant as a data cut-off record. It contains information like: model, version(category), entity, fiscal year/period, and cut-off timestamp. The group accountant uses this filter information to pull data from ACDOCA/C for further processing. 

The data release requests(DRR) are stored in table =RTC_DRR=, also having user statuses and system statuses recorded. Only if a DRR is in user status "Released", group accountants can run validation on the data it points; If a DRR is in status "Approved", which means the group accountant accept the data submitted, and ready for consolidation. 

Table =RTC_DRR= is either joined with ACDOCA/C, or be picked out of the correct DRR to filter in data so that only before a certain point of the data participates in consolidation. Besides,  actions and logs, like validation result, translation result, comments & attachments, which are related to a data release activity, are all recorded to a DRR.

*** BPC Integration
For the reason of BPC integration, which means you must pass all your logics in the consolidation views to the BW interfaces(virtual info-providers), you have to make sure all the OLAP operations should work properly on your views. Bearing in mind, info-providers don't support input parameters, which means you can not pass a timestamp to it. Then the only way you can go is *stacking Views*. 

The BPC consolidation views are generated by the modeling tool. For each BPC category, there will be a set of views generated by considering ACDOCA/C and Final/Preliminary. The term "Final" means data needs to be cut-off by given a timestamp, and "Preliminary" means always getting the most recent data in ACDOCA/C. The Final views have already joined with the =RTC_DRR= to get the latest submitted/approved data. 

So now, each BPC category has the pair <FINAL/PRELIM>_A and <FINAL/PRELIM>_C. With a model having multiple BPC categories, these views are stacked(union) and form the OLAP cube-like thing. 
    
** Overall Design
*** Key Requirements and Design Goals
BPC can access the real-time data in ACDOCA with timestamp filtering. 

The requirement comes from the legal consolidation which require strict data process control. Only the data that local accountants submitted can group accountants run validation and consolidation on them. But if we let BPC access data on ACDOCA directly, group accountants will always access the most recent data without a handover control. Meanwhile, as the continues changing of the data in ACDOCA, it causes the data inconsistency during a consolidation process. 

The general idea is to use timestamps to cut-off data in ACDOCA. The timestamp usually stands for the time that local accountants close their fiscal periods(soft commit). BPC now only accesses the timestamp-filtered data in ACDOCA. Thus we achieve the data handover without data replications. 

If data is provided through flexible uploading, the handover is then potentially executed when the local accountants upload the data into ACDOCC. So, periodically, timestamp filtering is not necessary. But it is very often the uploading happens in many times for a single package of data. User may first upload parts of the data, and then the following parts one by one; or the user may change/adjust the uploaded data. For either cases, delta changes should be the best option. Then with the delta change approach, timestamp filtering is also suitable. 

*** 1610 Release(Limited)
The design is divided into 2 versions: =1610 Version=, and the =Completed Version=. As you can imagine, to achieve both real-time data access and sophistic status/workflow control are rather complicate and time/resource consuming. We design a simplified version for 1610, which we eliminate the status control and local validation. Details of the limitations and restrictions are listed:

1. Once the local accountant raise a DRR, it is approved automatically, group accountant can only accept it. There is no embedded control on this process, group accountant must notify the local accountant externally if she doesn't want the data.
2. There is no control on local document posting to the consolidated periods. Those "illegal" postings are discarded, or must be resolved by external controls.
3. Data validation is not integrated, there is no system promise that the submitted data is validate according to the rules. Expensive communication effort are necessary between group accountants and local accountants when such cases happen. 
4. Delta consolidation is not possible. Each time the local accountant raises a new pull request, BPC will always do a full re-consolidation based on the new timestamp. 
5. You cannot defer amounts to the next period.
6. Data inconsistency could happen when consolidation is running or processed with errors, and at the time, there are new DRRs are submitted.

** Detail Design
This section gives the pseudo sql scripts for all the consolidation views.

#+CAPTION: Naming Conventions for the Consolidation Views 
|                           |        |      | <40>                                     | <5>   |
| Consolidation View        | Group  | Type | Description                              | IsExpert |
|---------------------------+--------+------+------------------------------------------+-------|
| /RTCART/500VINCE1_ENTITY  | ENTITY | CDS  | Consolidation Entity Master Data View    |       |
| RTC_C_500VINCE1_ENTITY    | ENTITY | Calc | Consolidation Entity Master Data View    | X     |
| /RTCART/500VINCE1_FSI     | FSI    | CDS  | Financial Statement Item Master Data View |       |
| /RTCART/500VINCE1_FSIM    | FSI    | CDS  | Mapping Operational Chart-of-Accounts to Group Chart-of-Accounts | X     |
| RTC_C_500VINCE1_FSIM      | FSI    | Calc | Mapping Operational Chart-of-Accounts to Group Chart-of-Accounts | X     |
| /RTCART/500VINCE1_FYVM    | FYVM   | CDS  | Mapping Calendar Date to Fiscal Year and Period | X     |
| RTC_C_500VINCE1_FYVM      | FYVM   | Calc | Mapping Calendar Date to Fiscal Year and Period | X     |
| /RTCART/500VINCE1_LRADRR  | DRR    | CDS  | Latest Approved DRR                      | X     |
| RTC_C_500VINCE1_LRADRR    | DRR    | Calc | Latest Approved DRR                      | X     |
| /RTCART/500VINCE1_A       | Base   | CDS  | Convert Foundation View from Local to Group | X     |
| /RTCART/500VINCE1_C       | Base   | CDS  | Expose Model Specific Data in ACDOCC     | X     |
| RTC_C_500VINCE1_C         | Base   | Calc | Expose Model Specific Data in ACDOCC     | X     |
| /RTCART/500VINCE1_U       | Base   | CDS  | Union Set of Base View A and C           |       |
| /RTCART/500VINCE1_U00     | Base   | CDS  | Version Specific Data with Timestamp Filtering(Not Aggregated) | X     |
| /RTCART/500VINCE1_U10     | Base   | CDS  | Version Specific Data with Timestamp Filtering and Aggregate | X     |
| /RTCART/500VINCE1_U11     | Base   | CDS  | Period Specific Data of a Consolidation Version | X     |
| /RTCART/500VINCE1_U20     | Base   | CDS  | Entity Specific Data of a Consolidation Version | X     |
| /RTCART/500VINCE1_U21     | Base   | CDS  | Entity and Period Specific Data of a Consolidation Version | X     |
| RTC_C_500VINCE1_BPCFINALA | BPC    | Calc | BPC Category <FINAL> view on Foundation Views | X     |
| RTC_C_500VINCE1_BPCFINALC | BPC    | Calc | BPC Category <FINAL> view on ACDOCC      | X     |
| RTC_C_500VINCE1_BPCPRLIMA | BPC    | Calc | BPC Category <PRELIM> view on Foundation Views | X     |
| RTC_C_500VINCE1_BPCPRLIMC | BPC    | Calc | BPC Category <PRELIM> view on ACDOCC     | X     |
| RTC_C_500VINCE1_BPCUNION  | BPC    | Calc | Union View of all BPC Category Views     |       |
| /RTCART/500VINCE1_V00     | VALI   | CDS  | Local Validation View with 17 Period Amounts(00~16) in One Row | X     |
| /RTCART/500VINCE1_V10     | VALI   | CDS  | Default Local Validation View in Data Release Cockpit |       |
| /RTCART/500VINCE1_R10     | REPO   | CDS  | Drill-through Report View: List Items in Journal Entry Level |       |

*** Consolidation Entity View
You can view all the consolidation entities involved in the model through this view.The underlying source table is =RTC_ENTITY_M=. 

#+Caption: Entity Dimension CDS View /RTCART/500VINCE1_ENTITY
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_ENTITY as 
  select DIM, 
         ENTITY, 
         RCOMP,
         DIMLS, 
         RELIM, 
         REJNR, 
         FXTYP, 
         NAME, 
         LOCAL_CURRENCY, 
         FLEXUP as IsExternal
    from RTC_ENTITY_M
   where MANDT = '820'
     and DIM = '100';
#+END_SRC

#+Caption: Entity Dimension Calculation View RTC_C_500VINCE1_ENTITY
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_ENTITY as 
  select DIM, 
         ENTITY, 
         RCOMP,
         DIMLS, 
         RELIM, 
         REJNR, 
         FXTYP, 
         NAME, 
         LOCAL_CURRENCY, 
         FLEXUP as IsExternal
    from RTC_ENTITY_M
   where MANDT = '820'
     and DIM = '100';
#+END_SRC

The above 2 views only show if the dimension is set on "RCOMP". On other dimensions, fields may be different. Besides, the view should also include all other fields that is not in the INCLUDE structure "RTC_S_ENTITY_BUSINESS_KEY".

*** Data Release Request View
Data Release Request view gives out the latest approved requests grouped by consolidation version(BPC category in case integrated with BPC), entity and period.

#+Caption: Data Release Request CDS View /RTCART/500VINCE1_LRADRR
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_LRADRR as 
  select RTC_CATG,
         RTC_ACCTP,
         RTC_RVERS,
         FYEAR,
         FPERI,
         ENTITY,
         RTIME
    from P_LRADRR
   where MANDT = '500'
     and MODEL = 'VINCE1';
#+END_SRC

#+Caption: Data Release Request CALC View RTC_C_500VINCE1_LRADRR
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_LRADRR as 
  select BPC_CATG,
         FYEAR,
         FPERI,
         ENTITY,
         RTIME
    from P_LRADRR
   where MANDT = '500'
     and MODEL = 'VINCE1';
#+END_SRC

There is a base view predefined and delivered to customer as standard contents. Based on which the model dependent views are generated.  
1. CDS View: =P_LRADRR=;
2. HANA Calculation View: =RTC_C_LRADRR=.

*** FS Items View
Financial Statement Item view is used as the master data dimension view in validation views. Currently, the source table is fixed to SKA1. You can view all the G/L accounts in the group Chart-of-Accounts. The view also projects BPC required attributes which are stored in RTC_EXT_SKA1, you can use RTCACCT to maintain these additional attributes.   

#+BEGIN_SRC sql
create view /RTCART/500VINCE1_FSI as 
  select *
    from P_CONSACCINCOA
   where MANDT = '820'
     and ChartOfAccounts = 'RTC4';
#+END_SRC

The pre-delivered CDS view =P_CONSACCINCOA= reads data from =SKA1= and =RTC_EXT_SKA1=. Each model will generate a separate view based on it.

=I_GLAccountInChartOfAccounts= is delivered by G/L accounting team which supports hierarchy.

For BPC consumption, we can reuse the info-object =/ERP/GLACCT=.

*** FS Items Mapping View
FS Items Mapping View is used to define the mappings between the local Chart-of-Accounts and the group Chart-of-Accounts. A local CoA can be mapped to multiple group CoAs, and vice versa. Currently, only one group CoA is supported, so the generated mapping view only shows mappings to one group CoA. 

FS Items Mapping View is bound to the stream type "FS Items Mapping", which requires *at least* following columns:
| Field Name | Label                   |
|------------+-------------------------|
| MANDT      | SAP Client              |
| KTOPL      | Local Chart of Accounts |
| SAKNR      | Local Account Number    |
| KKTPL      | Group Chart of Accounts |
| RACCT      | Group Account Number    |

The pre-delivered CDS view =P_CONSACCTM= applies to the above protocol. It contains the mapping rules which are defined in G/L Accounting(SKA1). There is also a HANA calculation view =RTC_C_CONS_ACCT_M= which acts as the counterpart in the BPC integration scenario. 

If the existing mapping rules in G/L Accounting cannot fulfill your requirements, then you can compose your own mapping rules and assign your own FS Items Mapping View to the stream type. For example, you want "functional area" as a condition along with the account number. Then you should have the mappings maintained like this: =FUNC_AREA= + =Local Account= -> =Group Account=. The field "FUNC_AREA" should be added into the mapping view, which will be used as one of the join condition with the foundation view. So, you should also make sure the "FUNC_AREA" field exists in the foundation views.
 
#+Caption: FS Item Mapping CDS View
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_FSIM as 
    select *
      from P_CONSACCTM
     where Client = '500'
       and GroupCoA = 'RTC2';
#+END_SRC    

#+Caption: FS Item Mapping Calculation View
#+BEGIN_SRC sql
  create view RTC_C_500VINCE1_FSIM as 
    select *
      from RTC_C_CONS_ACCT_M
     where Client = '500'
       and GroupCoA = 'RTC2';
#+END_SRC

*** Fiscal Year Variant Mapping View
Fiscal Year Variant Mapping View is used to align different local fiscal year variants to the group fiscal year variant. The view uses the posting date(BUDAT) to map calendar date to fiscal year and period, or vice versa. 

The generated mapping view is based on the pre-delivered CDS view =P_CONSFISCALMAP=, or CALC view =RTC_C_FISCMAP= in case BPC Integration. There are other 2 views =P_CONSFISCALMAPA= and =RTC_C_FISCMAPA=, which are used for mapping fiscal year and period to the first calendar day of the period.

#+Caption: FSV Mapping CDS View
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_FYVM as 
    select *
      from P_CONSFISCALMAP
     where Client = '500'
       and fiscal_year_variant = 'K4';
#+END_SRC 

*Note:* The anti mapping view doesn't need the model dependent views. 

*** FI Journal Foundation View
FI Journal Foundation View(foundation view in short) exposes all the financial journal items that are related to consolidation, based on which, additional consolidation views are generated. 

Fields in foundation view are protocoled. Some fields are mandatory and with fixed names, while others can be freely added. Bellow is an example of streamlined foundation view for company consolidation. It projects fields from ACDOCA, however, company code (RBUKRS) is replaced by RCOMP through join with table T001. Only 2 key figures are chosen: WSL and HSL.

| Field Name | Label                               | Usage                                    |
|------------+-------------------------------------+------------------------------------------|
| RCLNT      | SAP Client                          |                                          |
| RLDNR      | Ledger in General Ledger Accounting | For Drill-through                        |
| GJAHR      | Local Fiscal Year                   | For Drill-through                        |
| RBUKRS     | Company Code                        | For Drill-through                        |
| BELNR      | Accounting Document Number          | For Drill-through                        |
| RCOMP      | Company                             |                                          |
| RASSC      | Trading Partner                     |                                          |
| BUDAT      | Posting Date                        | For FYV alignment                        |
| KTOPL      | Local Chart of Accounts             |                                          |
| RACCT      | Local Account Number                |                                          |
| RMVCT      | Transaction Type                    |                                          |
| RWCUR      | Transaction Currency Key            |                                          |
| RHCUR      | Company Code Currency Key           |                                          |
| WSL        | Amount in Transaction Currency      |                                          |
| HSL        | Amount in Company Code Currency     | Mandatory Amount, represent local amount |
| TIMESTAMP  | Timestamp                           | For Data Cut-off                         |

We pre-deliver 4 foundation views as examples. These 4 foundation views are categorized to "ACTUAL" and "PLAN" data categories, which can be directly used during your model creation.
| Data Category | Type | View              | Description                             |
|---------------+------+-------------------+-----------------------------------------|
| ACTUAL        | CDS  | P_FOUNDATIONA     | Consolidation Foundation View on ACDOCA |
| ACTUAL        | Calc | RTC_C_FOUNDATIONA | Consolidation Foundation View on ACDOCA |
| PLAN          | CDS  | P_FOUNDATIONP     | Consolidation Foundation View on ACDOCP |
| PLAN          | Calc | RTC_C_FOUNDATIONP | Consolidation Foundation View on ACDOCP |

A consolidation model can be assigned with multiple foundation views. There foundation views are stacked together as a union set.

*** Consolidation Base View
Consolidation Base Views are generated from foundation views by mapping to the group account, entity, and fiscal year variant. Through base views, you see data in group point of view. 

Bellow is an example of base view which has the company as the consolidation dimension. How the view is generated is also explained.

| Field Name  | Label                           |
|-------------+---------------------------------|
| RCLNT       | SAP Client                      |
| MODEL       | Consolidation Model             |
| RTC_CATG    | Data Category                   |
| ACCTP       | Accounting Principle            |
| RVERS       | Variant                         |
| PLEVEL      | Posting Level                   |
| ENTITY      | Consolidation Entity            |
| PENTITY     | Partner Entity                  |
| PERIV       | Group Fiscal Year Variant       |
| RYEAR       | Group Fiscal Year               |
| POPER       | Group Fiscal Period             |
| FISCYEARPER | Group Fiscal Year and Period    |
| KTOPL       | Group Chart of Accounts         |
| RACCT       | Group Account Number            |
| RMVCT       | Transaction Type                |
| RWCUR       | Transaction Currency Key        |
| RHCUR       | Company Code Currency Key       |
| WSL         | Amount in Transaction Currency  |
| HSL         | Amount in Company Code Currency |
| TIMESTAMP   | Timestamp                       |

1. ENTITY is added by joining  =/RTCART/500VINCE1_ENTITY= on field RCOMP, and RCOMP is removed;
2. PENTITY is added by joining  =/RTCART/500VINCE1_ENTITY= on field RASSC, and RASSC is removed;
3. BUDAT is replaced by joining =/RTCART/500VINCE1_FYVM= for the fields: PERIV, RYEAR, POPER, and FISCYEARPER;
4. KTOPL and RACCT are replaced by joining =/RTCART/500VINCE1_FSIM= for the fields KKTPL and RACCT.

There are 8 consolidation base views:

**** Base View: Convert Foundation View from Local to Group
The view selects all the data from foundation views and convert local account, entity, and fiscal year period to the group point of view. In case there are more than one data categories, the foundation view of each data category is merged to a union set. For example, model "VINCE1" has 2 data categories, one is "ACTUAL" with foundation view =P_FOUNDATIONA=, the other is "PLAN" with foundation view =P_FOUNDATIONP=. Then the 2 foundation views should be merged in this view 

#+Caption: CDS View to Convert Foundation View from Local to Group 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A 
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'ACTUAL'  as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          '00'      as PLEVEL,
          ''        as RTFLG,
          B.ENTITY,
          C.ENTITY as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          A.RMVCT
          A.RWCUR,
          A.RHCUR,
          'LC' as CONS_CUR, 
          A.WSL as WSL,
          A.HSL as HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP
     from P_FOUNDATIONA as A
     join /RTCART/500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join /RTCART/500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join /RTCART/500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join /RTCART/500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
union all
   select A.RCLNT,
          'VINCE1'  as MODEL,
          'PLAN'    as RTC_CATG,
          ''        as RLDNR,
          ''        as RVERS,
          '00'      as PLEVEL,
          ''        as RTFLG,
          ...
          A.WSL as WSL,
          A.HSL as HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP
     from P_FOUNDATIONP as A 
    where A.RCLNT = '500'
#+END_SRC

In case the currency translation mode is set to "CT in G/L Accounting", the foundation view must contains 'HSL' and 'KSL',  then this view is generated in this way:
#+Caption: CDS View to Convert Foundation View from Local to Group with Group Amount
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A 
as select ...
          '00'      as PLEVEL,
          ''        as RTFLG,
          A.RHCUR,
          A.RKCUR,
          A.RHCUR   as CONS_CUR,
          A.WSL     as WSL,
          A.HSL     as HSL,
          A.KSL     as KSL,
          A.HSL as CONS_SL,
          ...
     from P_FOUNDATIONA as A
union all
as select ...
          '09'      as PLEVEL,
          '00'      as RTFLG,
          RHCUR,
          A.RKCUR,
          A.RKCUR   as CONS_CUR,
          0         as WSL,
          0         as HSL,
          0         as KSL,
          A.KSL     as CONS_SL,
          ...
     from P_FOUNDATIONA as A
#+END_SRC

All other fields and logic are the same, except:
1. Each data category is split into 2 pieces: Local Amount and Group Amount;
2. Local Amount has the posting level 00, empty translation indicator, empty KSL, and assign CONS_SL to HSL;
3. Group Amount has the posting level 09, translation indicator 04, empty HSL, and assign CONS_SL to KSL;
 
In BPC integration mode, HANA CALC foundation view is provided. To allow ABAP to consume the data, a table function should be created to access the calculation view. Then the CDS view is created based on the table function. 

In the table function, you implement an AMDP class to access the Hana calc foundation views.
#+Caption: Table Function to Convert Foundation View from Local to Group 
#+BEGIN_SRC sql
define table function /RTCART/500VINCE1_ATF
implemented by method /RTCART/500VINCE1=>CALL_A
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'ACTUAL'  as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          'A'       as SRC,
          'G_NONE'  as RCONGR1, 
          'INPUT'   as AUDIT_TRA,
          '00'      as PLEVEL,
          ''        as RTFLG,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,        
          cast (case A.RMVCT when ''  then '100' else A.RMVCT end as NVARCHAR(3)) as RMVCT,
          A.RWCUR,
          A.RHCUR,
          'LC' as CONS_CUR,
          A.WSL,
          A.HSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP,
          A.RLDNR,
          A.GJAHR,
          A.RBUKRS,
          A.BELNR,
          A.DOCLN,
          A.RCOMP,
          A.RASSC,
          A.KTOPL as LKTOPL,
          A.RACCT as LRACCT
     from RTC_C_FOUNDATIONA as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
union all
as select A.RCLNT,
          'VINCE1'  as MODEL,
          'PLAN'    as RTC_CATG,
          ''        as ACCTP,
          ''        as RVERS,
          'P'       as SRC,
          'G_NONE'    as RCONGR1, 
          'INPUT'   as AUDIT_TRA,
          '00'      as PLEVEL,
          ''        as RTFLG,
          ...
     from RTC_C_FOUNDATIONP as P
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'        
#+END_SRC

#+Caption: CDS View on Table Function
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A as
  select RCLNT,
         MODEL,
         RTC_CATG,
         ACCTP,
         RVERS,
         ENTITY,
         PENTITY, 
         PERIV,
         RYEAR,
         POPER,
         FISCYEARPER,
         KTOPL,
         RACCT,        
         RMVCT,
         RWCUR,
         RHCUR,
         CONS_CUR,
         WSL,
         HSL,
         CONS_SL,
         TIMESTAMP
from /RTCART/500VINCE1_ATF;        
#+END_SRC

**** Base View: Expose Data in ACDOCC
The view expose all the data belongs to the model from ACDOCC. Data in ACDOCC comes from 2 cases:
1. Uploaded local data of external entities;
2. Consolidation journals generated from different consolidation tasks.

#+Caption: CDS View to Expose Data in ACDOCC
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_C 
as select A.RCLNT,
          A.MODEL,
          A.RTC_CATG,
          B.ACCTP,
          A.RVERS,
          A.PLEVEL,
          A.RTFLG,
          A.RCONGR1,   --Only needed in BPC Integration Mode
          A.AUDIT_TRA, --Only needed in BPC Integration Mode
          C.ENTITY as ENTITY,
          D.ENTITY as PENTITY,
          -- In Case BPC:
          -- cast (COALESCE( D.ENTITY, 'NONE') as rtc_p_entity) as PENTITY, 
          A.PERIV,
          A.RYEAR,
          A.POPER,
          A.FISCYEARPER,
          A.KTOPL,
          A.RACCT,         
          A.RMVCT,
          A.RWCUR,
          A.RHCUR,
          A.CONS_CUR,
          A.WSL,
          A.HSL,
          A.CONS_SL,
          A.TIMESTAMP
     from ACDOCC as A
     left outer join RTC_LEDGER_GROUP as B
       on A.RLDNR = B.RLDNR
      and B.MANDT = '500'
      and B.MODEL = 'VINCE1'    
     join RTC_C_500VINCE1_ENTITY as C
       on A.RCOMP = C.RCOMP
left join RTC_C_500VINCE1_ENTITY as D
       on A.RASSC = D.RCOMP
    where A.DELFLG = ''
      and A.MODEL = 'VINCE1'
      and A.RLCNT = '500'      
#+END_SRC

The view also has a calculation view counterpart =RTC_C_500VINCE1_C= in case integration with BPC.

**** Base View: Union Set of Base View A and C
The view gives out a complete data set of a consolidation model. 

#+Caption: CDS View to Expose All the Data of A Model
#+BEGIN_SRC sql
  create view /RTCART/500VINCE1_U as
   select * from  /RTCART/500VINCE1_C 
     union all
   select * from  /RTCART/500VINCE1_A;
       
#+END_SRC
Refer /RTCART/VINCE100

**** Base View: Consolidation Version Specific Data with Timestamp Filtering(Not Aggregated)
The view is based on View U, and reads data belong to one consolidation version. It has 6 input parameters. "p_rtc_catg", "p_acctp", and "p_rvers" are bound to one consolidation version. "p_ryear" and "p_poper" are used to get both the specific fiscal year period data and the data of its prior periods in the corresponding fiscal year. "p_timestamp" is only used to filter data of the specific fiscal year period, for its prior periods, it uses the timestamp on the latest approved DRRs.

#+Caption: CDS View of Consolidation Version Specific Data with Cut-off Timestamp Control(Not Aggregated) 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U00
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp:timestamp
as select * from  /RTCART/500VINCE1_U
    where rtc_catg  = :p_rtc_catg
      and (acctp    = :p_acctp or acctp = '' or acctp is null)
      and (rvers    = :p_rvers or rvers = '')
      and ryear     = :p_ryear
      and poper     = :p_poper
      and plevl     between '00' and '09'
      and timestamp <= :p_timestamp
union all
   select * from /RTCART/500VINCE1_U as a
     join /RTCART/500VINCE1_LRADRR as b
       on b.rtc_catg = :p_rtc_catg
      and b.acctp = :p_acctp
      and b.rtc_rvers = :p_rvers
      and a.ryear = b.fyear
      and a.poper = b.fperi
      and a.entity = b.entity
      and a.timestamp <= b.rtime
    where a.rtc_catg  = :p_rtc_catg
      and (a.acctp    = :p_acctp or a.acctp = '' or a.acctp is null)
      and (a.rvers    = :p_rvers or a.rvers = '')
      and a.ryear     = :p_ryear
      and b.fyear     = :p_ryear
      and a.poper     < :p_poper
      and b.fperi     < :p_poper  
      and plevl       between '00' and '09'
union all
   select * from /RTCART/500VINCE1_U as a
    where a.rtc_catg  = :p_rtc_catg
      and (a.acctp    = :p_acctp or a.acctp = '' or a.acctp is null)
      and (a.rvers    = :p_rvers or a.rvers = '')
      and a.plevl > '09'    
#+END_SRC

Refer ZVINCE109.
**** Base View: Version Specific Data Aggregated
This view is based on View U00 by summarizing all the amount fields. 
#+Caption: CDS View of Version Specific Data Aggregated
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U10
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp: timestamp
as select * from  /RTCART/500VINCE1_U00(
                            p_rtc_catg:$parameters.p_rtc_catg,
                            p_acctp:$parameters.p_acctp,
                            p_rvers:$parameters.p_rvers,
                            p_ryear:$parameters.p_ryear,
                            p_poper:$parameters.p_poper,
                            p_timestamp:$parameters.p_timestamp )
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
} group by *
#+END_SRC
Refer: ZVINCE112 

**** Base View: Period Specific Data of a Consolidation Version
The view is based on View U, and only reads current fiscal year period data of a specific consolidation version. You can also have timestamp filtering with "from" and "to".

#+Caption: CDS View of Period Specific Data of a Consolidation Version
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U11
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp_fr : timestamp,
                  p_timestamp_to: timestamp
as select * from /RTCART/500VINCE1_U
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
}
where rtc_catg  = :p_rtc_catg
  and (acctp    = :p_acctp or acctp = '' or acctp is null)
  and (rvers    = :p_rvers or rvers = '')
  and ryear     = :p_ryear
  and poper     = :p_poper
  and timestamp >  :p_timestamp_fr
  and timestamp <= :p_timestamp_to
group by *
#+END_SRC
Refer: ZVINCE113 
**** Base View: Entity Specific Data of a Consolidation Version
This view is based on U10, and only read data for a specific entity. 

#+Caption: CDS View of Entity Specific Data of a Consolidation Version
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U20
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity: rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp: timestamp
as select * from  /RTCART/500VINCE1_U10(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.p_rvers,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp )
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  wsl,
  hsl,
  cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
} where entity = :p_entity
#+END_SRC
Refer: ZVINCE114

**** Base View: Entity and Period Specific Data of a Consolidation Version
The view is based on View U, and only reads current fiscal year period data of a specific entity and consolidation version. You can also have timestamp filtering with "from" and "to".

#+Caption: CDS View of Entity and Period Specific Data 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_U21
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity: rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp_fr: timestamp,
                  p_timestamp_to: timestamp
as select * from /RTCART/500VINCE1_U
{
  ktopl,
  ryear,
  poper,
  entity,
  pentity,
  racct,
  rmvct,
  rtflg,
  sum(wsl) as wsl,
  sum(hsl) as hsl,
  sum(cons_sl) as cons_sl,
  rwcur,
  rhcur,
  cons_cur,
  plevl
}
where rtc_catg  = :p_rtc_catg
  and (acctp    = :p_acctp or acctp = '' or acctp is null)
  and (rvers    = :p_rvers or rvers = '')
  and entity    = :p_entity
  and ryear     = :p_ryear
  and poper     = :p_poper
  and timestamp > :p_timestamp_fr 
  and timestamp <= :p_timestamp_to 
group by * 
#+END_SRC
Refer: ZVINCE111

*** Consolidation Views for BPC
HANA calculation views are generated based on the foundation views for the integration with BPC. Each BPC category is assigned to a consolidation version, through which, the foundation view is derived from the RTC data category. Each BPC category generates 2 views: one is for the data in foundation view and the other is for the data in ACDOCC. There is also a union view generated, which merges all the category views. If a new BPC category is added, 2 new CALC views will be merged into the union view. The union view is then assigned to a BW virtual provider, on which there is also a write-back class to allow BPC write data back to ACDOCC. User can also choose to use a composite provider to union data in other cubes, but this is optional. 

The simplified diagram looks like this:
#+Caption: HANA Views for BPC
[[../image/ConsViews06.png]]

Generally, there is 2 types of BPC category: one needs the data cut-off, the other is not. We usually use "FINAL" as the category which needs data cut-off, and "Preliminary" as the category which needs not.

**** Final View A
This view gives out the released report data for these entities resides in S/4 HANA Finance. 
#+Caption: HANA Calc View of a Final Type BPC Category View on Foundation View
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_BPCFINALA as 
   select A.RCLNT,
          A.MODEL,
          'FINAL'   as BPC_CATG,
          '100' as DIM,
          ''    as RTFLG,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          cast (case A.RMVCT when ''  then '100' else A.RMVCT end as NVARCHAR(3)) as RMVCT,
          'INPUT'   as AUDIT_TRA,
          'G_NONE'    as RCONGR1,
          cast ('LC' as RTC_CURR) as CONS_CUR,
          SUM(A.CONS_SL) as CONS_SL
     from RTC_C_FOUNDATION as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
     join RTC_C_LRADRR as F
       on A.RYEAR = F.FYEAR
      and A.POPER = F.FPERI
      and A.ENTITY = F.ENTITY
      and A.TIMESTAMP <= F.RTIME
    where A.RCLNT = '500'
      and F.BPC_CATG = 'FINAL'
 group by *;
#+END_SRC

**** Final View C
This view gives out data in ACDOCC which belongs to the model and BPC category.

For those external companies who supplies data through flexible upload, the data is first stored in a staging area(PLEVEL is null), then the local accountant commits the data which copies the changed data from staging area to the formal area (PLEVEL = 00). Each commit appends delta amounts to the formal area with a timestamp.

The data with posting level between '00' and '09' is controlled by data release process, which means it is filtered with release timestamp. For data with posting level larger than '09' is generated by consolidation tasks, which is not filtered by timestamp.

#+Caption: HANA Calc View of a Final Type BPC Category View on ACDOCC
#+BEGIN_SRC sql
  select A.RCLNT,
         A.MODEL,
         'FINAL'   as BPC_CATG,
         A.RCONGR1,
         '100' as DIM,
         RTFLG,
         C.ENTITY,
         C.PENTITY,
         A.PERIV,
         A.FISCYEARPER,
         A.KTOPL,
         A.RACCT,         
         A.RMVCT,
         A.AUDIT_TRA, 
         A.CONS_CUR,
         sum(A.CONS_SL) as CONS_SL
         from RTC_C_500VINCE1_C as A
         join RTC_C_LRADRR as B
           on A.RYEAR = B.FYEAR
          and A.POPER = B.FPERI
          and A.ENTITY = B.ENTITY
          and A.TIMESTAMP <= B.RTIME
        where A.DCATE   = 'Actual'
          and B.DCATE   = 'Actual'
          and (A.ACCTP is null or  A.ACCTP   = 'GAAP')
          and (A.RVERS = '' or A.RVERS = '100')
          and A.PLEVEL between '00' and '09'
     group by *
union all
  select A.RCLNT,
         A.MODEL,
         'FINAL'   as BPC_CATG,
         A.RCONGR1,
         '100' as DIM,
         RTFLG,
         C.ENTITY,
         C.PENTITY,
         A.PERIV,
         A.FISCYEARPER,
         A.KTOPL,
         A.RACCT,         
         A.RMVCT,
         A.AUDIT_TRA, 
         A.CONS_CUR,
         sum(A.CONS_SL) as CONS_SL
         from RTC_C_500VINCE1_C as A
        where A.DCATE = 'Actual'
          and (A.ACCTP = '' or  A.ACCTP = 'CL')
          and (A.RVERS = '' or A.RVERS = '100')
          and A.PLEVEL > '09' --Posting Level > 09 means consolidation engine generated data
     group by *
#+END_SRC

**** Preliminary View A
The view gives out the up-to-time report data for those entities in S/4 Finance.

#+Caption: HANA Calc View of a Preliminary Type BPC Category View on Foundation View
#+BEGIN_SRC sql
create view RTC_C_500VINCE1_BPCPRELIMA as 
   select A.RCLNT,
          A.MODEL,
          'PRELIM'   as BPC_CATG,
          '100' as DIM,
          '' as RTFLG,
          B.ENTITY,
          cast (COALESCE( C.ENTITY, 'NONE') as rtc_p_entity) as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT,         
          cast (case A.RMVCT when ''  then '100' else A.RMVCT end as NVARCHAR(3)) as RMVCT,
          'INPUT'   as AUDIT_TRA,
          'G_NONE'    as RCONGR1,
          SUM(A.CONS_SL) as CONS_SL
     from RTC_C_FOUNDATION as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_500VINCE1_FYVM as D
       on A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
       on A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500'
 group by *;
#+END_SRC

**** Preliminary View C
This view gives out data in ACDOCC which belongs to the model and BPC category. Timestamp filtering is not necessary for the preliminary type BPC category.

#+Caption: HANA Calc View of a Preliminary Type BPC Category View on ACDOCC
#+BEGIN_SRC sql
select A.RCLNT,
       A.MODEL,
       'PRELIM'  as BPC_CATG,
       A.RCONGR1,
       '100' as DIM,
       A.RTFLG,
       A.ENTITY,
       A.PENTITY,
       A.PERIV,
       A.FISCYEARPER,
       A.KTOPL,
       A.RACCT,         
       A.RMVCT,
       A.AUDIT_TRA,
       A.CONS_CUR,
       sum(A.CONS_SL) as CONS_SL
     from RTC_C_500VINCE1_C as A
    where A.DCATE = 'Actual'
      and (A.ACCTP is null or  A.ACCTP   = 'CL')
      and (A.RVERS = '' or A.RVERS = '200')
      and A.PLEVEL >= '00'
 group by *;  
#+END_SRC

**** Union View
The union view merges all the BPC category views above, through which, you can view all the data of all the BPC categories belong to a model. The view can be assigned to a BW virtual info-provider. BPC can now access the data just like a standard OLAP cube.

*** Validation View
Validation Views are used to define validation rules. These rules are checked among consolidation tasks to make sure the quality of consolidation data. Technically, validation rules are sql scripts which read data on validation views. 

**** Local Validation View with 17 Period Amounts in One Line
View V00 is based on View U20 by calculating the 17 period amounts(000~016) in one row. *It only shows the amount field CONS_SL*. This view is not assigned to validation engine, instead, it acts as the base validation view for others to be built on. 

#+Caption: Local Validation View with 17 Period Amounts in One Line
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_V00
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity:rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_timestamp:timestamp
as select from  /RTCART/500VINCE1_U20(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.prvers,
                  p_entity:$parameters.p_entity,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp)
{ 
  --First include all characteristic fields except poper, rtflg
  
  --Then only for cons_sl, calculate its 16 periods' amounts
  @Semantics.amount.currencyCode: 'CONS_CUR' 
  sum(case poper 
        when '000' then 
          cast(wsl as abap.dec( 23, 2 )) 
        else 
          cast(0 as abap.dec( 23, 2 )) 
      end) as wslvt,

  @Semantics.amount.currencyCode: 'CONS_CUR' 
  sum(case poper 
        when '001' then 
          cast(wsl as abap.dec( 23, 2 )) 
        else 
          cast(0 as abap.dec( 23, 2 )) 
      end) as wsl01,
   ...
 @Semantics.currencyCode
 cons_cur 
}group by <all characteristic fields>
#+END_SRC
Refer: ZVINCE120

**** Local Validation View with Opening, YTD, YTD-1, Period, and Prior-Period Amounts.
This view is added to the validation engine as the default validation view after you activate the model. It is built upon V00 by calculating the Opening, YTD, YTD-1, Period, and Prior-Period amounts. And it also adds an input parameter "p_curr", which narrow the context to only one currency key. It also filter in data with posting level between '00' and '09', which makes it only validates data before release(aka local validation). 

Besides, it associates entity dimension, partner entity dimension, and account dimension. This gives user more flexibilities to define rules based on the attributes of the dimension.

#+Caption: Local Validation View 
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_V10
  with parameters p_rtc_catg:rtc_catg,
                  p_acctp:rtc_acctp,
                  p_rvers:rtc_rvers,
                  p_entity:rtc_entity,
                  p_ryear:ryear,
                  p_poper:poper,
                  p_curr:rtc_curr,
                  p_timestamp:timestamp
as select from  /RTCART/500VINCE1_V00(
                  p_rtc_catg:$parameters.p_rtc_catg,
                  p_acctp:$parameters.p_acctp,
                  p_rvers:$parameters.p_rvers,
                  p_entity:$parameters.p_entity,
                  p_ryear:$parameters.p_ryear,
                  p_poper:$parameters.p_poper,
                  p_timestamp:$parameters.p_timestamp)
association [1..1] to /RTCART/500VINCE1_ENTITY  as _Entity  on $projection.Entity =_Entity.entity  
association [1..1] to /RTCART/500VINCE1_ENTITY  as _Pentity on $projection.pentity =_Pentity.entity   
association [1..1] to /RTCART/500VINCE1_FSI as _Account on $projection.ktopl = _Account.ChartOfAccounts
                                                and $projection.racct = _Account.GLAccount    
{  
   ktopl as Chart_of_Accounts,   
   entity as Entity,   
   pentity as Partner_Entity,   
   racct as Account,   
   rmvct as Flow_Type,
  --First include all characteristic fields
  
   @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then cons_slvt
     else 0
   end as abap.dec( 23, 2 )) as Amount_Opening,
   @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then cons_slvt
     when '001' then (cons_slvt+cons_sl01)
     when '002' then (cons_slvt+cons_sl01+cons_sl02)
     when '003' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03)
     when '004' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04)
     when '005' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05)
     when '006' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06)
     when '007' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07)
     when '008' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08)
     when '009' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09)
     when '010' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10)
     when '011' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11)
     when '012' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12)
     when '013' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13)
     when '014' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14)
     when '015' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15)
     when '016' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15+cons_sl16)         
     else 0
  end as abap.dec( 23, 2 )) as Amount_YTD,  
    @Semantics.amount.currencyCode: 'Currency' 
   cast(
   case $parameters.p_poper
     when '000' then 0
     when '001' then cons_slvt
     when '002' then (cons_slvt+cons_sl01)
     when '003' then (cons_slvt+cons_sl01+cons_sl02)
     when '004' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03)
     when '005' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04)
     when '006' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05)
     when '007' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06)
     when '008' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07)
     when '009' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08)
     when '010' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09)
     when '011' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10)
     when '012' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11)
     when '013' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12)
     when '014' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13)
     when '015' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14)
     when '016' then (cons_slvt+cons_sl01+cons_sl02+cons_sl03+cons_sl04+cons_sl05+cons_sl06+cons_sl07+cons_sl08+cons_sl09+cons_sl10+cons_sl11+cons_sl12+cons_sl13+cons_sl14+cons_sl15)    
     else 0
  end as abap.dec( 23, 2 )) as Amount_PriorYTD,  
  @Semantics.amount.currencyCode: 'Currency'
  cast(
  case $parameters.p_poper
     when '000' then cons_slvt
     when '001' then cons_sl01
     when '002' then cons_sl02
     when '003' then cons_sl03
     when '004' then cons_sl04
     when '005' then cons_sl05
     when '006' then cons_sl06
     when '007' then cons_sl07
     when '008' then cons_sl08
     when '009' then cons_sl09
     when '010' then cons_sl10
     when '011' then cons_sl11
     when '012' then cons_sl12    
     when '013' then cons_sl13
     when '014' then cons_sl14
     when '015' then cons_sl15
     when '016' then cons_sl16
     else 0  
  end as abap.dec( 23, 2 )) as Amount_Period,  
  @Semantics.amount.currencyCode: 'Currency'
  cast(
  case $parameters.p_poper
     when '000' then 0
     when '001' then cons_slvt
     when '002' then cons_sl01
     when '003' then cons_sl02
     when '004' then cons_sl03
     when '005' then cons_sl04
     when '006' then cons_sl05
     when '007' then cons_sl06
     when '008' then cons_sl07
     when '009' then cons_sl08
     when '010' then cons_sl09
     when '011' then cons_sl10
     when '012' then cons_sl11    
     when '013' then cons_sl12
     when '014' then cons_sl13
     when '015' then cons_sl14
     when '016' then cons_sl15
     else 0  
  end as abap.dec( 23, 2 )) as Amount_PriorPeriod,  
  @Semantics.currencyCode
  cons_cur as Currency,
  _Entity,
  _Pentity,
  _Account
}where cons_cur = $parameters.p_curr
   and plevl between '00' and '09'
#+END_SRC

Refer: ZVINCE141
*** Report View
Report views are generated for reporting purposes. 

**** Drill-through Report View
The Drill-through Report View is used in the document list Fiori app. It is based on foundation view by including necessary columns to allow drill-through or breakdown to more detail line item information. 

The following example shows the view fields of a company dimension model.
| Field Name  | Label                               |
|-------------+-------------------------------------|
| RCLNT       | SAP Client                          |
| MODEL       | Consolidation Model                 |
| RTC_CATG    | Data Category                       |
| ACCTP       | Accounting Principle                |
| RVERS       | Variant                             |
| SRC         | Data source tag for Drill-through   |
| ENTITY      | Consolidation Entity                |
| PENTITY     | Partner Entity                      |
| PERIV       | Group Fiscal Year Variant           |
| RYEAR       | Group Fiscal Year                   |
| POPER       | Group Fiscal Period                 |
| FISCYEARPER | Group Fiscal Year and Period        |
| KTOPL       | Group Chart of Accounts             |
| RACCT       | Group Account Number                |
| RMVCT       | Transaction Type                    |
| RWCUR       | Transaction Currency Key            |
| RHCUR       | Company Code Currency Key           |
| WSL         | Amount in Transaction Currency      |
| HSL         | Amount in Company Code Currency     |
| TIMESTAMP   | Timestamp                           |
| LRLDNR      | Ledger in General Ledger Accounting |
| RBUKRS      | Company Code                        |
| GJAHR       | Local Fiscal Year                   |
| BELNR       | Accounting Document Number          |
| RCOMP       | Company                             |
| RASSC       | Trading Partner                     |
| LKTOPL      | Local Chart of Accounts             |
| LRACCT      | Local Account Number                |

1. ENTITY is added by joining /RTCART/500VINCE1_ENTITY on field RCOMP.
2. PENTITY is added by joining /RTCART/500VINCE1_ENTITY on field RASSC.
3. BUDAT is replaced by joining FINS_FISC_DATE for the fields: PERIV, RYEAR, POPER, and FISCYEARPER.
4. LKTOPL and LRACCT are renamed from KTOPL and RACCT.
5. New KTOPL and RACCT are added by joining /RTCART/500VINCE1_FSIM for the fields KKTPL and RACCT.
Now, through the drill-through report view, you see the FI journal data in both the local view and group view at a very detail granularity. 

The drill-through view at least merges data from 2 sources: one is the foundation view, the other is the ACDOCC. There could be multiple data categories assigned, so the foundation views could be more than one. Each data category is assigned with a unique source tag, to allow the APP to distinguish and decide which single journal display APP should be navigated to. 

#+BEGIN_SRC sql
create view /RTCART/500VINCE1_R10
as select RCLNT,
          MODEL,
          RTC_CATG,
          ACCTP,
          RVERS,
          SRC,
          ENTITY,
          PENTITY,
          PERIV,
          RYEAR,
          POPER,
          FISCYEARPER,
          KTOPL,
          RACCT,        
          RMVCT,
          RWCUR,
          RHCUR,
          CONS_CUR,
          WSL,
          HSL,
          KSL,
          CONS_SL,
          TIMESTAMP,
          RLDNR,
          GJAHR,
          RBUKRS,
          BELNR,
          DOCLN,
          RCOMP,
          RASSC,
          LKTOPL,
          LRACCT
     from /RTCART/VINCE100_ATF --in case BPC
     --from P_FOUNDATIONA 
union all
   select A.RCLNT,
          A.MODEL,
          A.RTC_CATG,
          A.ACCTP,
          A.RVERS,
          A.PLEVEL,
          'C'  as SRC,
          B.ENTITY,
          C.ENTITY as PENTITY,
          D.FISCAL_YEAR_VARIANT as PERIV,
          D.FISCAL_YEAR as RYEAR,
          D.FISCAL_PERIOD as POPER,
          D.FISCYEARPER,
          E.KKTPL as KTOPL,
          E.RACCT as RACCT,        
          A.RMVCT,
          A.RWCUR,
          A.RHCUR,
          A.CONS_CUR,
          A.WSL,
          A.HSL,
          A.KSL,
          A.HSL as CONS_SL,
          A.TIMESTAMP,
          A.RLDNR,
          A.RYEAR as GJAHR,
          A.RBUKRS,
          A.BELNR,
          A.DOCLN,
          A.RCOMP,
          A.RASSC,
          A.KTOPL as LKTOPL,
          A.RACCT as LRACCT
     from ACDOCC as A
     join RTC_C_500VINCE1_ENTITY as B
       on A.RCOMP = B.RCOMP
left join RTC_C_500VINCE1_ENTITY as C
       on A.RASSC = B.RCOMP
     join RTC_C_FINS_FISC_DATE as D
       on A.RCLNT = D.MANDT
      and A.BUDAT = D.CALENDAR_DATE
     join RTC_C_500VINCE1_FSIM as E
      and A.KTOPL = E.KTOPL
      and A.RACCT = E.SAKNR
    where A.RCLNT = '500' 
      and A.MODEL = 'VINCE1'
      and A.DELFLG = ''
      and (A.PLEVEL = '' or A.PLEVEL = '03') --Only flexible uploaded/roll-up and defer data.
#+END_SRC
Refer: ZVINCE101

The report structure is fixed as the ACDOCC + [LKTOPL, LRACCT, ACCTP]. In case Integration with BPC, the above view is first utilized using calculation view, then convert to CDS using table function.
