#+PAGEID: 1780309655
#+VERSION: 9
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Postings
** General Information
*** Stakeholders and Roles
| Role                  | Name                  |
|-----------------------+-----------------------|
| Author(s)             | Vincent Zhang         |
| Architect             | Vincent Zhang         |
| Product Owner         | Shi Ying, Carol Pan   |
| Information Developer |                       |
| Quality Responsible   | Yao Cen               |
| Developers            | Summer Xia, Lynn Chen |

*** References
|                   |                  |             | <30>                           |
| Document Title    | Date             | Link        | Comments                       |
|-------------------+------------------+-------------+--------------------------------|
| EC-CS Online Help | <2015-12-25 Fri> | [[http://help.sap.com/saphelp_470/helpdata/en/fe/32941867f811d299610000e8a5999a/content.htm?frameset=/en/fe/32941b67f811d299610000e8a5999a/frameset.htm&current_toc=/en/5c/c1c25f445f11d189f00000e81ddfac/plain.htm&node_id=5&show_children=false][online help]] | The help doc doesn't describe any information on EC-CS's data validation. It's not clear how EC-CS define those rules, but it is for sure EC-CS has this functionality. |
| BCS Online Help   | <2015-12-25 Fri> | [[https://help.sap.com/saphelp_sem40bw/helpdata/en/ab/d7ecf125f0ce43be3ce68bf9289165/content.htm?frameset=/en/62/f7e73ac6e7ec28e10000000a114084/frameset.htm&current_toc=/en/67/f7e73ac6e7ec28e10000000a114084/plain.htm&node_id=92&show_children=false][online help]] | The validation of BCS is mainly focus on data consistency of 1) Reported financial data, 2)Standardized financial data, 3)Consolidated data, 4)Additional financial data, 5)Journals |
| BPC Online Help   | <2015-12-23 Wed> | [[http://help.sap.com/saphelp_bopacnw101/helpdata/en/94/e0f3a56f174607855bc345a45df847/content.htm?frameset=/en/b9/bceda8f53d4bc9bb772da27f576c89/frameset.htm&current_toc=/en/82/f51cf12cfc48c58975b9b5e6fba9aa/plain.htm&node_id=139&show_children=false][online help]] | The help doc describes the _Rules_ of BPC standard model. You can get a general idea of how rules are applied in financial consolidation. |


** Design
*** Key Requirements and Design Goals

**** Following Design Goals *MUST* be Met:
   
**** Following Design Goals *SHOULD* be Met:

*** Context
The fundamental use of the consolidation components is that you execute the consolidation tasks with postings, which are necessary for your consolidated financial statements and the system creates them automatically. As a result you achieve a high level of automation and with it the efficient processing of your consolidated financial statements. In particular cases you possibly want to supplement automatic postings with manual postings. In addition to this it is often necessary to manually adjust the reported data of consolidation units to the requirements of the group. Therefore these components offer you both automatic and manual posting functions for the execution of your consolidation tasks.
 
*** Major Building Blocks
The following consolidation tasks lead to postings in the system:
- Standardizing or corrections to reported financial data
- Reclassifications
- Interunit eliminations
- Elimination of interunit profit and loss
- Preparations for consolidation group changes
- Consolidation of investments

The system creates documents for all postings, they are also called journal entries. The documents record the changes that are made to the values in the database. This lets you reconstruct all of the changes that were made to the original reported financial data of the consolidation units in order to arrive at the consolidated data.

**** AMDP Core Posting API                                             :Lynn:
The core posting API should be developed all by HANA SQL scripts. It contains core logics:
1. Generated the sequential document number.
2. Basic data validation or existing check.
3. Enrich and substitution on some mandatory fields like: creator, create time, and so on.
4. Support both single and mass processing.
5. Input should be a table type of ACDOCC.
6. Output should have a list of document numbers and error information if fails.
7. Should consider the data integrity (commit and rollback correctly).

The AMDP core posting API should be tested with currency translation immediately after completion. 

**** Write-back Class for Integration with BPC                       :Summer:                                 
The write-back class can be developed parallelly. It is not necessary to wait for the core posting API. The saving logic can be first mocked using ABAP programming. When AMDP is ready, it should be replaced. 

The write-back class does not need to wait the specification of how BPC's cube-like data mapped to ACDOCC. It is developed for the purpose to go through the BW virtual info-provider write-back technology. The following results are expected:
1. A draft write-back class (with "Z" prefix) filled in a test virtual info-provider.
2. Data is retrieved from ACDOCA by virtual info-provider, and write-back to ACDOCC.
3. All the data is mocked. 
4. Know how to trigger the write-back run from BW reporting tools, and know how to debug.
5. Error handling should be integrated with BPC's API.
6. Get ready for the AMDP core API and the formal development.

**** Integrate Validation Engine into Core API        :Steve:Chang:
The core posting API should be embedded with VE call-points(db procedures). There are 2 call-points defined:
1. Item level.
2. Document level.

The integration development is for the preparation of Inter-Unit Elimination. 

Following outputs are expected:
1. 1 Vocabulary and 2 rule services(one for item, another for document)
2. The generated procedure name is permanent, and should be intercepted at the correct places in the core API.
3. The rule outputs is SAP standard message class.
4. Each service can contain multiple rules. Try to find a way to control the execution sequence of the rules.
5. A stable rule maintenance UI. Formal development is considerable.
6. Tested with the core posting API.
7. Enrichment and substitution with VE should also be researched during the development. 

*** Design Challenges resulting from Non-Functional Requirements

*** Vocabulary Modeling                                               
*** User Interface                                                    
*** Interfaces/Communication Handling                                
*** Used Components and Frameworks
| Name | Description                  | Software Component | Implications |
|------+------------------------------+--------------------+--------------|
| HRF  | HANA Rule Framework          |                    |              |
| BRF+ | Business Rule Framework plus |                    |              |

*** Package/Development Component Concept
*** New Coupling of Software Components
| SWC | Depends on SWC | Description of coupling and effects |
|-----+----------------+-------------------------------------|
|     |                |                                     |
*** Upgrade/Migration/Compatibility
*** TCO Considerations
*** Compliance to Standards and Guidelines
**** Applied Architecture/Design Guidelines
- [[https://wiki.wdf.sap.corp/wiki/display/SimplSuite/Architecture][S4H Architecture Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/SuiteCDS/VDM+CDS+Development+Guideline][CDS Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/fioritech/Development+Guideline+Portal][Fiori Overall Guideline]]
- [[https://ux.wdf.sap.corp/fiori-design/foundation/get-started/][Firoi Design Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/sFIN+UX+Fiori+Guidelines][sFIN UX Fiori Guideline]]

**** Approved deviations
| <8>      | <l40>                                    | <l20>                |
| Rule ID  | Deviation                                | Approval Status      |
|----------+------------------------------------------+----------------------|
| C-BRMS-2 | HRF must not be used directly but through the BRFplus encapsulation only. In case BRFplus encapsulation is not updated or enough, we may need bypass BRF+ APIs. |                      |


** Design Details Documentation
*** Database Design
*** Testability and Test Environment
*** Complex Algorithms and Applied Patterns
*** Design Alternatives and Trade-Offs
*** Guide to the Implementation


** Appendix
*** Glossary
| Term | Abbreviation | Definition |
|------+--------------+------------|
|      |              |            |
*** Customizing
*** Supportability Considerations
*** Error Analysis
**** Debugging
**** Logging and Tracing
**** Other Error Analysis Tools
*** Other
