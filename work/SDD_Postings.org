#+PAGEID: 1780309655
#+VERSION: 13
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Postings
** General Information
*** Stakeholders and Roles
| Role                  | Name                  |
|-----------------------+-----------------------|
| Author(s)             | Vincent Zhang         |
| Architect             | Vincent Zhang         |
| Product Owner         | Shi Ying, Carol Pan   |
| Information Developer |                       |
| Quality Responsible   | Yao Cen               |
| Developers            | Lynn Chen, Summer Xia |

*** References
|                      |                  |               | <30>                           |
| Document Title       | Date             | Link          | Comments                       |
|----------------------+------------------+---------------+--------------------------------|
| EC-CS Posting        | <2016-01-31 Sun> | [[http://help.sap.com/saphelp_470/helpdata/en/5c/c1badc445f11d189f00000e81ddfac/content.htm?frameset=/en/5c/c1badc445f11d189f00000e81ddfac/frameset.htm&current_toc=/en/5c/c1c25f445f11d189f00000e81ddfac/plain.htm&node_id=90&show_children=false][online help]]   | The online-help describes how EC-CS does postings when running consolidation. Posting in EC-CS categories into 2 types: =Automatic= and =Manual=. User can customize posting logic by defining tasks which then are assigned document type, method, and selected FS item. Documents generated by different tasks are differentiated by posting levels, so that reporting can choose correct items according to them. Sub-assignment is validated and determined during posting. |
| BCS Posting          | <2016-01-31 Sun> | [[https://help.sap.com/saphelp_sem40bw/helpdata/en/32/fb6f3b6498b062e10000000a11402f/content.htm?frameset=/en/ab/d7ecf125f0ce43be3ce68bf9289165/frameset.htm&current_toc=/en/67/f7e73ac6e7ec28e10000000a114084/plain.htm&node_id=98&show_children=false][online help]]   | Posting in BCS is quite same as EC-CS. The only difference is that BCS save documents in cubes, while EC-CS in ECMCA and ECMCT. |
| BPC Posting          | <2016-01-31 Sun> | [[http://help.sap.com/saphelp_bopacnw101/helpdata/en/4c/634386e0e950d2e10000000a42189b/content.htm?frameset=/en/4c/6347c5e0e950d2e10000000a42189b/frameset.htm&current_toc=/en/82/f51cf12cfc48c58975b9b5e6fba9aa/plain.htm&node_id=24][online help]]   | The online-help is only a functionality introduction. Nothing is there. |
| FI Arch Bluebook     | <2016-02-05 Fri> | [[\\cnpvGL000.pvgl.sap.corp\Restricted\Real_Time_Consolidation\03_Design\Bluebook's%20&%20Guidelines\Architecture%20Bluebook%20SAP%20ERP%20Financial.pdf][sharefolder]]   | The SAP ERP Finance architecture bluebook introduces the FI posting interface. The FI posting interface is designed for various applications to post FI documents. Data is transferred through steps: ~Check Module~, ~Close Module~, ~Split Module~, ~Project Module~ and finally ~Posting Module~. Each module does specific operations on the raw data. And if the processing of one of the steps fails, an error is raised and notified to the calling application. The posting interface is separated to allow the stability of the underlying DB tables. |
| HANA Script          | <2016-02-21 Sun> | [[http://help.sap.com/saphelp_hanaplatform/helpdata/en/92/11209e54ab48959c83a7ac3b4ef877/content.htm?frameset=/en/60/088457716e46889c78662700737118/frameset.htm&current_toc=/en/ed/4f384562ce4861b48e22a8be3171e5/plain.htm&node_id=3][online help]]   | Online help of HANA SQL scripts. You can find all your want about how to write in HANA SQL scripts. |
| AMDP Guide           | <2016-02-21 Sun> | [[http://help.sap.com/abapdocu_740/en/index.htm?file=abenamdp.htm][ABAP Keywords]] | All about AMDP: Keywords and Syntax. |
| Number Range Service | <2016-05-06 Fri> | [[https://wiki.wdf.sap.corp/wiki/display/SI/Number+Range+Service][wikipage]]      | Number range service in HANA is provided that is closely related to the well-known number range service in ABAP. It consists of an ABAP managed database procedure that calls in turn a HANA built-in procedure. It operates on database tables that are created by the ABAP system. This feature was requested by ABAP application developers who want to push down more and more ABAP code into HANA. |

** Design

*** Context
The fundamental difference between a consolidation APP and a conventional analytic APP is that consolidation changes amount based on rules and original data provided. Every change on amounts should be logged using journals. You run most consolidation tasks with journals posted. Posting means saving journals into database, and allows changing of amount to be replayed when reporting. 

A consolidation system posts journals automatically. As a result you achieve a high level of automation and get your consolidation financial statements efficiently. In particular cases you still want to supplement automatic postings with manual postings. Therefore, posting component offers you both automatic posting configuration and manual posting UI.

*** Key Requirements and Design Goals
Posting happens in most of the consolidation tasks. In some of the tasks (currency translation & elimination), mass journals could be generated and posted. Posting of RTC should guarantee the performance and should not be the bottleneck. Posting is decoupled so that different consolidation task can be assigned different posting method. Users can define their own posting methods(logic), validation rules, and even enhance DB tables. 

**** Following Design Goals *MUST* be Met:
1. Posting can be automatically raised by consolidation methods, or manually through a posting UI;
2. Document types can be defined to allow customizing for essential posting logics;
3. Document types must have clearing item settings, which allow generating line items automatically during posting;
4. Posting methods must be predefined for different types of consolidation method;
5. Document validation can be utilized on head, item and document level;
6. There must be a manual posting UI;
7. Journal reversal & deletion;

**** Following Design Goals *SHOULD* be Met:
1. Posting can be fully pushed down to HANA layer;
2. Core posting APIs should only realize very generic posting logic;
3. Validation Engine should be integrated to allow easy rule definition;
4. Manual posting UI layout should be easily customizable;
5. Core posting APIs should be implemented using AMDP and can be enhanced at HANA level;
6. Posting methods should be based on document type settings and call the core posting APIs;
 
*** Major Building Blocks
Bellow diagram shows the overall context of posting. Posting is a cross module which is integrated by or integrates almost all the other modules in consolidation. Consolidation tasks call post methods to save consolidation result. Meanwhile, posting integrates validation engine to support document validation. However, manual posting is rather a stand alone application classified to posting. The boundary of posting module is defined as all possible channels that update data in ACDOCC. 

#+CAPTION: Posting Overall Diagram
[[../image/PostingContext.png]]  

The caller applications could be different consolidation tasks, manual posting UI, and Info-Provider write-back class. Consolidation tasks include flexible upload, currency translation, elimination, and all possible automatic document generating sources. Manual post allows user manually doing postings through a customizable UI. Write-back class is only used in the BPC integration scenario, which allows BPC pass data through a virtual info-provider to ACDOCC.

Posting methods are the main interfaces for the outside. Each caller application has its specific posting logic, so it should implement its own posting method. A posting method is predefined(developed), it is not customizable, however customers can develop their own posting methods by following certain patterns. In each posting method, it reads settings from a document type. The settings controls whether the document type is for manually or automatically document posting? Which key figures are involved, local currency or group currency? After that, it check if clearing items or deferred taxes items are set, and if yes, generate auto clearing line items. Afterwards, the balance check is done according to the balance setting on the document type. Additional document validations are also applied if configured. Any errors and warnings during the check and validation will be caught and throw out to the callers. If no error is found, finally, the core posting API is called to persist data in DB.

Document types can be defined to encapsulate most essential controls during posting. It is the main media for customization on posting. Some generic controls(marked with red rectangle) include Posting Level, Business Transaction Type, and Number Range are processed by the core posting API. Others(marked with yellow rectangle) should be processed at posting method level. Details of each settings are explained:
1. Posting Level: Differentiate documents posted by different consolidation tasks;
2. Business Transaction Type: Differentiate documents generated by different applications, like BPC, or Flexible Upload;
3. Number Range: Used to generate a sequential document number;
4. Automatic / Manual: This document type is for manual posting or automatic posting;
5. Key Figures / Quantities: Which amount fields or quantity fields are counted during posting;
6. Balance check: What is the behavior if document balance is not zero;
7. Clearing Item: Offset items to make balance sheet and income statement balance to zero if imbalance happens;
8. Deferred Income Taxes: FS items to record deferred income taxes for those auto-generated line items;
9. Document Validation: Assign validation methods separately to document head, item, and whole document level;

The core posting APIs are AMDP methods which are: Journal Post, Journal Reverse, and Journal Delete. Journal Post is the main API that creates Journals in ACDOCC. It will also do fix checks like whether some essential master data exists or not. Enrichments are also made like assign the sequential document numbers, post date and time(if not given), post level(from document type), business transaction type(from document type), and so on. Customers can also enhance the core API through AMDP Badi. All the core posting APIs support mass processing. Performance should be carefully considered, as well as error handling and re-processing. 

Core posting APIs are not pre-delivered, but are generated by a program. Because ACDOCC can be extended for additional fields, after the extension, the AMDP methods must be re-generated using the program. This somehow provides a certain degree of flexibility. If customers want to implement their own consolidation journal table, then only thing they need to do is assign the table to the program, run and generate the customized core posting APIs.

Details on the major building blocks can be found in the following diagram and description:

**** Core Posting APIs using AMDP                                      :Lynn:

#+CAPTION: Posting API 
[[../image/CorePostingAPI.png]]  

The core posting API should be developed all by HANA SQL scripts. It contains core logics:
1. Generated the sequential document number;
2. fixed master data existence check;
3. Enrich and substitution on some mandatory fields like: posting level, data&time, and so on;
4. Support both single and mass processing;
5. Input should be a table type of ACDOCC;
6. Output should have a list of document numbers and error information if fails;

The core AMDP methods can be generated using an ABAP program called =Core Posting API Generator=. The program can be assigned with tables other than ACDOCC, but these tables must fulfill certain prerequisites, like mandatory fields, key fields patterns, and so on. After the generation, a key/value pair of journal table(key) and the generated AMDP methods will be recorded in a table "RTC_CORE_APIS". When a consolidation method is activated, the correct posting AMDP methods will be read and encapsulated into the generated consolidation method AMDP. 

**** ABAP Write-back Class for BPC Integration                       :Summer:
#+CAPTION: Posting API 
[[../image/BPCWriteBackFlow.png]]  

During a consolidation run, BPC gives the resulting data to the VirtualProvider on which the write-back class is assigned. The data is formatted to the same structure of the VirtualProvider, or, equivalently, to the structure of the consolidation result view. As the columns of consolidation result view must be a subset of the fields of the consolidation journal (ACDOCC), it should be easily mapped to the corresponding fields in ACDOCC. Value derivation and validation are also done before the data is actually posted to ACDOCC. If an error occurs, the log or message is propagated to the error-handling interface which can be captured by BPC or the BW UI.

**** Document Type Customization                                      :Frank:
A customization UI should be given to allow users define their document types. A document type contains essential controls on posting which are mandatory for both manual and automatic postings. Because there could be clearing items be set on document type, a document type must be created under a consolidation model, so that a chart of accounts is given. 

Details can be found in the "Detail Design" chapter.

**** Posting Method for Currency Translation                         :Marvin:
When a currency translation method is activated, posting method is generated along with it. A CT method generates a bundle of AMDP methods, among which there is a method called "POST_RUN". The posting logic for currency translation is encapsulate in the "POST_RUN" method. 

Currency translation method is different with other consolidation methods in that it is based on a default document type '02' which is generated during consolidation modeling activation. The document type '02' can only be changed for the clearing items. Users can not adjust other setting, nor delete it.  

**** Document Validation using Validation Engine                      :Steve:
To be designed.

**** Manual Posting UI

**** Journal Reversal & Deletion

**** Posting Enhancement

*** Design Challenges resulting from Non-Functional Requirements
In order to achieve better performance, the posting logic is implemented using AMDP which is not easy from development perspective. Especially, SQL scripts are lack of dynamic programming features comparing with other language like ABAP. 

To achieve flexibility to some extend, we must use ABAP programming to generated AMDP methods. This 2 level programming introduces a lot of difficulties during issue fixing and debugging.  
                        
*** Used Components and Frameworks
|                      | <30>                           |                    | <25>                      |
| Name                 | Description                    | Software Component | Implications              |
|----------------------+--------------------------------+--------------------+---------------------------|
| Number Range Service | A number range service in HANA is provided that is closely related to the well-known number range service in ABAP. It consists of an ABAP managed database procedure that calls in turn a HANA built-in procedure. It operates on database tables that are created by ABAP system. | SAP_BASIS          | ABAP number range framework is used |

*** Compliance to Standards and Guidelines
**** Applied Architecture/Design Guidelines
- [[https://wiki.wdf.sap.corp/wiki/display/SimplSuite/Architecture][S4H Architecture Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/SuiteCDS/VDM+CDS+Development+Guideline][CDS Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/fioritech/Development+Guideline+Portal][Fiori Overall Guideline]]
- [[https://ux.wdf.sap.corp/fiori-design/foundation/get-started/][Firoi Design Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/sFIN+UX+Fiori+Guidelines][sFIN UX Fiori Guideline]]

** Detail Design

*** Document Type Customization UI
Document type is model dependent. Each model has its own document types and cannot be shared with other models. There are some default document types generated when a consolidation model is activated. These generated document types start with prefix '0', and they cannot be deleted by end users. Details about these default document types can be described in following table:
#+CAPTION: Default Document Types
|           |                                                | <40>                                     |
| Doc. Type | Description                                    | Customization                            |
|-----------+------------------------------------------------+------------------------------------------|
|        00 | Default document type for flexible upload      | Posting Level: null; Balance Check: No Check; Biz Transaction Type: Flexible Upload; Posting:Manually; Number Range:00. Only number range can be changed, all other setting are frozen for changing. |
|        01 | Default document type for data submit          | Posting Level: 00; Balance Check: Check and report error; Biz Transaction Type: Data Submit; Posting:Automatic Posting; Number Range:00. Key figures and number range can be changed, all other setting are frozen for changing. |
|        02 | Default document type for currency Translation | Posting Level: 05; Balance Check: Check and report error; Biz Transaction Type: CT in S4; Posting:Automatic Posting; Number Range:00. Number range and clearing items can be changed, all other setting are frozen for changing. |

#+CAPTION: Document Type General Tab
[[../image/DocTypeUI01.png]]  

In the "General" tab contains basic settings that all document types may apply. Details of each settings are explained:

**** Posting Level 
Posting level classifies documents posted by different consolidation tasks. During posting, the core API will read the value of the posting level set on the document type, and fill the value into the posting level column of consolidation journal table. The options in the drop-down box are:
|             |           | <50>                                               |
| UC-CS Plevl | RTC Plevl | Use                                                |
|-------------+-----------+----------------------------------------------------|
|       Space |     Space | *UC-CS: Reported data from realtime update or rollup* </br> *RTC: Flexible Uploaded Data before submitted* The data is in the staging area, which is provisioned by flexible upload and can be changed/deleted freely. There is also no balance check when the data is entering into ACDOCC. |
|          00 |        00 | *Reported financial data* If reported financial data comes from flexible upload, a new document will be posted to copy data from staging area to formal area which is tagged with posting level 00. For data in ACDOCA, there is no need for the data copy, so no document is posted. |
|          01 |        01 | *Adjustments to reported financial data* If, after collecting the reported data of the consolidation units, you want to make changes to the data at corporate headquarters, we recommend doing this by posting adjustment entries with posting level 01. This has the benefit that your changes are documented. |
|          02 |        02 | *Reported data: consolidation group changes*       |
|             |        03 | *Defer from previous period*                       |
|          08 |        08 | *Item substitution and calculation of the retained earnings* |
|          10 |        10 | *Standardizing entries* You may need to standardize the reported data of consolidation units to comply with corporate policies or valuation rules. In data records with posting levels less than or equal to 10, the system posts only to the consolidation unit – not to the consolidation group. Reporting takes into account the data records for all consolidation groups. |
|          12 |        12 | *Standardizing entries: consolidation group changes* |
|          0T |        15 | *Currency Translation* Currency Translation in S4 also posts documents. |
|          20 |        20 | *Two-sided elimination entries* Inter-unit elimination, the elimination of inter-unit profit/loss in inventory, and reclassification are examples of two-sided elimination entries. Here, both the consolidation unit and the partner unit are recorded in the data records. Reporting takes into account the data records for all consolidation groups in which both the consolidation unit and the partner unit are posted. |
|          22 |        22 | *Two-sided elimination entries: consolidation group changes* |
|          23 |        23 | *Two-sided eliminating entries: Special logic*     |
|          24 |        24 | *Two-sided eliminating entries: Cons group changes with special logic* |
|          30 |        30 | *Consolidation of investments entries* In consolidation of investment postings, the consolidation unit, partner unit, and consolidation group are recorded in the data records. Reporting only considers the data records with the assigned consolidation group and the higher-level consolidation groups. |

*Note:* Each posting level can be mapped to an audit type for the integration with BPC.  

**** Balance Check
Balance Check defines the behavior when document balance is not zero. The balance check is done in posting method before calling the core posting API. The possible options are:
| ID | Description                            |
|----+----------------------------------------|
|  0 | Error when balance not equal to zero   |
|  1 | Warning when balance not equal to zero |
|  2 | No balance check                       |

The error and warning messages are thrown to the caller application. If it is manual posting, error/warning message shows directly on UI; If it is an automatic posting, error/warning message is displayed in logs.

**** Biz Transaction Type
Business Transaction Type differentiates documents generated by different applications. For example, by BPC, or by Flexible Upload. During posting, the value will be taken in the core posting API and saved in ACDOCC. The possible options for the drop-down boxes are:
| BTTYPE | Description                                  |
|--------+----------------------------------------------|
| RTFU   | Real-Time Consolidation Flexible Upload      |
| RTDS   | Real-Time Consolidation Data Submit          |
| RTCT   | Real-Time Consolidation Currency Translation |
| RTBP   | Real-Time Consolidation BPC Write-back       |
| RTEL   | Real-Time Consolidation Elimination          |
| RTMP   | Real-Time Consolidation Manual Posting       |
| OTHE   | Others                                       |

Business Transaction Type also controls the layout of document type customization UI. For example, RTFU should not allow to assign document validation methods, as the data is more suitable for total validation. Details can be found in following table:
|        | <50>                                               |
| BTTYPE | Available Settings on Doc Type UI                  |
|--------+----------------------------------------------------|
| RTFU   | General tab without Deferred Taxes                 |
| RTDS   | General tab without Deferred Taxes                 |
| RTCT   | General tab without Deferred Taxes, Clearing Items tab without Clearing - Consolidation Entity |
| RTBP   | General tab without Key Figures and Deferred Taxes |
| RTEL   | General tab, Clearing Items tab, and Deferred Taxes tab |
| RTMP   | All settings are available                         |
| OTHE   | All settings are available                         |
  
**** Automatic / Manual
Defines whether this document type is for manual posting or automatic posting. This setting only affects in manual posting, when you assign a automatic posting document type, it won't let your to post.  Possible options are listed bellow:
1. Automatic Posting
2. Manual Posting

**** Key Figures / Quantities
These determine which key figures (for example, local currency or group currency) are used in automatic or manual postings. You specify key figures in the document type.

- Local Currency :: This is the local (or domestic) currency of a consolidation unit.
- Group Currency :: This is the currency of a consolidation group. If the local currency of a consolidation unit is not the same as the group currency, you need to translate the local currency to the group currency prior to running consolidation tasks. 
- Transaction Currency :: This is the currency in which a business transaction is processed and posted.
It is possible to post financial statement items with a breakdown by transaction currency if:
 + The document type enables posting in transaction currency
 + The breakdown category of the item is defined with a breakdown by transaction currency

You can post several transaction currencies in one document. The system does not check whether the balance per transaction currency is equal to zero.

- Quantity :: It is possible to post financial statement items in quantities if:
  + The document type enables posting in quantities
  + The breakdown category of the item is defined with a breakdown by quantity

**** Number Range
Number Range is a standard ABAP number range interval which is defined under number range object "RTCJOURN". You assign the number range interval to a document type so that it can generate a sequential document number in the core posting API. Posting methods don't need to touch it. 

**** Clearing Items
#+CAPTION: Document Type Clearing Items Tab
[[../image/DocTypeUI02.png]]  

Standardizing and consolidation entries can cause an imbalance in the balance sheet and the income statement. For example, an adjustment to depreciation of machinery involves posting in both the income statement and the balance sheet. This causes an imbalance in both the balance sheet and the income statement. The system calculates this imbalance and automatically posts balancing adjustments.

The system posts the balancing adjustment automatically. This ensures that the balance sheet and income statement are posted consistently. Once the adjustment is posted, the two statements balance again.

It may become necessary to post balancing adjustments for both manual and automatic postings. The system checks every manual and automatic posting as to whether a balancing adjustment is necessary and, if so, generates additional line items in the document.

In manual entries, these additional line items are called automatic line items.

During each posting, the system checks if the income statement items are being posted with a non-zero balance. If so, the system computes and posts a balancing adjustment.

The balancing adjustment is also dependent on where the appropriation of retained earnings is stated.
+ If the appropriations are stated at the end of the income statement, the system posts the balancing adjustment to retained earnings items in the balance sheet as well as in the income statement.
+ If the appropriations are stated in the balance sheet, the adjustment is posted to annual net income items in the balance sheet as well as the income statement.
Which items are posted is defined in customizing of the clearing items for retained earnings and annual net income on a document type. The posting remains in balance because the balancing adjustment takes both financial statements into account.

Under certain circumstances, it may be necessary to clear imbalances caused by inter-unit entries – that is, entries between different consolidation units – not only for the entire document but also for each consolidation unit.
This allows you to create consolidated individual statements for each consolidation unit once consolidation has been completed.

In the customizing settings for each document type, you have defined clearing items for "Clearing - Consolidation Entity". A clearing item is needed for clearing the entries of the consolidation units. Defining a clearing item ensures that the system always posts a balancing entry. During posting, the system calculates the net balance for each consolidation unit and posts it to the clearing item.

**** Deferred Income Taxes
#+CAPTION: Document Type Deferred Taxes Tab
[[../image/DocTypeUI03.png]]  

Because of the tasks performed in consolidation, the consolidated earnings for the year usually differ from the sum of the earnings reported by the individual consolidation units. Deferred income taxes are posted within the consolidated financial statements in order to adjust the sum of all tax expenditures reported in the individual statements to consolidated earnings.
The system provides an option to automatically calculate and post deferred income taxes.

In Customizing, you should  activate the feature for posting deferred income tax for individual document types. You have defined that the tax rate is read either from the master data of the consolidation unit or from the document type. You have defined the selected items for deferred taxes in the document type.

**** Document Validation
#+CAPTION: Document Type Validation Tab
[[../image/DocTypeUI04.png]]  

Assign validation methods separately to document head, item, and whole document level; For document types with automatic posting, it is not necessary to assign document validation. For the reason that system generated documents should be always valid. 

For manual posting document types, there should be provided with the flexibility to allow user to define his own document validation rules. The document validation rules are defined and collected as validation method. Each validation method has multiple steps corresponding to different rules. For detail of validation method, please refer to the wiki-page [[https://wiki.wdf.sap.corp/wiki/x/Yic2b][SDD-Validation Engine]].
