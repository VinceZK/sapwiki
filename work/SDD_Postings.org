#+PAGEID: 1780309655
#+VERSION: 9
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Postings
** General Information
*** Stakeholders and Roles
| Role                  | Name                  |
|-----------------------+-----------------------|
| Author(s)             | Vincent Zhang         |
| Architect             | Vincent Zhang         |
| Product Owner         | Shi Ying, Carol Pan   |
| Information Developer |                       |
| Quality Responsible   | Yao Cen               |
| Developers            | Summer Xia, Lynn Chen |

*** References
|                   |                  |             | <30>                           |
| Document Title    | Date             | Link        | Comments                       |
|-------------------+------------------+-------------+--------------------------------|
| EC-CS Online Help | <2016-01-31 Sun> | [[http://help.sap.com/saphelp_470/helpdata/en/5c/c1badc445f11d189f00000e81ddfac/content.htm?frameset=/en/5c/c1badc445f11d189f00000e81ddfac/frameset.htm&current_toc=/en/5c/c1c25f445f11d189f00000e81ddfac/plain.htm&node_id=90&show_children=false][online help]] | The online-help descirbes how EC-CS does postings when running consolidation. Posting in EC-CS categories into 2 types: =Automatic= and =Manual=. User can customize posting logic by defining tasks which then are assigned document type, method, and selected FS item. Documents genreated by different tasks are differenciated by posting levels, so that reporting can choose correct items according to them. Subssigment is validated and determined during posting. |
| BCS Online Help   | <2016-01-31 Sun> | [[https://help.sap.com/saphelp_sem40bw/helpdata/en/32/fb6f3b6498b062e10000000a11402f/content.htm?frameset=/en/ab/d7ecf125f0ce43be3ce68bf9289165/frameset.htm&current_toc=/en/67/f7e73ac6e7ec28e10000000a114084/plain.htm&node_id=98&show_children=false][online help]] | Posting in BCS is quite same as EC-CS. The only difference is that BCS save documents in cubes, while EC-CS in ECMCA and ECMCT. |
| BPC Online Help   | <2016-01-31 Sun> | [[http://help.sap.com/saphelp_bopacnw101/helpdata/en/4c/634386e0e950d2e10000000a42189b/content.htm?frameset=/en/4c/6347c5e0e950d2e10000000a42189b/frameset.htm&current_toc=/en/82/f51cf12cfc48c58975b9b5e6fba9aa/plain.htm&node_id=24][online help]] | The online-help is only a functionality introduction. Nothing is there. |
| FI Arch Bluebook  | <2016-02-05 Fri> |             | The SAP ERP Finance architecture bluebook introduces the FI posting interface. The FI posting interface is designed for various applications to post FI documents. Data is transferred through steps: ~Check Module~, ~Close Module~, ~Split Module~, ~Project Module~ and finally ~Posting Module~. Each module does specific operations on the raw data. And if the processing of one of the steps fails, an error is raised and notified to the calling application. The posting interface is seprated to allow the stablitiy of the underlying DB tables. |


** Design
*** Key Requirements and Design Goals
Posting happens in most of the consolidation tasks. In some of the tasks (elimination & currency translation), mass journals could be generated and posted. Posting of RTC should guarantee the performance and should not be the bottleneck. Posting is decoupled so that different consolidation task can be assigned different posting method. Users can define thier own posting methods(logic), validation rules, and even enhance DB tables. 

**** Following Design Goals *MUST* be Met:
1. The core posting logic must be pushed down to HANA.
2. Posting can be automatically raised by consolidation tasks, or manully done through a UI.
3. Posting module can be customized, ehanced, and integrated.
4. Posting validation on item and document level can be defined.
5. Journal reversal & deletion.

**** Following Design Goals *SHOULD* be Met:
1. There should be core posting APIs implemented using AMDP.
2. Core posting APIs should only realize generic logic, which is task independant.  
3. Validation Engine should be used to allow easily rule defination.
4. Core posting APIs can be enhanced at HANA level.
5. There should be a field to differenciate journals created by different consolidation steps.

*** Context
The fundamental difference between a consolidation APP and a conventional analytic APP is that consolidation changes amount based on rules and orignal data provided. Every change on amounts should be logged using journals. You run most consolidation tasks with journals posted. Posting means saving journals into database, and allows changing of amount to be replayed when reporting. 

A consolidation system posts journals automatically. As a result you achieve a high level of automation and get your consolidation financial statements efficiently. In particular cases you still want to supplement automatic postings with manual postings. Therefore, posting component offers you both automatic posting configuration and manual posting UI.
 
*** Major Building Blocks
The posting component is constructed with following building blocks:
1. Core Posting APIs using AMDP.
2. ABAP Write-back Class for BPC integration.
3. Posting Validation using Validation Engine.
4. Automatic Posting Customizing for Consolidatoin Task.
5. Manual Posting UI.
6. Posting Enhancement.



**** Core Posting APIs using AMDP                                      :Lynn:

#+CAPTION: Posting API 
[[../image/Posting.png]]  

The core posting API should be developed all by HANA SQL scripts. It contains core logics:
1. Generated the sequential document number.
2. Basic data validation or existing check.
3. Enrich and substitution on some mandatory fields like: creator, create time, and so on.
4. Support both single and mass processing.
5. Input should be a table type of ACDOCC.
6. Output should have a list of document numbers and error information if fails.
7. Should consider the data integrity (commit and rollback correctly).

The AMDP core posting API should be tested with currency translation immediately after completion. 

**** ABAP Write-back Class for BPC integration                         :Summer:
The write-back class can be developed parallelly. It is not necessary to wait for the core posting API. The saving logic can be first mocked using ABAP programming. When AMDP is ready, it should be replaced.

The write-back class does not need to wait the specification of how BPC's cube-like data mapped to ACDOCC. It is developed for the purpose to go through the BW virtual info-provider write-back technology. The following results are expected:
1. A draft write-back class (with "Z" prefix) filled in a test virtual info-provider.
2. Data is retrieved from ACDOCA by virtual info-provider, and write-back to ACDOCC.
3. All the data is mocked. 
4. Know how to trigger the write-back run from BW reporting tools, and know how to debug.
5. Error handling should be integrated with BPC's API.
6. Get ready for the AMDP core API and the formal development.

**** Posting Validation using Validation Engine                        :Steve:Chang:
The core posting API should be embedded with VE call-points(db procedures). There are 2 call-points defined:
1. Item level.
2. Document level.

The integration development is for the preparation of Inter-Unit Elimination. 

Following outputs are expected:
1. 1 Vocabulary and 2 rule services(one for item, another for document)
2. The generated procedure name is permanent, and should be intercepted at the correct places in the core API.
3. The rule outputs is SAP standard message class.
4. Each service can contain multiple rules. Try to find a way to control the execution sequence of the rules.
5. A stable rule maintenance UI. Formal development is considerable.
6. Tested with the core posting API.
7. Enrichment and substitution with VE should also be researched during the development.

**** Automatic Posting Customizing for Consolidatoin Task

**** Manual Posting UI

**** Posting Enhancement

*** Design Challenges resulting from Non-Functional Requirements

*** Vocabulary Modeling                                               
*** User Interface                                                    
*** Interfaces/Communication Handling                                
*** Used Components and Frameworks
| Name | Description                  | Software Component | Implications |
|------+------------------------------+--------------------+--------------|
| HRF  | HANA Rule Framework          |                    |              |
| BRF+ | Business Rule Framework plus |                    |              |

*** Package/Development Component Concept
*** New Coupling of Software Components
| SWC | Depends on SWC | Description of coupling and effects |
|-----+----------------+-------------------------------------|
|     |                |                                     |
*** Upgrade/Migration/Compatibility
*** TCO Considerations
*** Compliance to Standards and Guidelines
**** Applied Architecture/Design Guidelines
- [[https://wiki.wdf.sap.corp/wiki/display/SimplSuite/Architecture][S4H Architecture Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/SuiteCDS/VDM+CDS+Development+Guideline][CDS Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/fioritech/Development+Guideline+Portal][Fiori Overall Guideline]]
- [[https://ux.wdf.sap.corp/fiori-design/foundation/get-started/][Firoi Design Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/sFIN+UX+Fiori+Guidelines][sFIN UX Fiori Guideline]]

**** Approved deviations
| <8>      | <l40>                                    | <l20>                |
| Rule ID  | Deviation                                | Approval Status      |
|----------+------------------------------------------+----------------------|
| C-BRMS-2 | HRF must not be used directly but through the BRFplus encapsulation only. In case BRFplus encapsulation is not updated or enough, we may need bypass BRF+ APIs. |                      |


** Design Details Documentation
*** Database Design
*** Testability and Test Environment
*** Complex Algorithms and Applied Patterns
*** Design Alternatives and Trade-Offs
*** Guide to the Implementation


** Appendix
*** Glossary
| Term | Abbreviation | Definition |
|------+--------------+------------|
|      |              |            |
*** Customizing
*** Supportability Considerations
*** Error Analysis
**** Debugging
**** Logging and Tracing
**** Other Error Analysis Tools
*** Other
