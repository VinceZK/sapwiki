#+PAGEID: 1829146305
#+VERSION: 13
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Pull Request for Consolidation
* Context
Local accountants can raise a =pull request= to submit financial reported data. A "Pull Request" contains timestamp and other filtering information to boundary an data area in ACDOCA/C so that group accountants can correctly pull the data to do validations and consolidations. To be simple, you can regard a "Pull Request" as a SQL where string which will be applied on the ACDOCA/C table.

Pull requests can be generated recurrently or occasionally. The former is auto-generated by defining a recurrence schedule, for example, the month end consolidation. The latter is for an occasionally re-opening of a period to post adjustment documents. 

** Recurrence Pull Request
#+CAPTION: Recurrence Pull Request
[[../image/RecurrencePullRequest4FinCons.png]]  

Assume a recurrence automatically consolidation process is defined. A consolidation process contains multiple sub-processes which runs monthly. To be simple, we only involve 2 roles: Local accountant who does his tasks in a local financial system; Group accountant who run her consolidation tasks in the central system. Following tasks are executed in a chronography order:
1. The central system automatically raise the group period close request to the local system.
2. Local accountant gets the notification and close the period based on group fiscal year variant. A regular pull request is initiated and sent to the group accountant. A pull request contains the timestamp on when the "period close" happens, and other additional filtering on company code, ledger, posting date, and so on.
3. Group accountant gets the pull request notification for the specific local company. She opens it to check the actual data and runs reported data validations on it. If she thinks the data in the request is OK, she then accepts it. The consolidation system will pull the corresponding data described in the pull request. It will also update the "time marker" property of the local entity with the timestamp in the pull request. 
4. If group accountant thinks the data is not ready, she rejects the pull request. The pull request is then statued as "de-active".
5. Once the local accountant receives the rejected notification, he must do adjustments to fulfill the requirements raise by the group accountant. So he opens the group period and do adjustments and validations. Then he closes the group period again to forbid unwanted postings in this period. A pull request is raised along with his close activity which again contains the timestamp on when the close is happening.The interval between this timestamp and the last accepted pull request's timestamp is exactly the data the group accountant wants for this period.
6. Again the group accountant will receive the new pull request, and the same steps are executed recursively.

** Occasional Pull Request
#+CAPTION: Occasional Pull Request
[[../image/OccasionalPullRequest4FinCons.png]]  

Occasional pull requests share exactly the same logic as the recurrence approach. There is actually no difference on the technique point of view. The difference form business point of view is that the group accountant has one more option "defer" to deal with them. Detail processes are explained bellow:
1. When the local accountant decides to re-open the period, he must close it again after additional documents are posted in this period which will then raise a pull request automatically.
2. The pull request is notified and got by the group accountant, she decides whether it should be included in this consolidation run, or be deferred in next run. Of course, she can also reject it if she thinks it is a minor change.
3. If "include" is chosen, then the consolidation system pull the data according to the pull request. A delta run is the first choice, but if impossible, then a full run of this period is taken. The pull request is then flagged as "processed", and all the un-processed pull requests before it will be discarded. Meanwhile, the timestamp of the successfully processed pull request will be put on to the entity's "time marker" field. 
4. If "defer" is chosen, then the consolidation system will save the status for the pull request. The next time consolidation is run, the data in the pull request will be processed and consolidated into the next period. But user can still trace back to know that this data is belong to the previous period, although it is counted in this period. 
5. If "reject" is chosen, which means the data contains noncompliance, the local accountant will then receive the notification, but this time, he can decide if a resubmit is necessary or not. 

As said before, once a pull request is processed, then all the unprocessed ones before it will be discarded. Combined with recurrence run, as it requires each occurrence the local accountant must submit his local financial data, which means there will be no pull request could be deferred to *next next* occurrence. 

It is also very usual that the local accountant opens the periods and never closes them. As no pull request is raised, the group accountant can not pull the new data afterwords. But she can be informed, so that external process could be taken. Then, when the local accountant close those opened periods, each period should generate a pull request which points the documents only belongs to that period. All those pull requests will be included in the upcoming occurrence. 

** Comparison with On-the-Fly
The pull request approach is built on the conclusion that local accountants have the right to decide when and which data should be reported to the group accountants. If no pull request is raised by local accountants, then the group accountant is not allowed to pull the data from local company, even technically, the data is already in the central system. 

The pull request is somehow conflict with the on-the-fly consolidation in business duties. As on-the-fly means it always reads the latest data in the central system. Group accountants access the local data without local accountants' permission. _But that doesn't mean pull request can't co-exist with On-the-Fly_. 

We use pull request approach to process the legal period end consolidation statements, which requires more on data precise, security, and clear duties. Each period, a consolidated result will be generated. The On-the-Fly consolidation statements always runs on the latest data basis which only extract current period data in ACDOCA, combines with the last periods' consolidated results in ACDOCC, will form a full consolidated picture at anytime.
   
** Overall Data Flow
Here gives an bird's-eye view of the data flow.

#+CAPTION: Data Flow of S/4 Consolidation 
[[../image/DataFlowOverview.png]]  

1. Data comes from the local finance systems through Central Finance's real-time data replication. Data streams could be validated at document level according to rules defined in the central system, and saved in the central journal table ACDOCA.
2. As not all the subsidiaries are involved in the central finance's landscape, those who can only provide their financial data in spreadsheets can submit via "Flexible Upload". The data will first be saved in a staging area before be counted into consolidation tasks.
3. Only if the local accountant raises a pull request can the group accountant pull the data from ACDOCA or Staging area into ACDOCC. You can regard a pull request as a SQL where-expression which can be applied on ACDOCA or ACDOCC(staging area) to boundary the data. As data in ACDOCA is time-vary, so a timestamp is used for filter-in data before it. Thus a snapshot is taken which forms a "Reported Data View".
4. A pull request can be raised after the local accountants close their fiscal year/period. At that point, now new document will be posted in the period. For those who submit data through flexible uploading, the pull requests is creatd along with uploading activity. 
5. Both loal and group accountants can run totals validation on the "Reported Data View". When run totals validation, it also requires the consolidated results of the former periods, and the adjustments that posted by group accountantsare also in ACDOCC.
6. If the validation is passed, the actual consolidation tasks can be run. Till now, the data handover from the local accountants to the group accountants is finished. If the validation is not passed, adjustments should be done by the local accountant, who needs to re-open the period and post adjustment documents, or upload a new version through flexible uploading. He should then raise a pull request again so that the group accountant is notified and run validation on the adjustd data.
7. There are mulitple BPC consolidation views created based on ACDOCA and ACDOCC. How many views and how they would be created depand on different use cases. But those views can be generally categorized into 3 categories: 1)Real-time data for priliminary consolidations, 2)Reported data fro legal consolidations, 3)Consolidated results and adjustments. Those views are unioned under a composite provider, and will be accessed as a whole by both BPC consolidation engine and reporting. You should carefully filter the data for different consolidation tasks and reports, as the data is overlapped among the views.
8. It is possible for the local accountant to run currency translation in S/4(then it is not necessary to run currency translation in BPC again). In this way, BPC only needs to access data in ACDOCC. And BPC cannot run consolidation until the currency translation is done by local accountants and the translated results are posted into ACDOCC.



* DB Design for Pull Request
Pull requests are raised and saved in the central system. Each time, if the local accountant wants to submit his reported financial data, he must raise a pull request. The group accountant will then be notified, and can use the information in the pull request to pull data from ACDOCA/C.

** Pull Request Table Design
The pull request table is actually hold filter information that is used to filter in data which is relevant for the consolidation. The mandatory filter dimension is timestamp which is used to point out the lines in ACDOCA. Besides, you can also filter at other dimensions, usually the account dimension, so that you can submit data by packages. 

#+CAPTION: Pull Request Table
| Field   | Key | Description                                               |
|---------+-----+-----------------------------------------------------------|
| MANDT   | X   | SAP Client                                                |
| PRUUID  | X   | Pull Request UUID                                         |
| MODEL   |     | Consolidation Model                                       |
| BCATE   |     | BPC Data Category                                         |
| CONSV   |     | Consolidation Version                                     |
| PTYPE   |     | Pull Request Type: Collective/MonthEnd/Adjustment         |
| FYEAR   |     | Fiscal Year                                               |
| FPERI   |     | Fiscal Period                                             |
| ENTITY  |     | Consolidation Entities: Company, Profit Center            |
| CLTIME  |     | Period Close Timestamp                                    |
| DCMETH  |     | Data Collection Method                                    |
| DENTRY  |     | Data Entry ID                                             |
| USTAT   |     | User Status: Initial/Rejected/Deferred/Submitted/Approved |
| SSTAT   |     | System Status: Ready/Running/Processed/Error              |
| CREATOR |     | Who creates the Pull Request                              |
| CTIME   |     | Pull Request create time                                  |
| UPDATOR |     | Who is the last user update it                            |
| UTIME   |     | The last update time                                      |

1. Pull request is client depandent(=MANDT=).
2. There is a unique ID(=PRUUID=) for each pull request in UUID format.
3. Pull request is also grouped by consolidation model(=MODEL=) and versions(=CONSV=). In case integrated with BPC, =BCATE= is used to store the BPC category.
4. There are 3 types(=PTYPE=) of pull request: 1) "Collective" means the pull request contains sub-packages; 2) "MonthEnd" means a regular mandatory pull request for each period; 3) "Adjustment" is for adjustment on the MonthEnd data.
5. Pull request is also grouped by fiscal year(=FYEAR=), period(=FPERI=), and entity(=ENTITY=).
6. Each pull request must have a timestamp(=CLTIME=) assigned which stands for the period close time. And it is that timestamp which is used to filter in lines in ACDOCA who have timestamp value before it.
7. A Data Collection Method must be assigned to a pull request so that it can maps the data package meta data defination. For pull requests with type "MonthEnd" and "Adjustment", a data entry ID is also needed, through which it can find a selection which contains additional filter information.
8. User status(=USTAT=) are statuses from user perspective. It is used to control the data submit process and the data visibility. For details please refer ~Pull Request Status and Pseudo SQL~. 
9. System status(=SSTAT=) are statuses from system perspective. For example, when a pull request is approved, the data is ready for consolidation tasks. But if system errors happen during tasks' run, then the system status is set to "Error". And when the tasks are in "Running" status, you cannot submit further requests.
10. Audit information like who(=CREATOR= and =UPDATOR=) and when(=CTIME= and =UTIME=) create it or update it is also attached.

** Data Collection Method and Pull Request 
Data Collection Method is defined as the meta data to control how Pull Requests are generated. You can regard Pull Requests are instances of a Data Collection Method. For example, I define a Data Collection Method as following:

#+CAPTION: Method Header
| Model  | Method | Type | Desc.                       | EMode      | Validation Method |
|--------+--------+------+-----------------------------+------------+-------------------|
| RTCCTB | DC001  | DC   | Data collection from ACDOCA | Sequential | DV100             |

#+CAPTION: Method Steps
| Model  | Method | Step ID | Desc.            | Sequence | Selection | Validation Method |
|--------+--------+---------+------------------+----------+-----------+-------------------|
| RTCCTB | DC001  |     001 | AP/AR            |        1 | $AP_AR    | DV110             |
| RTCCTB | DC001  |     002 | Assets           |        2 | $ASSET    | DV120             |
| RTCCTB | DC001  |     003 | Equity&Liability |        3 | $EQU_LIAB | DV130             |
| RTCCTB | DC001  |     004 | Profit&Loss      |        4 | $P_L      | DV140             |

All data collection methods are in sequential execution mode, but actually the sequence is not strictly applied during runtime, it only affects the display order in the UI. The method "DC001" has 4 steps with each a selection is given to boundary the data to be submitted. From business perspective, each step is corresponding to a data entry that represents a sub-package. The 4 data entries together will cover the complete set of the local data. Each data entry can aslo be assigned with a Data Validation Method. The validation method is run only to validate the data entry, not the entire package. Only the validation method in the method level(=DV100=) is passed can consolidation tasks be run. 

Now that we have the data collection method defination, we can deduce how local and group accountants play with it.

*** The group accountant opens the current period for data collection
The group accountant can start the data collection for a period, usually, close to the month end. The activity can either be manually or automatically by a recurrence backgroup job. Once opened, a pull request with type "Collective" is inserted for each entity. Meanwhile, for each required data entry, a MonthEnd pull request is also generated.

| PullReq | Model  | BCATE | Type |  Period | Entity | Status  | CLTIME | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+---------+--------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Initial |        | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial |        | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial |        | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial |        | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial |        | DC001  |    004 |

*** The local accountant submits data by packages
Once the period is opened, the local accountant can see the package in the data submit cockpit. He now first submits the AP/AR data. The AP/AR data is first validated by validation method "DV110", and then submitted by changing the status  of pull request =0000002= to "Submitted" and record the timestamp to =CLTIME=. 
| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Initial   |                     | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Submitted | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial   |                     | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial   |                     | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial   |                     | DC001  |    004 |

*** The group accountant check the validation result
Till now, only AP/AR data is submit, consolidation tasks cannot be run. But the group accountant can check the validation result along with the sub-package. To be in mind, BPC cannot see any data of this period for the entity. The validation is actually run in S4HANA side by invoking the validation method "DV110". Although it is the same method and produce the same result as the local accountant, but the group accountant can check the comments and attachments, and to decide whether the amount is accepted or not along with those non-amount explanations. 

~The results produced by a validation method can be overwriten with comments or attachments. For example, if rule1 is not passed, then the local accountant can write some comments and it will turn rule1 from red light to green light, so that he can still submit the data.~

If she decides to accept the data, then the pull request status will be changed to "Approved", otherwise "Rejected". To be in mind, MonthEnd pull request cannot be deferred. Once a data entry is approved, it is locked to forbid submit request on it again.
| PullReq | Model  | BCATE | Type |  Period | Entity | Status   | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Initial  |                     | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    004 |

**** What happens if a MonthEnd pull request is rejected?
Once a MonthEnd pull request is rejected, it cannot be changed status again, and left as is. A new MonthEnd pull request is created with status "Initial".
| PullReq | Model  | BCATE | Type |  Period | Entity | Status   | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Initial  |                     | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Rejected | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Initial  |                     | DC001  |    001 |

But if it is not a required MonthEnd request, then there is no new pull request is created. 

*** The local accountant submits all the data packages
With serveral roundtrips, finally, all the data is submitted and approved.
| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Initial   |                     | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Rejected  | 2016/01/26 10:11:02 | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Submitted | 2016/01/26 11:30:40 | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 11:40:32 | DC001  |    004 |
| 0000006 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 15:36:00 | DC001  |    002 |
| 0000007 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/27 09:50:11 | DC001  |    003 |

Now that all the data entries are approved, the collective pull request can either be submitted by local accountant and ask for approval, or directly approved by the group accountant. In either case, the validation method "DV100" will run. As this method is run on the complete set of the data, and may produce additional errors. 

| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Submitted | 2016/01/28 14:00:05 | DC001  |        |

Once the collective pull request is in "Submitted" status, the data can be seen by the group accountant in BPC. She can run BPC controls in addition with validation method "DV100".

*** The group accountant decides whether to approve/reject the collective pull request
Now data is transparent to BPC, the group accountant runs validation method "DV100", and then post some standardized journals, and run BPC controls. Based on the results, she decides:

*Option1: Approve it*. She thinks the local data is OK for consolidation, so the collective pull request is changed to "Approved", then consolidation tasks can run on it. 
 | PullReq | Model  | BCATE | Type |  Period | Entity | Status   | CLTIME              | DCMETH | DENTRY |
 |---------+--------+-------+------+---------+--------+----------+---------------------+--------+--------|
 | 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Approved | 2016/01/28 14:00:05 | DC001  |        |

*Option2: Reject it*. She thinks the local data is not ready for consolidation, so the collective pull request is changed to "Rejected". She then decides which data entries should be re-opened to allow local accountant submit adjustment requests. In this case, data entry =001= is re-opened. The the local accountant submits a adjustment pull request.  
| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Rejected  | 2016/01/28 14:00:05 | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Rejected  | 2016/01/26 10:11:02 | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Submitted | 2016/01/26 11:30:40 | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 11:40:32 | DC001  |    004 |
| 0000006 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 15:36:00 | DC001  |    002 |
| 0000007 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/27 09:50:11 | DC001  |    003 |
| 0000008 | RTCCTB | FINAL | A    | 2016.01 | C100   | Submitted | 2016/01/28 15:43:07 | DC001  |    001 |
 
Now the validation method "DV110" runs on the data that the new timestamp points to. After approved by the group accountant again, a new collective pull request is automatically inserted and submitted. Then the loop forms,it is back to the stage of former step. And she must also re-run all the consolidation tasks.
| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Rejected  | 2016/01/28 14:00:05 | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Rejected  | 2016/01/26 10:11:02 | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Submitted | 2016/01/26 11:30:40 | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 11:40:32 | DC001  |    004 |
| 0000006 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 15:36:00 | DC001  |    002 |
| 0000007 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/27 09:50:11 | DC001  |    003 |
| 0000008 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/28 15:43:07 | DC001  |    001 |
| 0000009 | RTCCTB | FINAL | C    | 2016.01 | C100   | Submitted | 2016/01/28 16:08:34 | DC001  |        |

*** The local accountant wants to submit a new adjustment request
Although data entry can be locked to forbid further data submits, but it cannot stop data entering into ACDOCA. Howerver, the Data Submit Cockpit can censor if there are new lines entering into ACDOCA after the package is approved. If yes, then the local accountant has to ask for a re-open of the data entry. To the group accountant, she has to decide whether these new changes should be counted in this consolidation run, or defer to the next period. 

If she chooses to approve the adjustment to this period, then everything is same as the case of rejecting collective request. Or she choose to defer this adjustment to next period, then the table looks like:
| PullReq | Model  | BCATE | Type |  Period | Entity | Status    | CLTIME              | DCMETH | DENTRY |
|---------+--------+-------+------+---------+--------+-----------+---------------------+--------+--------|
| 0000001 | RTCCTB | FINAL | C    | 2016.01 | C100   | Rejected  | 2016/01/28 14:00:05 | DC001  |        |
| 0000002 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/25 15:20:00 | DC001  |    001 |
| 0000003 | RTCCTB | FINAL | M    | 2016.01 | C100   | Rejected  | 2016/01/26 10:11:02 | DC001  |    002 |
| 0000004 | RTCCTB | FINAL | M    | 2016.01 | C100   | Submitted | 2016/01/26 11:30:40 | DC001  |    003 |
| 0000005 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 11:40:32 | DC001  |    004 |
| 0000006 | RTCCTB | FINAL | M    | 2016.01 | C100   | Approved  | 2016/01/26 15:36:00 | DC001  |    002 |
| 0000007 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/27 09:50:11 | DC001  |    003 |
| 0000008 | RTCCTB | FINAL | A    | 2016.01 | C100   | Approved  | 2016/01/28 15:43:07 | DC001  |    001 |
| 0000009 | RTCCTB | FINAL | C    | 2016.01 | C100   | Approved  | 2016/01/28 16:08:34 | DC001  |        |
| 0000010 | RTCCTB | FINAL | A    | 2016.01 | C100   | Deferred  | 2016/01/29 10:23:12 | DC001  |    004 |

The new request is changed to "Deferred" status, everything keeps same in the pull request table. But behind, the changed amount is copied to ACDOCC, and the period is changed to the next. 
  
** Pull Request Status and Pseudo SQL
The status of pull requests not only controls the data submit process, but also controls the data visibility by BPC. BPC can only see the data pointed by pull requests which have status "Submitted" or "Approved". In other words, status code must larger equal than "30". So for those pull requests with status "Initial" or "Rejected" or "Deferred", BPC won't see the data they point to. 
| User Status | Code |
|-------------+------|
| Initial     |   00 |
| Rejected    |   10 |
| Deferred    |   20 |
| Submitted   |   30 |
| Approved    |   40 |

#+CAPTION: Pseudo SQL that controls visibility
#+BEGIN_SRC sql
-- BPC Result View
  create view V_PULL_REQ_C as 
       select MODEL, BCATE, FYEAR, FPERI, ENTITY, max(CLTIME)
         from RTC_PULL_REQ
        where USTATUS >= 30
          and PTYPE = 'C'
     group by MODEL, BCATE, FYEAR, FPERI, ENTITY;

  create view C_RTC_FINAL_VIEWA as
       select * from C_FOUNDATION_VIEW as A
         join I_PULL_REQ_C as B
           on A.RYEAR = B.FYEAR
          and A.POPER = B.FPERI
          and A.RCOMP = B.ENTITY
          and A.TIMESTAMP <= B.CLOSE_TIME
        where B.MODEL = 'RTCCTB'
          and B.BPC_CATG = 'FINAL'
          and B.PTYPE = 'C';

-- Local Validation View for each Validation Method
  create view V_PULL_REQ_MA as 
       select MODEL, BCATE, FYEAR, FPERI, ENTITY, max(CLTIME)
         from RTC_PULL_REQ
        where USTATUS >= 30
          and (PTYPE = 'M' or PTYPE = 'A')
     group by MODEL, BCATE, FYEAR, FPERI, ENTITY;

       select * from /RTCART/RTCCTB01 as A
         join I_PULL_REQ_AR as B
           on A.RYEAR = B.FYEAR
          and A.POPER = B.FPERI
          and A.RCOMP = B.ENTITY
          and A.TIMESTAMP <= B.CLTIME
        where B.MODEL = 'RTCCTB'
          and B.BCATE = 'FINAL'
          and B.FYEAR = '2016'
          and B.FPERI = '01'
          and B.ENTITY = 'C100'
          and (<selection_where_string>);                      
#+END_SRC

There is also a business lock table for the group accountant lock certain periods to forbid local accountants raise pull requests in the periods. The lock table should look like this:
#+CAPTION: Pull Request Lock Table
| Field  | Key | Description                                    |
|--------+-----+------------------------------------------------|
| MANDT  | X   | SAP Client                                     |
| MODEL  | X   | Consolidation Model                            |
| DCATE  | X   | BPC Data Category                              |
| FYEAR  | X   | Group Fiscal Year                              |
| FPERI  | X   | Group Fiscal Period                            |
| ENTITY | X   | Consolidation Entities: Company, Profit Center |
| STATUS |     | Lock Status: 0:Open, 1:Locked                  |
| UUSER  |     | Last Activity User                             |
| UTIME  |     | Last Activity Time                             |

If the corresponding item is not exist in the table, it means the entity in that period is not locked. The lock data is generated the first time a lock is added for an entity and its certain period.


* TODO Data Submit Request Cockpit
** Raise Pull Requests 
The local accountant can raise pull requests when he feels the data is ready. Before submitting the data, he can run a local validation. Then the request is raised to the group accountant. The following screen mock-up explains detail on it. 

#+CAPTION: Pull Request Raise Screen 
[[../image/RaisePullRequest.png]]  

1. The local accountant login into the central system, and open the pull request raise application.
2. He chooses which consolidation model and which data category the pull request should be sent to .
3. The "Fiscal Year" is defaultly set to the current fiscal year, which can be calculated from the current nature time and the group fiscal year variant setting in the model. But local accountant can switch back to the last fiscal year. This is because data submittion of last period may happens on the new fiscal year.
4. "Fiscal Period" is always set to the current period of the fiscal year. User cann't change it. 
5. He can also choose differenty "Entities" if he is granted authorization to do so. Generally, a local accountant can only process one entity he is reponsible for. 
6. "New Water Mark" is the time when he enters in this application.
7. When he clicks the button "Get Data", it will fetch the data between "Last Water Mark" and "New Water Mark" group by "Fiscal Period" from ACDOCA. "Last Water Mark" stands for last approved pull requests by periods. But if there are pull requests exists but not approved, then the application will ignore them. It only returns the data between this one and the *last approved one*. If there is no data changed for a period since last approved, then the period will not be shown in the list. 
8. The data showed to the local accountant only contains the changed account and their delta amounts. The already processed amounts will also be showed as a reference. Thus the local accountant can get a clear view of what has been changed in this interval.
9. He can then click the "Validate" button, which will navigate to the "Report Data Validation" App. It will do validations on the current period data(the consolidate data in ACDOCC) along with the delta ones(The new data in ACDOCA), thus to get a comprehensive validation result. The validation app will leverage BPC's control, who will provide a URL link. 
10. If validation is passed, he can raise the pull request. Click the "Raise" button will generate a pull request *only for the current period*. ~The former periods which have the changes should be fixed using other means. In 1610 release we won't deal with the amount.~ If the period of the entity is locked, then he cannot raise the pull request, and an error message will be given. 
11. After successfully sent the pull request, the data table will be refreshed empty if no new data change is happening. 

*** Raise Pull Requests in Flexible Uploading                      :Summer:
If the local accountant submits the data through flexible uploading, then the reported data is in ACDOCC. He can still use the same application to raise a pull request. The difference is that data in ACDOCC won't use timestamp for filtering. 

In the flexible uploading APP, the local accountant can upload the data and raise a pull request directly. The uploaded data will generate a doucment. And once he click "Raise" button, a pull request is created and its UUID is set in every row of the document. Then the pull request UUID is used to pull the correct data from ACDOCC. The pull request for ACDOCC has a specific type "C".

The local accountant can, however, still use "Raise Pull Request" APP to do the same thing. The benefit that using this APP is he can see changes between this copy and the last copy. 

*** Raise Pull Requests in Currency Translation                    :Marvin:
The local accountant can submit the translated data to the group accountant. He can run currency transalation in the central system and do validations on the transalted results. If data comes from ACDOCA, the CT post_run will read it and translated it into ACDOCC. The document numbers generated will be recorded in the CT audit table. The local accountant can then raise a pull request directly in the CT APP. The pull reqeust ID is then set to all the documents' lines related. 

If the data need to be translated is from flexible uploading, then the local accountant can still use the same CT APP to do the same stuff: translating and submiting. To the end-user, it is transparent. No matter the data is from ACDOCA or ACDOCC. He can navigate to the CT APP directly from the Flexible Upload APP. 

Whether local accountants should submit translated result or not is determined by the settings in the model. If the model is set that currency translation should be done in S/4HANA, then local accountants should only submit the translated results, and vice-versa. It is not possible for a model that supports some entities submit translated results, others submit non-translated. And also keep in mind, once currency translation is run in S/4HANA, BPC only needs to access data in ACDOCC. So, from the group accountants' perspective, she can never access the real-time data in ACDOCA.     

** Process Pull Requests
In the 1610 release, the pull request produces 2 effects:
1. Notify BPC for the new coming data;
2. Filter data before the timestap by join with the underlying HANA views. 

Once the pull request is raised, the filtering information will be copied into a BPC table. The BPC Consolidation Monitor can use this information to control the task status for each entity. For example, if a new pull request comes in, the status will be set to "To Be Reviewed". If group accountant clicks a task in "To be Reviewed" status, a dialog pupup will show which contains a link to an ABAP report that shows changed data. And the "Execute" button to re-run the task. 
How pull request is used to filter out the data please refer to the SDD: [[https://wiki.wdf.sap.corp/wiki/x/Ds83bQ][BPC HANA Views Modeling]].

*** This part will be frozen in 1610
Once the group accountant gets the pull request notification in BPC's consolidation monitor, she clicks it and a dialog window will pop-up and show a pull request list. She can then decide how to process the pull requests.  

~The dialog window is realized using an ABAP ALV report. The best way is to use BPC's UI5 framework.~

The pull request process application contains 3 screens: search screen, list screen, and the detail screen. If it is called from BPC's consolidation monitor, the "Search Screen" will be omitted as the search parameters is already filled by BPC. Then the "List Screen" will be showed to the user directly. 

#+CAPTION: Pull Request Search Screen 
[[../image/PullRequestProcess01.png]]  

The group accountant can of course open the pull request application directly in S/4. In the search screen, she can input search parameters to filer the pull requests. 

1. The "RTC Model" and "BPC Environment & BPC Model" are mandatory, but if one choose the "RTC Model" the "BPC Environment" and "BPC Model" are determined automatically, and vice verse.
2. Fiscal Year/Period has the default value of current fiscal year and period.
3. "BPC Category" and "Cons. Version" are too mutual determinable.
4. "Cons. Group",  "Cons. Entity", User Status, and System Status are all optional filtering parameters. 

#+CAPTION: Pull Request List Screen 
[[../image/PullRequestProcess02.png]]  

The list view lists all the pull requests that fulfill the search parameters. It is grouped by "Group" and "Entity". 

1. Pull request numbers are UUIDs with time sequence.
2. "Request type" includes =MonthEnd= and =Adjustment=. =MonthEnd= means the pull request is generated automatically by a consolidation recurrence schedule, and this kind of pull request must be processed by each period. =Adjustment= is for occasionally adjustment posts after the =MonthEnd= pull request is done.
3. "Timestamp" is the close time when the pull request is raised.
4. "User Status" are status on the perspective of end users, it contains: Raise/Reject/Approve/Defer.
5. "System Status" stands for how the consolidation system dealing with the pull requests. It contains: /Ignore/Processed/Ready/Running/Error.
6. The group accountant can do operations like "Validate", "Approve", "Defer", and "Reject" on multiple items. But it contains status constrains. For example, you can not approve the pull request that already has the system status "Running".

#+CAPTION: Pull Request Detail Screen 
[[../image/PullRequestProcess03.png]]  

The detail view contains the pull requests that belong to an entity, or "Group/Entity" combination. The list will always show the data between the latest pull request and the last successfully processed one. The pull requests between them will be omitted. Like the "pull request raise app", the list will be grouped by fiscal periods, with each period a water mark timestamp to indicate last successfully processed time.  

1. Validation is mandatory before approval and deferral. The validation will counts the new data into the already processed data, and do a comprehensive check.
2. If validation errors happen, then the pull request can only be rejected. Approval and Deferral can just not be executed.
3. Once the group accountant choose "Approve", the user status will be changed to "Approve" immediately, a notification will be sent to the local accountant, and the system status will be set to "Ready", which means it is ready to run consolidation tasks.
4. If the "Defer" button is clicked, user status will be set to "Defer", the system status will be left with empty. This pull request will then be counted in next occurrence run.


* Deduction

** 1610 Without Defer
In RTC's first release(1610), pull request will be used as both a notification and timestamp filtering. The status control in the pull request will not be fully appeared. BPC can access the data directly in ACDOCA with timestamp filtering. The timestamp in the pull request which is submitted by the local acccountant reflects the local close time. Before the time, the data is allowed(by local accountants) for consolidation, and after the time, the data should not be counted for consolidation. 

This approach has following restrictions:

1. Once the local accountant raise the pull request, it is approved automatically, and group accountant can only accept it. There is no embedded control on this process, group accountant must notify the local accountant externally if she doesn't want the data. 
2. Delta consolidation is still not possible. Each time the local accountant raise a new pull request, BPC will always do a full re-consolidation based on the new timestamp. 
3. You can not defer amount to next period.
4. If consolidation is in "RUNNING" or "ERROR" status, reporting will produce data inconsistency.

I give following examples to explain detail data flow:

*** Scenario1: Local accountant submits data through flexible uploading 
*Step 1: Upload data but not submitted*: Data is saved in ACDOCC, a document number is given. The document status in in "Staging". When the user submit the data, he must choose the value of BPC category. The currency key of "CONS_SL" is set to "LC" for easy consumption for BPC. The actual currency key will be saved in HCURK. Currently, there is no pull request created, so BPC won't see the data.

=ACDOCC=  
| DOCNR | Status  | Entity |    Time | Currency | BPC Category | Group  | FLOW  | CONS_SL | PullReq |
|-------+---------+--------+---------+----------+--------------+--------+-------+---------+---------|
| 10001 | Staging | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |     100 |         |

*Step 2: Submit the data*: The orignal document status is changed to "posted". A pull request is created and the pull request number is set in the document lines. Now, BPC can see the data because there is a pull request exists which will be joined in the BPC consolidation view.

=ACDOCC=
| DOCNR | Status | Entity |   FTime | Currency | BPC Category | Group  | FLOW  | Amount | PullReq |
|-------+--------+--------+---------+----------+--------------+--------+-------+--------+---------|
| 10001 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    100 | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 3: Re-upload a new copy and submit*: The former submitted document will be kept as it is. A new document is  posted along with the pull requests. Through the consolidation view, BPC will get the data of the latest pull request for each group of Enity, Fiscal Time, and BPC Category. 
=ACDOCC=
| DOCNR | Status | Entity |   FTime | Currency | BPC Category | Group  | FLOW  | Amount | PullReq |
|-------+--------+--------+---------+----------+--------------+--------+-------+--------+---------|
| 10001 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    100 | 0000001 |
| 10002 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    110 | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |

*** Scenario2: Local accountant submits data in ACDOCA  
If local data is in ACDOCA, then data copy to ACDOCC is unnecessary. Only raise a pull request with current timestamp is OK. The pull request is then used to join with the foundation view to get the filterred data before the recored timestamp. 

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category |     CTimestamp | USTATUS  |
|---------+------+--------+---------+----------+----------------+----------|
| 0000001 | A    | C100   | 2016.01 | Actual   | 20160302100020 | APPROVED |

*** Scenario3: Local accountants run currency translation in S/4, data comes from ACDOCA 
Local accountants can run currency translation in S/4 and then do data validations. The translated results will be saved in ACDOCC. BPC cannot see the translated results until he raises a pull request. In this case, BPC only gets data from ACDOCC rather than ACDOCA.

*Step 1: Local close*: Data in ACDOCA:  
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |

*Step 2: Run currency translation*: A rollup runs implicitly to create a local aggregated document. Translated results are also posted with each currency a dedicate document.
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      |         |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      |         |
 
*Step 3: Submit the data*: Raise a pull request
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 3: Re-submit a new set of translated data*: 
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |
| 10004 | C100   | 2016.01 | Actual       | 100 | CNY   |     200 | LC       | 0000002 |
| 10005 | C100   | 2016.01 | Actual       | 100 | CNY   |      40 | USD      | 0000002 |
| 10006 | C100   | 2016.01 | Actual       | 100 | CNY   |      36 | EUR      | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |

*** Scenario4: Local accountants run currency translation in S/4, data comes from flexible upload 

*Step 1: Upload local data*: Data must be in posted status, or currency translation can not run on it.
=ACDOCC=  
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |

*Step 2: Run currency translation*: Each currency will generate a document.
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      |         |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      |         |
 
*Step 3: Submit the data*: Raise a pull request
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 4: Re-submit a new set of translated data*: 
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |
| 10004 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     200 | LC       | 0000002 |
| 10005 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      40 | USD      | 0000002 |
| 10006 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      36 | EUR      | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |


** 1709 With Defer
=Notes:=
1. The data collection method has no sub-packages, the pull request type is "Collective".
2. We assume local validation is supported in 1709. 
3. Exchange rate between local currency and group currency USD is 1:1.
4. Account number is omitted for simplicity.
5. Irrelevant columns are hided for different steps. 
6. "LC" only reflects BPC point of view.

The corresponding pseudo sql can be found in 

*** Scenario1: Local data comes from ACDOCA
*Step 1: Local close*: Data in ACDOCA:  
| Entity |  Period | Amount | Currency | Timestamp           |
|--------+---------+--------+----------+---------------------|
| C100   | 2016.01 |    100 | LC       | 2016/01/29 10:30:00 |

*Step 2: Raise a month-end pull request*: Before raising is actually happening, data validation automatically runs directly on ACDOCA. Only after passing the validation, a pull request is inserted. 
| PullReq | Status    | Entity |  Period | Timestamp           |
|---------+-----------+--------+---------+---------------------|
| 0000001 | Submitted | C100   | 2016.01 | 2016/01/30 10:30:00 |

*Step 3: Approve month-end pull request*: Once a pull request is submitted, the group accountant can see the corresponding data in BPC. She can run validation again to confirm the data is OK. The rule could be same as the local accountant's before submit, or she can run additional validation rules. If the result is OK, then the status of the pull request is changed to "Approved".

| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Approved | C100   | 2016.01 | 2016/01/30 10:30:00 |

If the validation is not passed, then the status of pull request is change to "Rejected". Which requires the local accountant post adjustment documents in ACDOCA, and resubmit the MonthEnd pull request again. 

| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Rejected | C100   | 2016.01 | 2016/01/30 10:30:00 |

*Step 4: Run consolidation tasks in BPC*: Consolidation results are posted to ACDOCC.

| DOCNR | Entity |    Time | BPC Category | Amount | Currency |
|-------+--------+---------+--------------+--------+----------|
| 10001 | C100   | 2016.01 | FINAL        |    100 | USD      |

*Step 5: Post a new adjustment document in ACDOCA*: The period is re-open after consolidation run. 
| Entity |    Time | Amount | Currency | Timestamp           |
|--------+---------+--------+----------+---------------------|
| C100   | 2016.01 |    100 | LC       | 2016/01/29 10:30:00 |
| C100   | 2016.01 |      5 | LC       | 2016/01/30 11:20:00 |

*Step 6: Raise an adjustment pull request*: Data validation happens on the total data of period 2016.01, rather than the delta data. If passing the validation, a new pull request is inserted.

| PullReq | Status    | Entity |  Period | Timestamp           |
|---------+-----------+--------+---------+---------------------|
| 0000001 | Approved  | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Submitted | C100   | 2016.01 | 2016/01/30 11:20:00 |

*Step 7: Check the new submitted data:* Here, the group accountant can decide whether this delta amount need to be counted into this period, or defer to next period, or just reject it and ask the local accountant submit again. 

If data is validated and approved, she can run consolidation tasks again. BPC re-runs all the consolidation tasks based on the complete data set, rather than only the new submited delta part. But it posts only delta result to ACDOCC. 
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Approved | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Approved | C100   | 2016.01 | 2016/01/30 11:20:00 |

| DOCNR | Entity |  Period | BPC Category | Amount | Currency |
|-------+--------+---------+--------------+--------+----------|
| 10001 | C100   | 2016.01 | FINAL        |    100 | USD      |
| 10002 | C100   | 2016.01 | FINAL        |      5 | USD      |

If data is validated and deferred, the pull request's status is changed to "Deferred". Meanwhile, a new document is posted into ACDOCC which rullup the delta amount and has its period value changes to next period and the currency is still in local. Then, in the next period, the amount will be counted into consolidation. 

| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Approved | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Deferred | C100   | 2016.01 | 2016/01/30 11:20:00 |

| DOCNR | Entity |  Period | BPC Category | Amount | Currency | PullReq |
|-------+--------+---------+--------------+--------+----------+---------|
| 10001 | C100   | 2016.01 | FINAL        |    100 | USD      |         |
| 10002 | C100   | 2016.02 | FINAL        |      5 | LC       | 0000002 |

If data is validated and rejected, the pull request's status is change to "Rejected". Once rejected, BPC won't see the changed data again, it only can see the data which the latest "Submitted" or "Approved" pull request points. 

| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Approved | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Rejected | C100   | 2016.01 | 2016/01/30 11:20:00 |

*The pull request id provides following usages:*
1. Flags a valid set of consolidation result lines that belongs to the last approved pull request.
2. Finds the right timestamp when drilling through to the corresponding source journal items in ACDOCA.

*** Scenario2: Local data comes from ACDOCC
*Step 1: Flexible Upload*: Data is posted into ACDOCC using a special document type which allows to change the amounts after posting.  
| DOCNR | DTYPE | Entity |  Period | Amount | Currency |
|-------+-------+--------+---------+--------+----------|
| 10001 | FU    | C100   | 2016.01 |    100 | LC       | 

*Step 2: Submit Data*: Local accountant submits a pull request, the uploaded data is copied to a new document.

| PullReq | PTYPE | Status    | Entity |  Period | Timestamp           |
|---------+-------+-----------+--------+---------+---------------------|
| 0000001 | M     | Submitted | C100   | 2016.01 | 2016/01/30 10:30:00 |

| DOCNR | DTYPE | Entity |  Period | Amount | Currency | Timestamp           |
|-------+-------+--------+---------+--------+----------+---------------------|
| 10001 | FU    | C100   | 2016.01 |    100 | LC       |                     |
| 20001 | SC    | C100   | 2016.01 |    100 | LC       | 2016/01/30 10:30:00 |

*Step 3: Validate and check the submitted data*: The group accountant can now see the data. She decides to approve or reject it. 

If the data is approved. The pull request's status will be set to "Approved", otherwise, "Rejected". Because it is a MonthEnd request, she cannot defer it. Now suppose the data is rejected.

| PullReq | PTYPE | Status   | Entity |  Period | Timestamp           |
|---------+-------+----------+--------+---------+---------------------|
| 0000001 | M     | Rejected | C100   | 2016.01 | 2016/01/30 10:30:00 |

*Step 4: Change amount and re-submit*: The local accountant is notified the data is not approved. He changes the amount from 100 to 105, and re-submits a MonthEnd pull request. Only the delta amount 5 is posted to ACDOCC as a new document. 
| DOCNR | DTYPE | Entity |  Period | Amount | Currency | Timestamp           |
|-------+-------+--------+---------+--------+----------+---------------------|
| 10001 | FU    | C100   | 2016.01 |    105 | LC       |                     |
| 20001 | SC    | C100   | 2016.01 |    100 | LC       | 2016/01/30 10:30:00 |
| 20002 | SC    | C100   | 2016.01 |      5 | LC       | 2016/01/30 14:00:00 |

| PullReq | PTYPE | Status    | Entity |  Period | Timestamp           |
|---------+-------+-----------+--------+---------+---------------------|
| 0000001 | M     | Rejected  | C100   | 2016.01 | 2016/01/30 10:30:00 |
| 0000002 | M     | Submitted | C100   | 2016.01 | 2016/01/30 14:00:00 |

*Step 5: Submit an adjustment request and defer*: Now the MonthEnd request is approved, the local accountant wants to submit an adjustment. The group accountant decides to defer this adjustment to next period. 
| PullReq | PTYPE | Status   | Entity |  Period | Timestamp           |
|---------+-------+----------+--------+---------+---------------------|
| 0000001 | M     | Rejected | C100   | 2016.01 | 2016/01/30 10:30:00 |
| 0000002 | M     | Approved | C100   | 2016.01 | 2016/01/30 14:00:00 |
| 0000003 | A     | Deferred | C100   | 2016.01 | 2016/01/31 09:49:13 |

| DOCNR | DTYPE | Entity |  Period | Amount | Currency | Timestamp           |
|-------+-------+--------+---------+--------+----------+---------------------|
| 10001 | FU    | C100   | 2016.01 |    115 | LC       |                     |
| 20001 | SC    | C100   | 2016.01 |    100 | LC       | 2016/01/30 10:30:00 |
| 20002 | SC    | C100   | 2016.01 |      5 | LC       | 2016/01/30 14:00:00 |
| 20003 | SC    | C100   | 2016.02 |     10 | LC       | 2016/01/31 09:49:13 |

*** Scenario3: CT in S4, data comes from ACDOCA
*It is under the assumption that delta translation is supported.* 

*Step 1: Local close*: Data is translated and submitted. 
#+CAPTION: Data in ACDOCA 
| Entity |  Period | Amount | Currency | Timestamp           |
|--------+---------+--------+----------+---------------------|
| C100   | 2016.01 |    100 | LC       | 2016/01/28 20:10:32 |

#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 |

#+CAPTION: Pull Request
| PullReq | Status    | Entity |  Period | Timestamp           |
|---------+-----------+--------+---------+---------------------|
| 0000001 | Submitted | C100   | 2016.01 | 2016/01/29 10:30:00 |

*Step 2: Approve MonthEnd pull request*: The group accountant decides to approve or reject the request. If it is approved, only need to change the status of the pull request. 
#+CAPTION: Pull Request
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Approved | C100   | 2016.01 | 2016/01/29 10:30:00 |

If "Rejected". Besides setting the status, the translated results will be deleted.
#+CAPTION: Pull Request
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Rejected | C100   | 2016.01 | 2016/01/29 10:30:00 |

#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID | DEL |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------+-----|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 | X   |

*Step 3: Post adjustments and re-submit*: In case the MonthEnd request is rejected, the local accountant has to post adjustment documents in ACDOCA, and re-submit a MonthEnd request. 
#+CAPTION: Data in ACDOCA 
| Entity |  Period | Amount | Currency | Timestamp           |
|--------+---------+--------+----------+---------------------|
| C100   | 2016.01 |    100 | LC       | 2016/01/28 20:10:32 |
| C100   | 2016.01 |      5 | LC       | 2016/01/29 11:10:12 |

#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID | DEL |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------+-----|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 | X   |
| C100   | 2016.01 |       105 | EUR    |       105 | USD    | 2016/01/29 11:27:01 | 0000002 |     |

#+CAPTION: Pull Request
| PullReq | Status    | Entity |  Period | Timestamp           |
|---------+-----------+--------+---------+---------------------|
| 0000001 | Rejected  | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Submitted | C100   | 2016.01 | 2016/01/29 11:27:01 |

*Step 4: Submit an adjustment request*: The local accountant find a new amount and wants to submit it as an adjustment. An adjustment pull request is inserted and a delta CT document is posted.
#+CAPTION: Data in ACDOCA 
| Entity |  Period | Amount | Currency | Timestamp           |
|--------+---------+--------+----------+---------------------|
| C100   | 2016.01 |    100 | LC       | 2016/01/28 20:10:32 |
| C100   | 2016.01 |      5 | LC       | 2016/01/29 11:10:12 |
| C100   | 2016.01 |     10 | LC       | 2016/01/30 09:23:24 |

#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID | DEL |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------+-----|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 | X   |
| C100   | 2016.01 |       105 | EUR    |       105 | USD    | 2016/01/29 11:27:01 | 0000002 |     |
| C100   | 2016.01 |        10 | EUR    |        10 | USD    | 2016/01/30 09:39:45 | 0000003 |     |

#+CAPTION: Pull Request
| PullReq | Status    | Entity |  Period | Timestamp           |
|---------+-----------+--------+---------+---------------------|
| 0000001 | Rejected  | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Approved  | C100   | 2016.01 | 2016/01/29 11:27:01 |
| 0000003 | Submitted | C100   | 2016.01 | 2016/01/30 09:39:45 |

*Step 5: Approve/Reject/Defer the adjustment request:* Here, the group accountant can decide whether this delta amount need to be counted into this period, or defer to next period, or just reject it and ask the local accountant submit again. 

If approved, only change the pull request status. 
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Rejected | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Approved | C100   | 2016.01 | 2016/01/29 11:27:01 |
| 0000003 | Approved | C100   | 2016.01 | 2016/01/30 09:39:45 |

If rejected, besides change the status, the corresponding translated document is marked as deleted.
#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID | DEL |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------+-----|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 | X   |
| C100   | 2016.01 |       105 | EUR    |       105 | USD    | 2016/01/29 11:27:01 | 0000002 |     |
| C100   | 2016.01 |        10 | EUR    |        10 | USD    | 2016/01/30 09:39:45 | 0000003 | X   |

#+CAPTION: Pull Request
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Rejected | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Approved | C100   | 2016.01 | 2016/01/29 11:27:01 |
| 0000003 | Rejected | C100   | 2016.01 | 2016/01/30 09:39:45 |

If deferred, the pull request's status is changed to "Deferred" and the corresponding translated document is marked as deleted. Meanwhile, a new document is posted into ACDOCC which rullup the delta amount and has its period value changes to next period and the currency is still in local. Then, in the next period, the amount will be re-translated. 
#+CAPTION: Data in ACDOCC 
| Entity |  Period | LC Amount | LC Key | GC Amount | GC Key | Timestamp           |  PRUUID | DEL |
|--------+---------+-----------+--------+-----------+--------+---------------------+---------+-----|
| C100   | 2016.01 |       100 | EUR    |       100 | USD    | 2016/01/29 10:30:00 | 0000001 | X   |
| C100   | 2016.01 |       105 | EUR    |       105 | USD    | 2016/01/29 11:27:01 | 0000002 |     |
| C100   | 2016.01 |        10 | EUR    |        10 | USD    | 2016/01/30 09:39:45 | 0000003 | X   |
| C100   | 2016.02 |        10 | EUR    |        10 | LC     | 2016/01/30 10:02:31 | 0000003 |     |

#+CAPTION: Pull Request
| PullReq | Status   | Entity |  Period | Timestamp           |
|---------+----------+--------+---------+---------------------|
| 0000001 | Rejected | C100   | 2016.01 | 2016/01/29 10:30:00 |
| 0000002 | Approved | C100   | 2016.01 | 2016/01/29 11:27:01 |
| 0000003 | Deferred | C100   | 2016.01 | 2016/01/30 09:39:45 |

*** Scenario4: CT in S4, data comes from ACDOCC


* Group Level Lock/Unlock Posting Period Request
The local system synchronizes its FI documents into the central system, BPC access the data in the central system. The lock/unlock a period means both lock/unlock in the local system and the central system. Because although in most cases, documents are posted in the local system,  it is still possible to have documents directly posted in the central system. 

According to different corporation contexts, there could be 3 different scenarios regarding with who is the initiator for the Lock/Unlock request, the local accountant or group accountant?

** Lock is Requested by Group Accountant 

[[../image/GroupLevelPeriodLock01.png]]  

In this case, the group accountant can raise a posting period lock request directly in BPC's consolidation monitor. The lock request is saved in the central system, and send to the local system. Based on configuration, the local system can either do the lock automatically(which means the group accountant has the full authority to do period lock/unlock); Or send a notification to the local accountant, so that he can decide whether to do the Lock.

Once the group level posting period is locked in the lock system, it will also lock the counterpart in the central system. Because in central system, the account numbers may not be the same with those in the local system, necessary mapping should be done. Meanwhile, a pull request will be raised which includes all the changes(new documents line items) belong to this interval. The pull request is saved in central system, and the group accountant will be notified and do the data pulling.   

** Local Accountant Does the Lock

[[../image/GroupLevelPeriodLock02.png]]  

This case, the local accountant has the authority to do group level lock/unlock. The group accountant is only be notified that there is a new pull request should be processed.  

** Local Accountant Request for Unlock 

[[../image/GroupLevelPeriodLock03.png]]  

If group accountant has the full authority to do group level lock/unlock, then the local accountant  must raise a unlock request if he wants to do posting in a closed period. The unlock request is saved in the central system, and the group accountant decides whether to approve or reject it. The the unlock request gets approved, it will unlock the period both in the central system and the local system. 

** Mapping Group Lock/Unlock to Local Open/Close Posting Period
In either of the above 3 scenarios, mappings are needed as the account numbers and fiscal year variant are are different among BPC, central system, and local system. Each time a lock/unlock request, or a pull request is raised, the local financial master data should be correctly mapped to the central ones and the group ones, and vice verse. 

These mapping activities could be complicate. Take fiscal year variant as an example, which could be different between group and local. From the consolidation perspective, the lock/unlock period always means according to the group fiscal variant. But to the local accountant, he may cares more on open/close fiscal year/period based on local fiscal variant. It's involuntary to think to combine local open/close with group lock/unlock. So that no additional effort is introduced to the local accountants. But these attempts would introduce more complexity than simplification.

#+CAPTION: Existing Open and Close Posting Periods Maintenance View 
[[../image/OpenClosePeriodMaintView.png]]  

Above snapshot is taken from the IMG maintenance view for current open/close posting periods. The underlying table is ~T001B~, with the Tcode ~FAGL_EHP4_T001B_COFI~.  If you want to leverage this maintenance view to realize group level posting lock/unlock, you must convert the group fiscal year variant and account numbers into local ones before inserting items into this table. Besides, you should also determine:
1. Which open posting variant(first column in above table) should be used.
2. Which account type should be used.
3. If I close a period, do I have to delete a line and then add a new correct line, or I should modify an existing line?


