#+PAGEID: 1818041661
#+VERSION: 12
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Currency Translation
** General Information
*** Stakeholders and Roles
| Role                  | Name                                                 |
|-----------------------+------------------------------------------------------|
| Author(s)             | Vincent Zhang                                        |
| Architect             | Vincent Zhang                                        |
| Product Owner         | Shi Ying, Carol Pan                                  |
| Information Developer |                                                      |
| Quality Responsible   | Yao Cen                                              |
| Developers            | Steve Mo, Marvin Qian, Liu Chang, Lynn Chen, Jane Ni |

*** References
|                            |                  |               | <30>                           |
| Document Title             | Date             | Link          | Comments                       |
|----------------------------+------------------+---------------+--------------------------------|
| EC-CS Currency Translation | <2015-12-25 Fri> | [[http://help.sap.com/saphelp_470/helpdata/en/5c/c1bba4445f11d189f00000e81ddfac/content.htm?frameset=/en/5c/c1bba4445f11d189f00000e81ddfac/frameset.htm&current_toc=/en/5c/c1c25f445f11d189f00000e81ddfac/plain.htm&node_id=104&show_children=true#jump104][online help]]   | This document describe much about currency translation in EC-CS. It is the main document that portrays you how currency translation is done in consolidation. |
| BCS Currency Translation   | <2015-12-25 Fri> | [[https://help.sap.com/saphelp_erp60_sp/helpdata/en/ef/a5c6535e601e4be10000000a174cb4/frameset.htm][online help]]   | Currency translation in BCS is similar with EC-CS. The major difference is that BCS only provides 4 translation keys, while EC-CS has 11. But BCS allows user to define his own translation keys which permits more flexibilities. |
| BPC Currency Translation   | <2015-12-23 Wed> | [[http://help.sap.com/saphelp_bopacnw101/helpdata/en/7b/4479fd9b394314a257d92d9be6a71f/content.htm][online help]]   | The help doc describes the _Rules_ of BPC standard model. You can get a general idea of how rules are applied in financial consolidation. |
| Foreign Currency Valuation | <2016-02-27 Sat> | [[http://help.sap.com/saphelp_dimp50/helpdata/en/a6/004940f0030272e10000000a155106/content.htm?frameset=/en/e2/43c54012a9cc38e10000000a155106/frameset.htm&current_toc=/en/2d/830e405c538f5ce10000000a155106/plain.htm&node_id=347&show_children=false][online help]]   | How G/A Accounting deals with currency translation? User can customize its valuation methods, define the valuation area, and set automatic posting. In general, it is quite simpler than currency translation during consolidation. As most of the translation are calculated at document level. |
| Currency                   | <2016-02-27 Sat> | [[http://help.sap.com/saphelp_dimp50/helpdata/en/e5/0781b44acd11d182b90000e829fbfe/content.htm?frameset=/en/c5/da683859cf3b45e10000009b38f8cf/frameset.htm&current_toc=/en/e5/078d0b4acd11d182b90000e829fbfe/plain.htm&node_id=19&show_children=false][online help]]   | Simple introduction on what is currency in SAP finance. Includes definition of =Currency Key=, =Exchange Rate Type=, and =Reference Currency=. |
| SAP SET                    | <2016-02-21 Sun> | [[http://help.sap.com/saphelp_46c/helpdata/en/c1/fcdf390ab90b35e10000000a11402f/content.htm?frameset=/en/c1/fcdf390ab90b35e10000000a11402f/frameset.htm&current_toc=/en/c4/74da3889432f48e10000000a114084/plain.htm&node_id=3&show_children=true#jump3][online help]]   | Introduce what is SAP SET, different types of SET, and how it is used in SAP environment. |
| Consolidations             | <2015-12-26 Sat> | [[http://wiki.scn.sap.com/wiki/display/ERPFI/Consolidations][scnwiki]]       | It is scnwiki page that contains all the practical knowledge regarding SAP BCS and EC-CS. I guess it is a private note book by a SAP finance consultant:-) |
| CONVERT_CURRENCY           | <2016-02-27 Sat> | [[https://help.sap.com/saphelp_hanaplatform/helpdata/en/d2/2d746ed2951014bb7fb0114ffdaf96/content.htm][online help]]   | Reference guide of HANA currency conversion function. |
| HANA Script                | <2016-02-21 Sun> | [[http://help.sap.com/saphelp_hanaplatform/helpdata/en/92/11209e54ab48959c83a7ac3b4ef877/content.htm?frameset=/en/60/088457716e46889c78662700737118/frameset.htm&current_toc=/en/ed/4f384562ce4861b48e22a8be3171e5/plain.htm&node_id=3][online help]]   | Online help of HANA SQL scripts. You can find all your want about how to write in HANA SQL scripts. |
| AMDP Guide                 | <2016-02-21 Sun> | [[http://help.sap.com/abapdocu_740/en/index.htm?file=abenamdp.htm][ABAP Keywords]] | All about AMDP: Keywords and Syntax. |
| ABAP Persistence Service   | <2016-05-06 Fri> | [[http://help.sap.com/saphelp_nwpi71/helpdata/en/f5/a36828bc6911d4b2e80050dadfb92b/content.htm?frameset=/en/ab/9d0a3ad259cd58e10000000a11402f/frameset.htm&current_toc=/en/43/5550a1f8a75f6be10000000a1553f6/plain.htm&node_id=649&show_children=false][online help]]   | The Persistence Service lets the ABAP programmer work with relational database data in an object-oriented way. |


** Design
*** Key Requirements and Design Goals
Currency Translation of RTC should fully leverage HANA technology, so that a distinguished performance boost can be gain. It targets on translating financial statements from one currency to another currency. The translation algorithm can be customized or enhanced in an easy and understandable way. 

**** Following Design Goals *MUST* be Met:
1. The core translation algorithm must be pushed down to HANA.
2. Currency translation can be run on-the-fly for a consolidation unit. 
3. There must be a way to easily define exchange rates or find translated values.
4. The delivered translation algorithm must cover most of the translation cases in financial consolidation.
5. Translation algorithm can be customized and enhanced by customer.
6. Translation difference can be well represented.
7. Rounding difference can be well handled.
8. The translated result can be posted to ACDOCC as documents. 
9. There must be audit trails to record who, when, and what of a currency translation run.

**** Following Design Goals *SHOULD* be Met:
1. The calculation is done by HANA function: CONVERT_CURRENCY.
2. The translation algorithm should be realized using AMDP(HANA SQL scripts).
3. Analytic Office can directly consume outputs of translation algorithm. 
4. TCUR* tables should be reused to define exchange rates and rate types.
5. Data filtering should re-use SAP SET, as it already provides customization UI.
6. User can easily define the parameters of its currency translation run.
7. Provisional run should be provided in case group values are not ready for reconciliation.
8. Currency Translation can be run repeatedly either in delta mode, or in replace mode.
9. Differential item can be breakdown by sub-assignments.

*** Context
Currency Translation enables you to translate financial data reported by consolidation units into the currency of your consolidation group.

Financial data reported by consolidation units is usually collected in the Consolidation application in local currency. You need to translate this data into group currency before you can create consolidated financial statements.

Currency Translation of RTC should push the main translation algorithm into HANA, so that performance can be guaranteed when running on huge amount of data. Besides, CT of RTC should be in a simple and clear philosophy that further enhancement and hack would be possible. The overall design diagram can be described like this:

The whole component can be divided into 2 parts: one is customization, which includes some configuration UIs that allow users easily define their translation parameters; The other is the runtime program flow, which is realized mainly using AMDP. The green boxes are main execution points(API) which can be invoked by upper applications. 

#+Caption: Currency Translation Overview
[[../image/CurrencyTranslation.png]]  

As HANA SQLscript supports little dynamic programming. The only way to realize currency translation through customization is to dynamically generate ADMP methods. How these artifacts are generated can be found in following diagram.

#+Caption: Translation Method AMDP Class
[[../image/FieldsMappingAndDataFlowDuringCT.png]]

**** Translation Method
A Translation Method is a collection of Translation Entries, Rounding Entries, and other settings, which are used to determine different exchange rates and algorithms for translating FS items, and how translation differences are posted. Translation Methods are model depandent. You can define multiple Translation Methods under a model, however, for each consolidation entity you specify a single Translation Method.  

Each Translation Method will generate an ABAP class which contains AMDP methods when it is activated. Those AMDP methods encapsulte translation logic and the corresponding master data to be a consistent state. The upper level applications invoke the AMDP methods to execute the translation process that are all pushed down to HANA layer. 

**** Translation Entry
A Translation Entry contains an Exchange Rate Indicator(Type), a selection of FS items or G/L Accounts, a translation key that maps to a tranlsation algorithm, Source/Target Amount Fields, and a pair of differential items with subitems. 

You use a Translation Entry to answer following questions: 
1. What FS items?
2. What exchange rate is used?
3. What translation algorithm is used, cumulative or period?
4. Translate which source amount field and to which target field?
5. Which account objects and subitems will be used to record the translation difference?  

You boundle multiple Translation Entries in a Translation Method so that it covers all the FS items in the group chart of accounts. Each translation entry deal with different selection of accounts(or subitems) so that there is no overlaps among each other. For those not included accounts will be translated using the reference exchange rate.

**** Rounding Entry
After currency translation, there could be inaccuracies involved in rounding. Rounding Entries are used to check and round your data so that your financial statements are still balance. 

There are 3 rounding algorithms that I can give your following examples to map with:
1. Balance sheet total = 0 (checks if the assets are equal to liabilities and equity)
2. Total revenue + expense = annual net income
3. Amortization entries in the balance sheet + amortization entries in the income statement = 0

So you can assign 1 or 2 FS item Selections to a Rounding Entry, after aggregate the amounts based on the rounding algorithm you choose, you then record the rounding difference into the Differential Items. 

You can assign multiple rounding entries into a currency translation methods. Each entry will be compiled into an AMDP method. At runtime, there rounding entry AMDP methods are excuted sequentially. 

**** Exchange Rate Indicator
A Rate Indicator defines which exchange rate type is used for each translation entry. A rate indicator maps to a rate type in table =TCURV=. 
 
**** Selection
A Selection is used to add filter conditions on the fields of the consolidation view. The filter conditions are then compiled into a SQL WHERE clause, which can be applied during the running of currency transaltion. 

**** Translation Key
A Translation Key is a 2 characters long ID which is assigned to an AMDP method. The detail translation logic is implemented using SQL scripts in the AMDP method which is so-called translation algorithm. The translation algorithm AMDP methods have a well-defined signature so that they can be applied in any translation context. 

**** Source/Target Key Figure 
Currency translation is a function with input of a source amount and output a target translated amount. So you must allow user to set a source key figure as inputs, and a target key figure to store the translated amount. The source and target key figure must be exist as currency amount fields in the model's consolidation view.

**** Differential Items
The difference produced by translation entries will be recorded to the FS items and subitems that are configured as differential items. It is quite tricky in setting differential items. For example, if you post translation difference that occur in the balance sheet within the balance sheet, the balance sheet remains balanced. But if you post the balance-sheet translation differences to income statement items, both the balance sheet and the income statement are out of balance.

**** Translation Method AMDP Class
Translation Method Class is an AMDP class which is generated based on the customization of translation method. Before generation the codes, a check will be done. It first check if there are overlaps among the selections that are assigned to translation entries. Then it generates the AMDP class with following AMDP methods:
1. A main run method which invokes all the transaltion entry method;
2. Translation entry methods which correspond to each translation entry. In the translation entry method, it will the corresponding translation algorithm method, and then call the differential rows processing method. The output should be an ACDOCC-like internal table;
3. Differential rows processing methods which correspond to transaltion entries. It will genereate new rows with FS item and subitem configured in the differential items section.
4. The rounding methods are not decribed in the above diagram. But they definately exist. They correspond to rounding entries. Each rounding method could add rounding differential rows.
5. The posting method should be inherited from the super class as it is always fix. It checks if there is translated reuslt exists in the temp table, if not, call the main run method; Then it pass the translated results to the core posting interface. 

*** Major Building Blocks
Details of each building blocks of currency translation are explained:

**** Selection                                                 :Chang:Marvin:
A =Selection= is used to define additional filters on FS items(racct) and other characteristic fields(subitems) of =Cons Area CDS View=. 

There should be a customization UI to allow user to define a selection. 

#+Caption: Selection Customization UI
[[../image/SelectionUI.png]]

There are 2 types of =Selection=:
1. Type1 generates a selection CDS view;
2. Type2 doesn't generate a CDS view, but only saves the filter information.

Type1 selection is used in translation entry. It is not just adding some filter conditions, but also doing fields mapping from the =Cons Area CDS View= to table ACDOCC. The CDS view generation logic need to be developed using ABAP. It reads the meta data of the =Cons Area CDS View= and ACDOCC, then generates the CDS DDL string. The string looks like this:

#+CAPTION: Selection CDS DDL String
#+BEGIN_SRC sql
select company,
       gjahr,
       poper,
       pbukrs,
       racct,
       ttype,
       rhcur,
       rwcur as SourceCurrency,
       rkcur as TargetCurrency,
       hsl,
       wsl as SourceAmount, 
       ksl as TargetAmount,
       --rest fields of ACDOCC--
  from C_RTC_ACDOCA
 where racct is between '100000' and '101000'
   and ttype is between '100' and '200'
#+END_SRC

~There are existing APIs to allow ABAP generates CDS views. Transportation is also utilized in the set of APIs which allow the generated CDS views can be transported from DEV to QA, and to Product system. The demo ABAP program is: *WB_DDLS_API_EXAMPLE_PROG*. More details can be found in: https://wiki.wdf.sap.corp/wiki/display/TIPABAPVB/CDS+DDL+API+Description~

=Selection CDS View= should have the same fields with =Cons Area CDS View=.  =Cons. Area CDS View='s fileds should be the sub-set of ACDOCC's, or ACDOCC can not hold all the information that =Cons Area CDS View= has. The dis-projection from =Selection CDS View= to ACDOCC needs to map the existing fields, and add fix values or null values to those non-existing fields. The fields order should be same with ACDOCC.

Type2 selection is mainly used in rounding selection, which does filtering on internal tables during runtime. So it only converts the filters into a where condition string: "racct is between '100000' and '101000' and ttype is between '100' and '200'". 

**** Exchange Rate Indicator        :Chang:
Exchange Rate Indicator is mapped to exchange rate type. In EC-CS, you can also map multiple exchange rate types to one indicator, with validation period assigned to each type. 

The development could be a maintenance view of a mapping table. User can define multiple indicators. The Exchange Rate Type, Translation Ratios, and Exchange Rates maintenance views can be re-used.  

Here, it is good to understand TCUR* tables. Understand how CONVERT_CURRENCY find the exchange rate through exchange rate type. 

**** Translation Method Customization                                 :Chang:
Translation method contains a list of currency translation entries and rounding entries. In runtime, the entries can be executed parallel. But rounding entries must be executed after all translation entries finsihed.

A =Translation Entry= contains a Selection CDS View, an Exchange Rate Indicator. a translation key, a pair of differential items(with subitems if configured), and some other settings. In other words, it contains all the context and control parameters that a translation algorithm needs.

A =Rounding Entry= contains one or two rounding areas, and a pair of rounding differences items. Rounding algorithm can be fixed into 3 types:
1. If one rounding area is defined, you can only do rounding check by sum all the amount to see if the result is 0.
2. If two rounding areas are defended, you can check whether the sum of each area's amount is equal, or
3. you add the 2 summarized amount to see if it equals 0.

User is allowed to defined multiple translation methods, but only one method is allowed to assign to a single consolidation unit. You achieve this during the consolidation task definition. A task, for example, currency translation can contains multiple translation methods. Each method is then assigned to a unit in the task configuration. 

**** Translation Method Runtime API       :Steve:
An AMDP method that runs all the translation entries and rounding entries defined in the translation method customization. Unions all the return lists of each entry run, and outputs the result by different ways (to CDS views, to posting API, or exposed by services). Details can be found in the following diagram:

#+Caption: Currency Translation Method Run 
[[../image/CT_MethodRun.png]]  

The program will first get all the translation entries and rounding entries saved in a customization table. Then loop the entries, pass the parameters of each entry to the method =RunSingleEntryTranslation=. The =RunSingleEntryTranslation= method check the translation key configured and apply the correct translation algorithm. 

For example, if one translation entry is configured with currency translation key '1', then algorithm =RunTranslationKey1= is applied. Each translation algorithm is again an AMDP method which are pre-developed and has a well-defined interface. 

After all entries finished, the results of each algorithm are union-ed into one list. The list contains all the items of a translated financial statement. If rounding entries are defined, rounding algorithms are then applied and rounding difference items are added. 

The final result can then be consumed by =OnTheFly-Reporting= and =CurrencyTranslationPost=. It is also expected that the result can be consumed by other processes.   

**** Translation Algorithms               :Marvin:Jane:
A translation algorithm deal with a single translation area, with one exchange rate indicator, and one pair of differential items. In the translation area, all the FS items apply the same translation logic with the same exchange rate, and records difference to the same differential items. 

A translation algorithm maps to a translation key, which is a character value(from '0' to 'Z') used during customizing. Or you can say: A translation key is a unique name of a translation algorithm. The number of translation keys can be enumerated in finance consolidation. In EC-CS, only 11 keys are delivered(0~A). The use of the algorithms can also be combined with input parameters, which then can fulfill various practical use cases. 

There comes the question of why RTC uses the concept =Translation Key=. As it is such a redundant concept only produces confusion. Because fundamentally, translation algorithm is simple. It finds the correct exchange rate, then multiply it with the source amount to get the target amount, and process the difference if different rates are used to different sets of FS items. User can then just use a multi-dimensional configuration UI to set dimensional parameters to get a dedicate translation algorithm.

Answer to that question is that it is difficult to generate an algorithm based on configuration. For most cases, you can use exchange rate tables to get the right rate, but other cases require you get an already translated amount in somewhere (access other tables). And the =Source Amount= is also tricky, sometimes it is just a field in your table; sometimes, it is a cumulative value. To achieve this, you must need dynamic programing. Either you write a program that is powerful enough to recognize all the customization combinations, or the algorithm program is generated automatically after customizing. ABAP maybe can afford it, but not HANA SQL scripts. HANA SQL scripts is a declarative language, dynamic programing for SQL scripts is somehow not effective. And it always has drawbacks on performance. 

With the =Translation Keys=, the limit number of them can be hard-coded in the main program. According to the customization, difference algorithm is applied to different translation entries which are flagged with a dedicate translation key. For end-users, they must have some time to get familiar with these keys, and the logic behind them. 

~Not sure if EC-CS has the same reason for its 11 translation keys!~

Detail logic of a generic translation algorithm can be described as in the following diagram:

#+Caption: Currency Translation Algorithm for a Single Set 
[[../image/CT_SingleSetAlgorithm.png]]  

Currency Translation Area is derived from consolidation area and FS item set. Translation area provides source amount, source currency key, and target currency key to the HANA function CONVERT_CURRENCY. 

Exchange Rate Indicator tells CONVERT_CURRENCY which conversion type and reference data should be used. According to all this information, the HANA function can get the translated result. 

~The acutal exchange rate is not shown here, that would be a problem if user want see the exact rate used for the translation. The workround solution is to use another function to get the rate seperately~

CONVERT_CURRENCY is called twice each at FS item line. One to get the reference target amount 1, and the other is for the specific target amount 2. Translation difference is then calculated by substarcting them (Target Amount 2 - Target Amount 1). This is the intial translation result noted as =Internal_Table1=. For some processes, the reuslt is already enough. 

As for financial consolidation, the translated results should be converted to financial statements format. Thus, the difference should be recorded to a differential item. The final represtation form of =Internal_Table2= is required. Differential items are configurated in the translation entries.    

**** Subitem Assignment
Subitem assignment can be used to further narrow the consolidation area by adding additional filters other than FS item SET. 

**** On-The-Fly Translation                :Jane:                              
Given an FSV, Translation procedures (cumulative and period), Rate Indicators, Differential FS Items, I could run currency translation on-the-fly. 

An AMDP function will be developed which calls HANA function =CONVERT_CURRENCY= based on data and logic provided above. The output of AMDP should be an FSV-like hierarchy structure which again is mapped to an CDS view. I can use AO to view the translated result. Following outputs are expected:
1. Code is clean and neat.
2. Could be no input parameters, but the output should a FSV-like table.
3. Must have 2 different translation procedures: cumulative and period.
4. Must have following rate indicators: spot rate, current rate, average rate, and history rate.
5. Different translation procedures and rate indicators should be applied to different FS item sets.
6. The translation differences should generate additional lines and assigned to different differential FS items.
7. The output Balance Sheet and Income Statement should be correct, and can be viewed using AO.
8. Error handling should be processed in an elegant way.
9. Trace back to original document line. 

Need Carol's help to provide an FSV and related FS items. All other stuff can be mocked. 

**** Final Translation (with posting)    
Based on the =Translation on-the-fly=, I can post the translated results to ACDOCC. I can build CDS views on ACDOCC so that the final translation result can be viewed through reporting tools. 

According to different translation procedures, some amount could be read from ACDOCA, so it could be a union of ACDOCA and ACDOCC to represent the final translated result.

The posting API should ready at that time.

**** Provisional Translation

**** Rounding

**** Audit Trail
  

*** Design Challenges resulting from Non-Functional Requirements
*** Vocabulary Modeling                                               
*** User Interface                                                    
*** Interfaces/Communication Handling                                
*** Used Components and Frameworks
| Name | Description                  | Software Component | Implications |
|------+------------------------------+--------------------+--------------|
| HRF  | HANA Rule Framework          |                    |              |
| BRF+ | Business Rule Framework plus |                    |              |

*** Package/Development Component Concept
*** New Coupling of Software Components
| SWC | Depends on SWC | Description of coupling and effects |
|-----+----------------+-------------------------------------|
|     |                |                                     |
*** Upgrade/Migration/Compatibility
*** TCO Considerations
*** Compliance to Standards and Guidelines
**** Applied Architecture/Design Guidelines
- [[https://wiki.wdf.sap.corp/wiki/display/SimplSuite/Architecture][S4H Architecture Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/SuiteCDS/VDM+CDS+Development+Guideline][CDS Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/fioritech/Development+Guideline+Portal][Fiori Overall Guideline]]
- [[https://ux.wdf.sap.corp/fiori-design/foundation/get-started/][Firoi Design Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/sFIN+UX+Fiori+Guidelines][sFIN UX Fiori Guideline]]

**** Approved deviations
| <8>      | <l40>                                    | <l20>                |
| Rule ID  | Deviation                                | Approval Status      |
|----------+------------------------------------------+----------------------|
| C-BRMS-2 | HRF must not be used directly but through the BRFplus encapsulation only. In case BRFplus encapsulation is not updated or enough, we may need bypass BRF+ APIs. |                      |


** Design Details Documentation
*** Database Design
*** Performance Test
#+BEGIN_SRC sql
CALL "SAPQE6"."/RTCART/VINCE1TM100=>CORE_AMDP"(
IV_ER_DATE => '20151231',
IV_TGT_CUR => 'USD',
IV_CONS_VERID => '00002',
IV_DOCTYPE => '01',
IV_FISCYEAR => '2015',
IV_FISCPER => '012',
IV_ENTITY => 'C1000',
IV_ER_TYPE_1 => '1001',
IV_ER_TYPE_2 => '1002',
--IV_ER_TYPE_3 => '1003',
IV_LCL_CUR => 'EUR',
IV_TIMESTAMP => 20161231101010,
IV_USER_NAME => 'ZHANGVIN',
IV_CONS_LEDGER => 'CL',
IV_VARIANT => '200',
IV_BPC_CATG => 'PRELIM',
IV_RTC_CATG => 'PREL',
IV_APPLY_ANI => '',
IV_CONS_ACCT_1 => '',
IV_CONS_ACCT_2 => '',
IV_TRANS_TYPE_1 => '',
IV_TRANS_TYPE_2 => '',
ET_ACDOCC => ?
);
#+END_SRC

*** Complex Algorithms and Applied Patterns
*** Design Alternatives and Trade-Offs
*** Guide to the Implementation


** Appendix
*** Glossary
| Term | Abbreviation | Definition |
|------+--------------+------------|
|      |              |            |
*** Customizing
*** Supportability Considerations
*** Error Analysis
**** Debugging
**** Logging and Tracing
**** Other Error Analysis Tools
*** Other
