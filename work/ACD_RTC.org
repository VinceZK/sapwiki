#+STARTUP: align
#+OPTIONS: toc:1
#+PAGEID: 1774869651
#+TITLE: ACD of Real-time Consolidation
** Abstract
Real-time Consolidation(RTC in short) is SAP's next generation financial consolidation system, which is bulit on S4HANA platform and leverages HANA's in-memory technology. 

Unlike traditional standalone consolidation applications, RTC embeds consolidation logic into a centralized financial system. The centralized system we call it Central Finance(CF in short), which makes financial operation, analysis, and planning happens in a same environment, and unifies financial master data and rules across all the local subsidiaries. 

Based on the Central Finance, RTC makes real-time financial consolidation possible in follwoing ways:
1. Local journals are synchronized into CF in a real-time fasion, so data mapping and consolidation rules will aslo be applied real-timely at journal level.
2. No additional data copy and batch job is needed when running consolidation statements and reports. Consolidated results can be made on-the-fly directly based on journal items. 
3. Consolidate results can be traced back to orginal transactions.
4. Local financial close, corrections, and updates can be instancely noticed.
5. Planning and simulation can be made on consolidated results, and vice veras. 

The high level consolidation building blocks (backlogs) includes:
- Data modelling based on multi-dimension database view.
- Data collection and validation.
- Inter-company reconciliation.
- Currency translation.
- Consolidation and elimination.
- Reporting.
- Collaborations.

*** Administrative Data
| Attribute        | Value                     |
|------------------+---------------------------|
| ACD              | Real-time Consolidation   |
| Related Use Case | link to Jira              |
| Responsible      | Vincent Zhang             |
| Target Readiness | Incubation                |
| Status           | in progress               |
| Version          | 0.1(Draft Version)        |
| Version History  | link to wiki History page |

** Background and Context
Financial consolidation systems are the "engine room" of the corporate finance department, enabling companies of all sizes to comply with regulatory reporting requirements, company law and global accounting standards as well satisfy management's need for periodic management reporting.

But all is not well with standalone consolidation applications that were developed since 1990's. Among them, SAP already has three: BPC, BCS, and EC-CS. Those consolidation solutions are still commonplace in some of the world's largest multinationals. According to one recent research, 47 percent of companies have made substantial investments in their financial close, filling, and reporting. Yet, despite the considerable sums of money invested in the process, management teams across the globe remain dissatisfied with the quality and timeliness of management information.

With the emergence of S4HANA and the concept of central finance, we can build an embedded financial consolidation solution based on them. As financial data is already centralized, it is not necessary to replicate it again to a standalone consolidation system. Meanwhile, RTC can also gain more from the future S4HANA Cloud platform, because of the highly distributed nature of the financial close process. It can help to standardlize and harmonize the data collection, imporve collaborations, and significantly reduce reporting delay between local operational systems and the corporate consolidation.

*** Number of Customers expected with release now in development 
25+ customers have explicitly stated high interest on Real-time Consolidation.

*** Underlying Platform/Application Server
RTC is built on S4HANA, both On-Premise and Cloud, with On-Premise version delivering first. 

*** Product Type
Financial analytical application, with data write-back and simulation features.

*** Delivery
| Delivery Artifacts             | Comments                                               |
|--------------------------------+--------------------------------------------------------|
| ABAP & AMDP                    | Main consolidation logic                               |
| HRF/BRF+ rules                 | Consolidation, elimination, and validation rules       |
| HANA Calculation View          | Not compliant with S4HANA Guideline, but needed by BPC |
| BW info-provider & info-object | Not compliant with S4HANA Guideline, but needed by BPC |
| CDS View                       | Reporting and Analytics models                         |
| Fiori Apps                     | UI for console, reporting, and analysis                |

*** Business Case
Consolidation is discussed in 80 % of the cases of which we have customer discussions on CF. CF carries all the financial data from the entire system landscape. It is not understood by customers why they need to load the data from somewhere else for the consolidation. Group reporting on CF has limited informative value without consolidation.CF is supplied in real-time. Necessary corrections in local close are updated real-timely. There is no need for the waiting of ETL.

*** Main Use Cases / Functional Scope

**** Year-End close (pre)consolidation
Traditional consolidation takes days. It needs to extract data from group's sub financial systems, which needs the sub systems finish the closing first. Then transform the data, and load it to the consolidation system. The overall closing and ETL process are very time-consuming. No bother to mention if corrections are needed, the entire process could be re-processed. Corporation stakeholders suffers waiting too long a period for consolidated statements. While Real-time Consolidation can perfectly solve the problem. RTC is based on Central Finance which acts as a central repository for all the financial data, it synchronizes journals from sub systems in a real-time fashion. RTC does consolidations directly based on the central journal repository. There is no additional data replicas needed, Consolidation experts can do pre-consolidations at anytime, without notifying sub financial system to close first.Thus he/she can find problems before year-end closing consolidation actually happens. This permits corrections can be made in sub systems before-hand. Besides, consolidation rules can even be applied in the document posting processes, which guarantee efficient and effective financial controls.

**** Acquisition & Re-organization 
When a new business entity is added/removed from the organization, management teams want see the simulated consolidated results immediately to support decision.RTC can well cope this kind of requirements. 
 
*** List all Required SAP Products/Product Versions to Support the Main Use Cases
SFIN2.0, Central Finance 1.0, BPC //To-do: versions should be checked

*** Relevant Product Line Architecture Guideline
- [[https://wiki.wdf.sap.corp/wiki/display/SimplSuite/Architecture][S4H Architecture Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/SuiteCDS/VDM+CDS+Development+Guideline][CDS Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/fioritech/Development+Guideline+Portal][Fiori Overall Guideline]]
- [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/sFIN+UX+Fiori+Guidelines][sFIN UX Fiori Guideline]]

*** Deviations from Product Line Architecture and Product Experience Requirements
| <10>       | <l50>                                              | <l20>                |
| Rule ID    | Deviation                                          | Approval Status      |
|------------+----------------------------------------------------+----------------------|
| OC-01      | due to BPC's architecture we have to use CDS       | Approved by Chief Arch Christian |

** Boundary Conditions
Real-time Consolidation(RTC in short) runs mainly based on Central Finance(CF in short), which can synchronize journals from all the subsidiary finance systems in a real-time fashion. CF realizes the so-called "Transactional BW"(through SLT and MDG), which breaks through the world of OLTP and OLAP. Compared to traditional ETL-based BW system, CF can significantly improve the raw data quality and reduce the delay of reporting. 
  
In other case, corporations may already have their subsidiaries using a centralized finance system (based on Simple Finance). Thus the data synchronization is not necessary. RTC then can be run directly on Simple Finance without the CF.
 
In both cases, RTC requires a centralized finance system that already have all the local journals consolidated in a central repository. It is under that assumption can RTC do further financial consolidation models and processes. RTC will also leverage(or reuse) SAP existing consolidation tools, like: BPC, BCS, and EC-CS. In it's initial releases, RTC will consider BPC as the main consolidation front-end.

*** Quality Attribute Scenarios
1. Data Collection
| <30>                           | <50>                                               |
| *Who initiates activity (interactor)?* | BPC consolidation front-end tools                  |
| *Addressed part of the system which executes initiated activity (executor)?* | BPC data collection console                        |
| *How does the interaction between initiator and executor take place?* | BPC data collection tool will valid if data is ready for consolidation. It will check validation rules, and allow user to do collections. |
| *Under which conditions / environment does the interaction take place?* | Mostly, during month-end or year-end closing, the group consolidation operator checks whether the data provided by lock subsidiaries is ready for consolidation. |
| *Result of activity*           | Data is correct,Performance is good                |
| *KPI*                          | n line items in xx ms                              |

*** Product Standards
Ensure compliance with product standards. To do so, go through the product standard requirements of categor "architecture & technology" in the Product Standard Compliance tool (PSC) before you start defining your architecture and describe in this section how product standard requirements influence the architecture to be defined.

Add a link to the PS planning in PSC or describe deviations within this chapter.

For further information on product standards, see [[https://portal.wdf.sap.corp/wcm/ROLES://portal_content/cp/roles/cto/DevelopmentResources/Idea-To-Market/Infocenters/WS%2520Office%2520of%2520the%2520CTO/Development%2520Resources/I2M/I2M%2520Product%2520Standards][go/productstandards]]

*** Technology Descisions
Define which technologies / frameworks are used in which architecture area and for specific topics:

| Architecture                           | Technologies to be Used                              |
|----------------------------------------+------------------------------------------------------|
| Clients                                | BPC, SFIN applications                               |
| Presentation Layer /  User Interface   | BPC WebUI(UI5), Analytic Office, Fiori, SAPGUI       |
| Business Logic Layer                   | ABAP, AMDP, CDS, Calculation View                    |
| Analytics / Reporting                  | BW info-providers, BEx Query, CDS view               |
| Integration Middle-ware                | Central Finance (based on SLT and MDG)               |
| Business Process Management / Workflow | HRF/BRF+                                             |
| Data Persistency                       | HANA Relational Database                             |
| Development Environment                | ABAP ADT, HANA Studio, BW Modeling tool,Fiori WebIDE |
| Life-cycle Management                  | ABAP CTS, Fiori CI                                   |
| tbd                                    |                                                      |

*** Reuse
List the reuse components (engines, objects, intrinsic/common services, 3rd party components) which have to be used for this development program/project/topic/integration scenario. Mention reuse components which explicitly must not be used within this development program.

General Principles for Reuse
- Take reuse into account in every architecture definition. Well planned reuse has a big positive influence on stability, quality, common look and feel, TCO and TCD of the complete application.
- But consider the costs in relationship to the benefits when reusing a function or feature from others. In especially check if the prerequisites (system, hardware, licenses, implementation and customizing efforts, etc) which are required to use the reuse functions are acceptable for customers. If you answer one of the following questions with yes please consult with your local reuse expert
- Does the used service or functionality force the customer to install an additional system?
- Does the usage of a service or functionality force the customer to implement and customize a new application or technology hub?
- Does the new framework or functionality which is planned exist in a similar version in other areas (Examples are rules engines, business object frameworks, master data, ...)?

Recommendations

If you want to develop a new framework or functionality which could be of interest for other groups too, please check whether synergies would be possible.

The following reuse components must/should/must not be used within this development:

| <15>            | <15>            | <10>       | <10>       | <25>                      |
| Reuse Component | Owned by        | Maintenance Guaranteed? | Usage      | Remark / explanation      |
|-----------------+-----------------+------------+------------+---------------------------|
| HRF 1.0         | HRF team        | Yes        | must       | HANA Rule Framework must be used to build RTC's validation engine. The validation engine should permit both high performance and easy rule maintenance for LOB users. RTC use HRF to push rule validation down to HANA level. |
| BRF+ 2.0        | BRF team        | Yes        | must       | BRF+ must be used for the reason of the compliance with S4HANA guideline. HRF cannot be used directly, and must indirectly through BRF+. Compared to HRF, BRF+ is running on ABAP level which could not permits good performance on mass data processing. RTC should combine the advantages of HRF and BRF+. |
| CDS 1.0         | CDS team        | Yes        | must       | Use CDS for modeling when ever possible. CDS is SAP's future business script targets to Cloud. Although it has function limitation and not mature enough, but we should use it as much as possible. |
| Fiori 1.0       | Fiori team      | Yes        | must       | Fiori must be used for all the UI. Fiori is the future S4HANA UI that targets to Cloud. RTC must not use any other Web UI framework, or develop its own framework. Traditional SAPGUI(including HTML GUI) is only allowed for intermediate purpose. |
| IBPF info-objects | IBPF team       | Yes        | must       | IBPF developed a lot of finance planning BW info-objects. RTC can re-used them, or do some extension whenever necessary. Beside, RTC and IBPF should combine efforts so that Consolidation and Planning can happen together. |
| Design Studio   | EPM team        | Yes        | must       | Design Studio is used to create queries. The query can be opened via various analysis tools, like: AO, Fiori Apps, and so on. It is appointed by S4HANA guideline for the only query builder, and will replace BEx in future. |
| BEx Query       | BW team         | Yes        | should     | BEx query should only be used when Design Studio is not possible, or for some test purpose. |
| HANA Calculation View | HANA team       | Yes        | should     | HANA Calculation view should be only used for the purpose to integrated with BPC. Other cases should use CDS instead. |
| BW              | BW team         | Yes        | should     | BW cube should only be used for the purpose to integrated with BPC. RTC should avoid using BW cubes as it violate with S4HANA guideline, and it is not the future. |
| BPC 10.1        | BPC team        | Yes        | should     | BPC should be used when ever possible. BPC is the only legal financial consolidation and planning system in SAP. RTC should provide the possibility to allow BPC run on CF seamlessly. In some cases if BPC cannot be used, RTC should also provide some core functionalities that can propose values for customers. |
| CF 1.0          | CF Wdf team     | Yes        | should     | CF should be used when customer what its de-centralized finance systems to be somehow centralized. If a totally centralized finance system is not possible, than establishing a centralized journal repository for group reporting and analysis can be realized by CF. RTC then can use the CF to form it's data basis. |
| EC-CS           | IMS team        | Yes        | should     | EC-CS is SAP's legacy ERP embedded consolidation application. EC-CS share a lot common features and ideas with RTC, like do consolidation directly on line items. RTC should research, reuse, and adopt EC-CS's functionalities whenever possible. |
| BCS             | IMS team        | Yes        | should     | BCS is the legacy consolidation application based on BW that some large corporation clients are still in-use. BCS has more functionalities than BPC, but with old-style UIs and too strict, somehow, too proficient, that not all the customers like it. A lot of BCS features and functionalities could be researched, reused, and adopt to RTC. |

*** Cross-Release Compatibility
Describe boundary conditions to ensure smooth upgrade / migration.

General Principles for Cross-Release Compatibility

A new release of an SAP application can always be integrated with any release of any other SAP application that is still in mainstream and extended maintenance. After an upgrade of an SAP application, all previously used scenarios are still available.

Release Synchronization schema to be followed (Details see[[https://portal.wdf.sap.corp/wcm/ROLES://portal_content/cp/roles/cto/DevelopmentResources/ReleaseStrategyTransparency/Infocenters/WS%2520PTG/PTG/Operations%2520%2526%2520Program%2520Office/Release%2520Management][/go/releasemanagement]])

*** Other External Forces / Constraints and Assumptions
Describe other external forces, constraints and assumptions, which influence or restrict your architecture. This could also be resource, skillset and timeline constraints, etc.

Real-time Consolidation highly depends on Central Finance. CF provides the data bases for the RTC to consume. The successfully implementation of CF puts directly impacts on RTC.

BPC is the only legal consolidation and planning product in SAP. RTC may be bundled with BPC for sales and marketing. If BPC

** Architecture Definition
The architecture chapter shall describe the main building blocks of the architecture and their relationships. Depict also how the building blocks are integrated with building blocks outside the program/topic. This section can be structured into sub-chapters.

For conceptual and technical architecture diagrams use Technical Architecture Modeling (TAM): http://ency.wdf.sap.corp:1080/Modeling/Standard/. Provide at least one overview picture of the topic (TAM block/component diagram) and an according description. You are welcome to provide more diagrams according to TAM. 

*** Architecture Context and Overview
Describe how the software developed within this project relates to existing SAP software,
Provide an architecture overview diagram which depicts all major component and their relationships. Describe the overall architecture concept and explain the role of each component.

We recommend to describe the architecture according to the following sequence
First, explain the concepts, on which the architecture is based. This may be business concepts, technical concepts or patterns. ARIS diagrams block diagrams, or entity-relationship diagrams may be useful for visualization.

Second, give the component view of your architecture. What are the building blocks and how do they relate to each other. Include a block diagram.

Third, describe behavior of the system/components (dynamic view). You may use an activity diagram to visualize it.

*** Main Architecture Challenges and Decisions
**** Architecture Challenges: title
Explain the architecture challenge which can be a quality to be ensured by the architecture or restrictive boundary conditions

*Decision*: We have to use HANA calculation View.

*By*: Christian

*Date*: <2015-11-18 Wed>

*Description*: balabala

*** Integration with other Systems
Depict how the software to be developed communicates with other applications and systems. Include a block diagram illustrating the integration.

**** Public APIs and Contracts
List all public APIs/enterprise services which are offered, be it newly created API or changes on existing APIs
| Name of API/Contract | Type                          | Changed/New | Description |
|----------------------+-------------------------------+-------------+-------------|
|                      | sync/async web services, RFC, |             |             |

*** Security 
Describe how the architecture protects the software against attacks or misuse.

To do so, define how communication channels (protocol, data, ...) are protected. Describe how authentication, authorization and logging are performed. Consider architecture requirements pertaining to confidentiality, integrity and availability. 

*** Deployment and Operations
It is recommended to work with the local Technical Component and Delivery Architecture (TCDA) team on defining deployment and operations architecture. Contact is the "Delivery Architecture Engineer" maintained in [[https://ifp.wdf.sap.corp/sap(bD1lbiZjPTAwMSZpPTEmcz1TSUQlM2FBTk9OJTNhcHdkZjU3ODJfSUZQXzAxJTNhWEhRWUJUMFlnaXNneEZlWWZTemIwR1FhWnZxaXotY2lkX1Z3TUF0Zy1BVFQ=)/bc/bsp/sap/zpr/default.htm][program repository]] entry of your program.

**** Deployed Component Structure and Deployment Options
Show all interdependencies of (groups of) software components using a package diagram (TAM). Assign the components to software layers, for example see: https://wiki.wdf.sap.corp/display/archGov/Software+Layers

Describe software component structure, package structure and their deployment options. Deployment options describe the different possibilities how the software components can be distributed across different systems. Indicate cross-component communication. Mention explicitly, if there are new dependencies between software components.

Describe deployment unit and process component structure if relevant.

**** System Landscape
Describe typical system landscape required to run the software developed within this program productive at a customer site. Show how the main deployable building blocks are distributed within that landscape. Determine which landscape components are mandatory and which are optional to run the software

**** Operation Concept
Describe how the planned software is operated and estimate the impact on TCO. This includes a rough description of complexity of installation, configuration, update, monitoring, and troubleshooting. Explain also how easy product and landscape optimization can be done during product lifecycle (such as scalability and high availability).

In case TCO is high, explain a roadmap how simplification in next versions can be done (for example from complexity hiding to complexity reduction).

*** Testing
Think about the test approach, especially if you enter new technology areas where the existing test tools cannot be used or where the existing test tools need to be enhanced.

*** Architecture Details (Further Refinement)
Use further chapters to refine the architecture and describe specific topics.

*** Architecture Risks
Explain your view on architecture-related risks and give hints about potential upcoming problems. Risks can arise for example from changes in the scope, from work-arounds necessary, from dependencies on other components, or from immature technologies/concepts. Fill in the table for each risk.

**** Risk: title
| <15>            | <60>                                                         |
| Description     | Example: To improve performance a cache will be implemented. However the cache only shows effect for objects with more than 1000 attributes. |
| Impact(for customer) | Example: customers see no effect when using cache with objects with less than 1000 attributes |
| Impact Rating   | Impact Rating                                                |
| Risk Probability | Low/High/Very High                                           |
| Mitigation Activity | Example: cache can be activated/de-activated. In addition describe in documentation when cache is useful and when not. |
| Responsible Person | Name of person responsible for risk mitigation activity      |
| Due Date        | Due date for mitigation                                      |

*** Planned Design Documents
Here the sprint teams can list the software design documents (SDD), which will  be created in order to implement the architecture. The list can also be created over time.

** Glossary
Add definitions of terms which are relevant for understanding the document to the glossary. As alternative add the terms to the [[https://wiki.wdf.sap.corp/wiki/display/ArGlossary/Contribute+to+SAP%2527s+Architecturepedia][architecture glossary in the Wiki]]. 
