#+PAGEID: 1943176556
#+VERSION: 17
#+STARTUP: align
#+OPTIONS: toc:2
#+TITLE: [[https://wiki.wdf.sap.corp/wiki/pages/viewpage.action?pageId=1943176556][HDI Migration for RTC 1709]]

** General Information
*** Stakeholders and Roles
| Role                  | Name               |
|-----------------------+--------------------|
| Author(s)             | Vincent Zhang      |
| Architect             | Vincent Zhang      |
| Product Owner         | Shi Ying           |
| Information Developer | Zou Grace          |
| Quality Responsible   | Yao Cen            |
| Developers            | Huang Jin, William |

*** References
| <25>                      |                  |          | <30>                           |
| Document Title            | Date             | Link     | Comments                       |
|---------------------------+------------------+----------+--------------------------------|
| Consolidation View        | <2017-12-15 Fri> | [[https://wiki.wdf.sap.corp/wiki/display/ERPFINDEV/SDD-Consolidation+Views][sapwiki]]  | Consolidation views are CDS views and HANA calculation views generated by the modeling tool for different consolidation purposes. |
| ZDM Architecture & technical procedure | <2017-12-15 Fri> | [[https://wiki.wdf.sap.corp/wiki/pages/viewpage.action?pageId=1409024951][sapwiki]]  | Zero Downtime Option (ZDO) is an option of SUM to run an upgrade in parallel to the productive use. The upgrade runs separate from the bridge (productive use). There are only minor restrictions on the bridge. After the upgrade the bridge must be shutdown to push end-users to the target release. |
| HDI                       | <2017-12-27 Wed> | [[https://blogs.sap.com/2015/12/08/sap-hana-sps-11-new-developer-features-hdi/][sdn blog]] | HDI (HANA Deployment Infrastructure) is a service layer of the SAP HANA database that simplifies the deployment of HANA database artifacts by providing a declarative approach for defining database objects and ensuring a consistent deployment into the database based on a transactional all-or-nothing deployment model and implicit dependency management. |

** Design
Zero downtime upgrade requires the switching of data access, so that the actual (old) and the upgraded (new) database instances could be in sync during the upgrade. The upgrade process must control the usage of the database schema. That means, no hard-coded access to any database schema (_SYS_BIC) is possible anymore.

As Real-time Consolidation 1709, we deliver and generate HANA calculation views which resides in schema _SYS_BIC. Now, under the new HDI concept for ZDM, we need to migrate all our HANA calculation views(both static and generated) to HDI framework. 

The overall to-be view architecture is depicted in following diagram:

#+Caption: TO-BE View Architecture
[[../image/HDI for RTC.png]]

1. There will be 4 containers involved:
   1. SAPS4H_RT contains static HANA Calculation views which are delivered by SAP.
   2. ZRTC_RT is customer created container that is used to hold foundation views. 
   3. ZRTC_RT_GEN hosts the generated HANA Calculation views by the modeling tool.
   4. SAPABAP is the default ABAP DB schema which holds all the CDS and AMDP.
2. The SAP delivered views are represented in blue blocks, the customer manually created views are represented in black blocks, and the generated views are represented in green blocks.
3. User is *not* encouraged to directly use RTC foundation views. They should copy them into a customer HDI container. This is because objects in SAPS4H_RT are not allowed to be changed. However, the standard delivered foundation views are only as templates for reference. In most cases, user needs to adjust the foundation views to send out the correct data. Of course, user can create his foundation views from scratch in the WebIDE.
4. Besides the foundation views, there are also auxiliary views, which are used to join with foundation view. Auxiliary views are standard delivered and doesn't allow to be changed by customers.
5. The generated views have similar fields as the foundation view. So the read API should be provided to read the fields from the foundation view. Please refer section "Read HDI view fields".
6. "Final C" and "Prelim C" read data from ACDOCC which is an ABAP table. The fields picked from ACDOCC are also based on the fields in the foundation view. So, when user defines the foundation view, he should make sure the projected fields are covered by ACDOCC.
7. Table Function A is generated to convert the HANA foundation view to CDS views. We can use SELECT ... FROM "$ABAP.SCHEMA( ZCONTAINER )"."tmp.fi.rtc.vince::RTC_C_FOUNDATION" to access.
8. The Union View is finally consumed by BW virtual info-provider.
9. The generated CDS views are consumed by ABAP codes. However, there is no technical prohibition on customized CDS views created on the generated ones. 

** Tasks

*** DONE Eliminate all the HANA Attribute views    :William:
Eliminate all HANA Attribute views. Migrate scripted-based view to HANA table functions. Test if BW virtual info-objects can still access the migrated HDI views. 

*** DONE [#A] Migrate standard delivered HANA calc views to HDI   :William:
Migrate current(1709) delivered HANA calc views to HDI views and test through all the related BW objects. 
 
*** DONE [#A] Change the HANA calculation view generation API         :Jin:
Refer report ZKLEE_HDI_TEST in ER9.

Use report SCTS_HTA_DISPLAY_HDI_OBJECT to view the generated HDI objects' source

**** Read HDI view fields.
Method CL_RTC_DB_CONTROLLER=>FETCH_COLUMN_VIEW_PROJ_FIELDS need to be adjust to allow read data from the physical container. 
#+BEGIN_SRC abap
data lr_result        type ref to cl_sql_result_set.
data lr_fields        type ref to data.
data lv_col_obj_name  type string.
data lv_sql           type string.
data lv_value         type string.
data lt_fields        type string_table.
data lv_package       type rtc_package value 'sap.erp.sfin.rtc.gen'.
data lv_column_view_name type rtc_condv value 'RTC_C_FOUNDATIONA'.

data(lv_physical) = cl_cts_hta_hdi_container_api=>get_physical_container( 'ZDK_SFIN_VINCE' )."
lv_value = |{ lv_package }::{ lv_column_view_name }|.

lv_sql =  |SELECT VIEW_COLUMN_NAME | &&
          |  FROM "SYS"."CS_VIEW_COLUMNS" | &&
          | WHERE SCHEMA_NAME = { cl_abap_dyn_prg=>quote( lv_physical ) }| &&
          |   AND VIEW_NAME = { cl_abap_dyn_prg=>quote( lv_value ) } |.

try .
    "it will get the field list by active version of the column view
    lr_result = cl_sql_connection=>get_connection( )->create_statement( )->execute_query( lv_sql ).

    get reference of lt_fields into lr_fields.
    lr_result->set_param_table( lr_fields ).
    lr_result->next_package( ).
    lr_result->close( ).
    loop at lt_fields into data(lv_field).
      write:/ lv_field.
    endloop.
  catch cx_sql_exception into data(lo_sql_exp).
    write: lo_sql_exp->get_text( ).
    "empty rt_fields is enough
endtry.
#+END_SRC

**** +Read HDI view source+
Refer report SCTS_HTA_DISPLAY_HDI_OBJECT. 

#+BEGIN_SRC abap
DATA(lr_cont_api) = get_container_api( iv_container ).

lr_cont_api->read_deployed(
  EXPORTING
    it_paths       = VALUE #( ( path = iv_hdi_obj ) )
  IMPORTING
    ev_return_code = lv_rc
    ev_request_id  = lv_req_id
    et_messages    = lt_messages
    et_result      = lt_result ).
#+END_SRC

You use this API to read the XML source of the foundation views and copy them into a customer namespace. 

*This feature maybe not necessary*

*** DONE [#A] Table Function generation API                           :Jin:
Refer class  ZHDI_F500VINCE1 in ER9. 
#+BEGIN_SRC abap
METHOD CALL_A
  BY DATABASE FUNCTION FOR HDB LANGUAGE SQLSCRIPT
  OPTIONS READ-ONLY.
    RETURN
    SELECT
A.RCLNT,
cast ('VINCE1' as NVARCHAR(6)) as MODEL,
cast ('ACTUAL' as NVARCHAR(10)) as RTC_CATG,
cast ('' as NVARCHAR(4)) as ACCTP,
cast ('' as NVARCHAR(3)) as RVERS,
cast ('A' as NVARCHAR(10)) as SRC,
cast ('G_NONE' as NVARCHAR(20)) as RCONGR1,
cast ('INPUT' as NVARCHAR(20)) as AUDIT_TRA,
cast ('00' as NVARCHAR(2)) as PLEVL,
cast ('' as NVARCHAR(2)) as RTFLG,
B.ENTITY,
cast (COALESCE( C.ENTITY, 'NONE') as NVARCHAR(32)) as PENTITY,
D.FISCAL_YEAR_VARIANT as PERIV,
D.FISCAL_YEAR as RYEAR,
D.FISCAL_PERIOD as POPER,
D.FISCAL_YEAR_PERIOD as FISCYEARPER,
E.KKTPL as KTOPL,
E.RACCT,
cast ('LC' as NVARCHAR(5)) as CONS_CUR,
A.HSL as CONS_SL,
A.KTOPL as LKTOPL,
A.RACCT as LRACCT,
A.WSL,
A.HSL,
A.RCOMP,
cast (case A.RMVCT when '' then 'F15' else A.RMVCT end as NVARCHAR(3)) as RMVCT,
A.RWCUR,
A.RHCUR,
A.TIMESTAMP,
A.BUDAT,
A.RASSC,
A.RLDNR,
A.GJAHR,
A.BELNR,
A.RBUKRS
FROM "$ABAP.SCHEMA( ZRTC_RT )"."tmp.rtc::RTC_CG_FOUNDATIONA" as A
join "$ABAP.SCHEMA( ZRTC_RT )"."tmp.rtc::RTC_C_VINCE1_ENTITY"  as B
on a.RCOMP = b.RCOMP
left outer join "$ABAP.SCHEMA( ZRTC_RT )"."tmp.rtc::RTC_C_VINCE1_ENTITY" as C
on a.RASSC = c.RCOMP
join "$ABAP.SCHEMA( ZRTC_RT )"."tmp.rtc::RTC_C_VINCE1_FYVM" as D
on A.BUDAT = D.CALENDAR_DATE
join "$ABAP.SCHEMA( ZRTC_RT )"."tmp.rtc::RTC_C_VINCE1_FSIM" as E
on A.KTOPL = E.KTOPL
 and A.RACCT = E.SAKNR;
ENDMETHOD.
#+END_SRC

*** DONE [#A] Adjust RTCMD UI                                         :Jin:
As HDI displaces the HANA repository concept, there is no package concept, as well as calculation view or attribute view. You can regard HANA package as a name prefix in the HDI context, calculation view and attribute view are all concluded into HANA views. 

RTC cannot leverage the standard 2 HDI containers: SAPS4H_RT and SAPS4H_RT_GEN. This is because SAPS4H_RT is not allowed for any customer changes. So customers have to create 2 HDI containers: one for the manually created foundation views and the other for the generated views. So when creating a model, they have to assign the 2 HDI container names to the model (as illustrated bellow).

#+Caption: RTCMD Support HDI 
[[../image/HDI RTCMD2.png]]

Table ~RTC_MODEL~ needs to be enhanced with 2 additional fields: 1) HDIC_F for foundation views container, and 2)HDIC_G for the generated views. The 2 fields are mandatory for models that are checked with "Integrate with BPC".   

~HDI container is created using Tcode "SCTS_AMHC".~

#+Caption: RTCMD Support HDI 
[[../image/HDI RTCMD1.png]]

In the "Data Source" tab, when the model is for BPC integration, we allow user to assign "Foundation View Package" and "Calculation View Name". Now, in HDI, "Foundation View Package" should be changed to "View Prefix (Package)", and "Calculation View Name" should be changed to "HANA View Name". Bearing in mind, there is actually no "package" at all, it's just a name and its prefix of a HANA view, like "sap.erp.sfin.rtc::RTC_C_FOUNDATIONA". 

We reuse the search helps from BW component which are now also updated to support HDI container. However, the BW enhancement has some workarounds: they put the physical container name("ZGG_SFIN_01_9833" as illustrated above) just before the view prefix. So the search help is better to be enhanced to have HDIC_F's physical containers filtered. When the model is saved, only prefix name without the physical container names should be persisted. Physical container name can be retrieved from logical name with ~cl_cts_hta_hdi_container_api=>get_physical_container~.

#+Caption: RTCMD Support HDI 
[[../image/HDI RTCMD3.png]]

In the dialog box "Copy Data Category from Template", we need to remove the option "Copy to HANA Package". Users are allowed to create RTC models directly based on delivered foundation views, however, they will be told that in this case, they are not allowed to change the foundation views. The models created may only used as a demo or test purposes. 

We delivered 2 Data Category templates in the system table "RTC_DC_VIEW". It is not necessary to add HDI container to the delivered templates, as all the delivered HANA views are also stored in the container "SAPS4H_RT".

*** DONE [#A] Run an end-2-end test from customer perspective for the HDI migration :Vince:
As a customer, they need to create 2 HDI containers: one for the manually created foundation view, the other is for the generated HDI views. WebIDE is required for manually creating the foundation view, so how to set WebIDE will also go through. The process end is successfully generating consolidation views.

1. Create a HDI container(ZRTC_RT) for foundation views in ER9/500. The activation takes 5 minutes.
2. Create a HDI container(ZRTC_RT_GEN) for generated views in ER9/500
3. Create a HDI name prefix(tmp.rtc) in ZRTC_RT.
4. Create a foundation view on ACDOCA with graphic tool, refer RTC_CG_FOUNDATIONA.
5. Create a foundation view on ACDOCP with graphic tool, refer RTC_CG_FOUNDATIONP.
6. Create a calc view RTC_C_CONS_ACCT_M for acounts mapping, along with synonyms: SKA1 and T004.


*** DONE [#A] Migrate generated scripted view into generated graphic view :Vince:
The generated script views should be migrated to graphic views. The client handling is set to session client. Check the generated view example in "tmp.rtc__ZRTC_RT".
| Calc View               | Description                             |
|-------------------------+-----------------------------------------|
| RTC_C_VINCE1_BPCFINALA  | FINAL category view on foundation view  |
| RTC_C_VINCE1_BPCFINALC  | FINAL category view on ACDOCC           |
| RTC_C_VINCE1_BPCPRELIMA | PRELIM category view on foundation view |
| RTC_C_VINCE1_BPCPRELIMC | PRELIM category view on ACDOCC          |
| RTC_C_VINCE1_BPCUNION   | Union of all BPC category views         |
| RTC_C_VINCE1_C          | View on ACDOCC                          |
| RTC_C_CONS_ACCT_M       | FS item mapping view                    |
| RTC_C_VINCE1_ENTITY     | Consolidation Entity Master Data View   |
| RTC_C_VINCE1_FSIM       | FS item mapping view model specific     |
| RTC_C_VINCE1_FYVM       | Fiscal Year Variant Mapping View        |
| RTC_C_VINCE1_LRADRR     | Last Released or Approved DRR           |

**** Performance Test
Aggregation First vs Aggregation Last. *Aggregation Last maybe a better option*
| Context Paramters | Measures         | Agg First | Agg Last |
|-------------------+------------------+-----------+----------|
| C1011,PRELIM      | Compilation Time | 355.6ms   | 349.4ms  |
|                   | Execution        | 321.1ms   | 318.2ms  |
|                   | Memory           | 52.9mb    | 91.3mb   |
| C1011,FINAL       | Compilation Time | 384.9ms   | 436ms    |
|                   | Execution        | 351.8ms   | 345.6ms  |
|                   | Memory           | 60.2mb    | 63.4mb   |
| C1001,PRELIM      | Compilation Time | 267.4ms   | 341.1ms  |
|                   | Execution        | 281.1ms   | 273.5ms  |
|                   | Memory           | 16.7mb    | 21.7mb   |
| C1001,FINAL       | Compilation Time | 437.7ms   | 300.4ms  |
|                   | Execution        | 302.1ms   | 280.8ms  |
|                   | Memory           | 23.9mb    | 24.6mb   |

#+BEGIN_SRC sql
select * from "tmp.rtc::RTC_C_VINCE1_BPCFINALA_MC"('PLACEHOLDER' = ('$$client$$', '500'))
where entity = 'C1011'   
and fiscyearper = '2017001'  
and cons_cur = 'LC'  
and RACCT = '0011121101';  

select * from "tmp.rtc::RTC_C_VINCE1_BPCPRELIMA"('PLACEHOLDER' = ('$$client$$', '500'))
where entity = 'C1011'   
and fiscyearper = '2017001'  
and RACCT = '0011121101';

#+END_SRC
*** DONE [#A] Remove fixed client filtering and client number in the generated views :Vince:
Currently, all generated CDS views and Calc views have SAP Client number in their names. Besides, in the script, we also literally add client filtering on both where and join clauses. There are 2 reasons:
1. All the generated views are scripted views which don't support session client.
2. Make sure the generated artifacts are also client dependent. 

As now HDI prohibits the script view, we can have session client for all generated HANA calculation view. Thus, we should remove all the literal client handling in our generated scripts. Consequently, we should also remove the client from the names of the generated view. A drawback of having client number in names is that user cannot create Z CDS views on the generated CDS views. For example, in DEV, the model is created in client 100. One of the generated CDS view is /RTCART/500VINCE2_U. However, the model is transported to PRD system in client 800, then the generated CDS view's name is changed to /RTCART/800VINCE_U. If user created a Z CDS view on /RTCART/500VINCE2_U in DEV, then this Z CDS view cannot be transported to PRD.

All CDS views except table founctions should be annotated with:
#+BEGIN_SRC sql
@ClientHandling.type: #CLIENT_DEPENDENT 
@ClientHandling.algorithm: #SESSION_VARIABLE
#+END_SRC

For table functions, only annotated with:
#+BEGIN_SRC sql
@ClientHandling.type: #CLIENT_DEPENDENT 
#+END_SRC

Refer CDS views and table functions begin with "ZHDI_500VINCE1".

Refer following help on how to handle client for table functions:
https://help.sap.com/doc/abapdocu_751_index_htm/7.51/en-US/index.htm?file=abencds_func_client_handling.htm

ABAP reports need to be adjusted as the client number is removed. Use report RPR_ABAP_SOURCE_SCAN to scan. 
1. Classes begin with "CL_RTC_CDS_MD" which is used to generate CDS view
2. Utility method cl_rtc_comm_util=>get_view_name done
3. RTC_SELECTION_MIGRATION done
4. CL_RTC_CT_ART_ADAPTER=>GET_ABAP_CLASS_NAME  done
5. CL_RTC_HDB_CALC_BPC_C=>BUILD_COLUMNS  done
6. CL_RTC_IL_MODELING=>DELETE_CDS_VIEWS   done
7. CL_RTC_IL_MODELING=>DELETE_AMDP_CLASS  done
8. CL_RTC_IL_MODELING=>GENERATE_BRF  done
9. CL_RTC_IL_MODELING=>GET_VIEWNAME_SUFFIX done
10. FM: RTC_DUMMY_SELECTION_ON_V10 done
*** DONE [#A] Development adjustment on the currency translation and data release process. :Vince:
As the names of the consolidation views are changed, the affected consuming programs need to be adjusted. 
*** DONE [#B] Customer migration documentation and tool         :Vince:Jin:
Migrate existing 1709 model to HDI compatible. Check if there is standard migration tool to migrate static HANA calc views into container "SAPS4H_RT".

*** DONE [#B] Support Audit Trail in Foundation View
If in the foundation view, user already provide the field AUDIT_TRA, then during view generation, we will not add the field with fixed value 'INPUT'.

*** DONE [#C] Support Multiple Group Amounts in CT Mode Accounting?
In case the currency translation mode is set to "CT in G/L Accounting", the foundation view must at least contains 'HSL' and 'KSL'. If you have multiple group currencies, then you should map the group currency fields to 'KSL1', 'KSL2', and so on. The corresponding currency code field should also be 'RKCUR1','RKCUR2', and so on. Then this view is generated in this way:
#+Caption: CDS View to Convert Foundation View from Local to Group with Group Amount
#+BEGIN_SRC sql
create view /RTCART/500VINCE1_A 
as select ...
          '00'      as PLEVEL,
          ''        as RTFLG,
          A.RHCUR,
          A.RHCUR   as CONS_CUR,
          A.HSL     as HSL,
          A.HSL     as CONS_SL,
          ...
     from P_FOUNDATIONA as A
union all
as select ...
          '09'      as PLEVEL,
          '00'      as RTFLG,
          RHCUR,
          A.RKCUR   as CONS_CUR,
          0         as HSL,
          A.KSL     as CONS_SL,
          ...
     from P_FOUNDATIONA as A
union all
as select ...
          '09'      as PLEVEL,
          '00'      as RTFLG,
          RHCUR,
          A.RKCUR1  as CONS_CUR,
          0         as HSL,
          A.KSL1    as CONS_SL,
          ...
     from P_FOUNDATIONA as A
#+END_SRC

*All KSL fields need to be removed from the generated view.*


** Test

#+BEGIN_SRC sql
select * from "sap.erp.sfin.rtc::RTC_C_VINCE1_BPCUNION"('PLACEHOLDER' = ('$$client$$', '500'))
where entity = 'C1011'
and fiscyearper = '2017001'
and BPC_CATG = 'FINAL';

select * from "sap.erp.sfin.rtc::RTC_C_VINCE3_BPCUNION"('PLACEHOLDER' = ('$$client$$', '500'))
where entity = 'C1011'
and fiscyearper = '2017001'
and BPC_CATG = 'FINAL';


select * from "sap.erp.sfin.rtc::RTC_C_VINCE5_BPCUNION"('PLACEHOLDER' = ('$$client$$', '500'))
where entity = 'C1011'
and fiscyearper = '2017001'
and cons_cur = 'CNY'
and BPC_CATG = 'FINAL';

SELECT * 
FROM "SYS"."CS_VIEW_COLUMNS"  
WHERE SCHEMA_NAME = 'ZRTC_RT_9451'   
AND VIEW_NAME = 'sap.erp.sfin.rtc::RTC_CG_FOUNDATIONA'   
#+END_SRC
                                                                                                                               
