#+PAGEID: 1828633219
#+VERSION: 7
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Totals Validation
** Context
Data validation in RTC usually contains  =Totals Validation= and =Document Validation=. =Document Validation= happens on every incoming financial document. It does validation on the transient data that supplied with middle-ware(Real-time Journal Entries Replication) or UI(Manually Input). This SDD only presents  =Totals Validation= in RTC. 

=Totals Vailidation= ensures the consistency of financial statements and reports. "Totals" means the data is aggregated, not in a single FI document and line item level. From technique perspective, totals validation usually runs on the persisted data mainly in ACDOCA and ACDOCC. Following diagram describes the detail.

#+CAPTION: Validation in RTC
[[../image/ValidationDataFlow.png]]  

=Totals Validation= runs the type of analytic rules in Validation Engine. The totals validation rules are assigned with the BRF+ application which is genereated by the correspoinding consolidation model. There are also some default CDS views already in the BRF+ application:
1. Validation CDS view for *Reported financial data*: Before any consolidation entries are posted you need to ensure that the reported financial data you have collected is consistent.
2. Validation CDS view for *Standardized financial data*: After posting standardizing entries, you need to check the consistency of the standardized financial data.  
3. Validation CDS view for *Consolidated data*:  After posting the consolidation entries, you can check that the consolidated data is consistent.
4. Validation CDS view for *Additional financial data*: If additional financial data is provided, you can also run validaitons on them. 

*** Some examples for totals validations
+ Total assets = total liabilities
+ Net profit = appropriation of retained earnings
+ Retained earnings on balance sheet = annual net income on income statement

 
*** Use Cases

**** Persona
*IT Professional*: Create initial rule vocabulary, DB modeling, and deliver example rules. Knowledge transfer to accountants so that they can compose rules by themselves. 

*Local Accountant*: Do validations on his own reported financial data based on the rules defined by group accountant. He can also define his local rules if possible.

*Group Accountant*: Do validations on all subsidiaries' reported financial data. She defines group rules and distribute them to different subsidiaries. She also runs validation on  the standardized financial data and the consolidated data.

**** Rule Authoring Process
#+CAPTION: Rule Authoring Process
[[../image/RuleAuthoringProcess.png]]  

At first, IT professionals need to create the rule vocabulary. This can be done either by generating BRF+ Applications and CDS views from consolidation model definition, or manually create a BRF+ Application and assign CDS views to it. 

Group accountants can then compose their validation rules based on the vocabulary that IT professionals created. She can group rules using validation methods which can be assigned to consolidation entities or tasks. Local accountants can run the validation method be assigned, and group accountant can run group rules on the consolidation tasks.


** Detail Design
=Totals Validation= is built on =Validation Engine=. You define your validation rules with type "Analytic Rule",  assign the BRF+ application generated by your consolidation model. You can choose a generated CDS view as the vocabulary, as well as your self-created CDS views. The output structure should be fixed to "RTC_VALIDATION_OUTPUT". Please refer [[https://wiki.wdf.sap.corp/wiki/x/Yic2b][SDD-Validation Engine]] for detail.

*** Validation Method UI
The UI divides into the left panel and the right panel. The left panel contains the list of all methods defined under a certain model. User can type words to do fuzzy searches. Click a method in the list, details will be shown in the right panel. You can also create a new method by click the "New" button in the bottom bar of the left panel, which then will display an empty method in the right panel.

**** Validation Method General Tab
#+Caption: Validation Method General Tab
[[../image/ValidationMethod01.png]] 

A validation method is defined under a consolidation model. You must first category your validation method into totals validaiton or document validation. If "Totals Data Validation" is chosen, you then select the whether it is one of the following templates:
1. Reported Data Validation;
2. Standardized Data Validation;
3. Consolidated Data Validation;
4. Additional Financial Data Validation;
5. Other Data Validation;

Once you select a template, the "Input Parameters" and "Output Structure" in the "HRF Integration" section will be automatically determined. However, you can adjust the "Input Parameters" on your requests, but "Output Structure" can not be changed. 

The BRF+ Application name is fixed, as it is generated during model activation. You click the link of the application name will open the BRF+ workbench with the application. 

~If document validation is chosen, you need to select whether it is header level, item level, or document level. This will be described more detail in the SDD of document validation.~

**** Validation Method Rules Tab
#+Caption: Validation Method Rules Tab
[[../image/ValidationMethod02.png]] 

In the Rules Tab, you assign validation rules to the method. You can either add an existing rule or create a new one under a method. If you add an existing rule, it will do a match on the rule definition with the method defination. Only following criterias are met, can a rule be added to a method:
1. If method category is "Totals Validation", then the rule must be an analytic rule;
2. The BRF+ application must be the same;
3. The input parameters must equal, which means the number and the technqiue names of them are the same. The sequence of the parameters dosen't require to be the same.
4. The output structure must be the same.

By default, when you click the button "Add Existing", it will opens a dialog window only show the rules that fulfill the above criterias.

If you click the button "Create New", it will navigate you to the rule creation page. The =Data Context= tab is filled with the correct rule type, correct BRF+ Application, default vocabulary(according to the template selected), and the correct output structure. So it will by default show you the =Expression= tab so that you can compose rule expressions directly.

The "Delete" button only remove the rule from the method, not delete the rule persistently. 

**** Run Simulation of the Validation Method
#+Caption: Validation Method Simulation Tab
[[../image/ValidationMethod03.png]] 

You can run simulations on the validation method. You must first fill the input parameters. Basically, all the input parameters of a rule is mandatory and single-value. Because all the rules under a method share the same input parameters and output structure, the rules are executed one by one. The result is given as a list with each line a result of rule. You can navigate to a rule's definiation page; you can single execute a rule; you can see the message test of the rule, and you can test the drill-through reports. 

The result of a validation method run is called validation log. The validation log contains the display and persistency, also with comments/attachment. It should be designed as a reusabe component which can be either a seperated application or embedded in other applications.
 

** Examples of Totals Validation Rules
#+CAPTION: Base CDS View for Rule Defination
#+BEGIN_SRC sql
@AbapCatalog.sqlViewName: '/RTCART/MOS02200' @VDM.viewType: #CONSUMPTION @ClientDependent: false
define view /RTCART/P_VMOS02200
  as select from    /RTCART/P_FMOS02200 as a
    inner join      rtc_entity_m        as b on  a.RCLNT = b.mandt
                                             and b.dim   = '100'
                                             and a.RCOMP = b.rcomp
    left outer join rtc_entity_m        as c on  a.RCLNT = c.mandt
                                             and c.dim   = '100'
                                             and a.RASSC = b.rcomp
{
  'MOS022'                                                                   as MODEL,
 a.RYEAR,
  a.POPER,
  b.entity,
  case c.entity when '' then 'NONE' else ( COALESCE( c.entity, 'NONE') ) end as PENTITY,
  a.RACCT,
 @Semantics.quantity.unitOfMeasure: 'RHCUR'
  a.HSL,
  @Semantics.quantity.unitOfMeasure: 'RKCUR'
  a.KSL,
  @Semantics.amount.currencyCode: 'RUNIT'
  a.MSL,
  @Semantics.quantity.unitOfMeasure: 'RWCUR'
  a.WSL,
  @Semantics.currencyCode
  a.RHCUR,
  @Semantics.currencyCode
  a.RKCUR,
  @Semantics.unitOfMeasure
  a.RUNIT,
  @Semantics.currencyCode
  a.RWCUR,
  a.RCLNT,
 a.TIMESTAMP
}

#+END_SRC

=Parameters=
1. MODEL: Consolidation Model Name
2. CONS_VER: Consolidation Version
3. ENTITY: Entity
4. RYEAR: Fiscal Year
5. POPER: Fiscal Period

=Output=
1. MSGTY: Message Type
2. MSGID: Message ID
3. MSGNO: Message Number
4. MSGV1: Placeholder 1
5. MSGV2: Placeholder 2
6. MSGV3: Placeholder 3
7. MSGV4: Placeholder 4

*** Asset = Liability + Equity

=Prerequisite=

True

=Check=
1. Sum of local amount for all asset accounts as =Assets=:  ( Sum of Amount(HSL) Where Account(RACCT) is between "1000" and "2000" )
2. Sum of local amount for all Liability accounts as =Liabilities=: ( Sum of Amount(HSL) Where Account(RACCT) between "2000" and "3000" )
3. Sum of local amount for all Equity accounts as =Equities=: ( Sum of Amount(HSL) Where Account(RACCT) between "3000" and "4000" )
4. Create an alias =BALANCE_CHECK= with expression: =Assets= = =Liabilities= + =Equities=
5. Check if =BALANCE_CHECK= is true or false

=Descision Table=
| BALANCE_CHECK | MSGTY | MSGID         | MSGNO | MSGV1 | MSGV2 | MSGV3 | MSGV4 |
|---------------+-------+---------------+-------+-------+-------+-------+-------|
| true          | 'S'   | MSG_CLASS_XXX |   000 | XXX   | XXX   |       |       |
| false         | 'E'   | MSG_CLASS_XXX |   001 | XXXX  | X     |       |       |


*** Partner information exists for all intercompany account receivable accounts

=Prerequisite=
IF Account(RACCT) is between "5000" and "6000"

=Check=
1. Define an alias =PARTNER_CHECK= as 
PENTITY is not equal to ''

=Descision Table=
| Prerequisite | PARTNER_CHECK | MSGTY | MSGID         | MSGNO | MSGV1 | MSGV2 | MSGV3 | MSGV4 |
|--------------+---------------+-------+---------------+-------+-------+-------+-------+-------|
| True         | false         | 'E'   | MSG_CLASS_XXX |   004 | XXXX  | X     |       |       |


*** If the deviation of account 4101001 for fully consolidated partner units as a total is bigger than $2 million and bigger than 25% of the prior period, then explain. 
=Prerequisite=

If Account is equal to '1714001'

=Check=
1. Create an alias =RP= as: Sum of local_amount where account = '1714001' and period = <current period> and fully_consolidated = true.
2. Create an alias =RP-1= as: Sum of amount where account = '1714001' and period < <current period -1> and fully_consolidated = true.
3. Create an alias =DEVIATION= as: 

| =RP=              | =RP-1=            |                  Deviation |
|-------------------+-------------------+----------------------------|
| is equal to 0     | is equal to 0     |                          0 |
| is not equal to 0 | is equal to 0     |                        100 |
|                   | is not equal to 0 | ROUND( =RP= / =RP-1= )*100 |
4. Create an alias =DEVIATION_CHECK= as: if =RP= is greater than 2,000,000 and =DEVIATION= is greater than 25%

=Descision Table=
| Prerequisite | DEVIATION_CHECK | MSGTY | MSGID         | MSGNO | MSGV1 | MSGV2 | MSGV3 | MSGV4 |
|--------------+-----------------+-------+---------------+-------+-------+-------+-------+-------|
| true         | true            | 'E'   | MSG_CLASS_XXX |   005 | XXX   | XXX   |       |       |
  

*** Check cost center based on a line item in ACDOCC

=Prerequisite=:
If company code = "F001" and account = "1001010" (expense)

=Check=:
Cost center is in a range between "xxxx" and "xxxx".

*Realization:*

Actual Rule in HRF Decision Table (Rule Name: DocumentPosting): 
| CompanyCode | GroupAccount | CostCenter                                   | Output |
|-------------+--------------+----------------------------------------------+--------|
| 'F001'      | '0003051090' | is not between 'SFUT000200' and 'SFUT000243' | 'E'    |
|             |              |                                              | 'S'    |

*Test Cases:*
| Expectation | CCode | Group Account |    Doc No. | Item No. | Cost Center |
|-------------+-------+---------------+------------+----------+-------------|
| should fail | F001  |    0003051090 | 1900004211 |   000002 | 0000001101  |
| should pass | F001  |    0003051090 | 0100009825 |   000002 | SFUT000243  |
| should pass | F001  |    0003051090 | 0100009821 |   000002 | SFUT000242  |
| Should pass | F001  |    0003082090 | 1900004205 |   000006 | 0000001102  |


*** Actual vs Plan: ACDOCC/ACDOCA/COEP
~ERP is realized using User Exit~

=Prerequisite=:
If controlling area = "0001" and account type = "expense", 

=Check=:
1. Sum (planned amount of COEP) where account type = "expense" and cost center = "c001" and current period = "2015001" as "planned"
2. Sum (actual amount of ACDOCA) where account type = "expense" and cost center = "c001" and current period = "2015001" as "actual".
3. If (actual > planned), then give error message.

*Issues*:

1. HRF service can only do filtering on one data object. If you assign filter conditions on 2 different data objects, the reuslt will be the Cartesian product of result of 2 data object. It is a usual requirement that you sum amounts of table A, and compare this value to the sum of amounts of table B, while Table A and Table B can not be joined together. 

   The workaround solution for this kind of scenarios is to use CDS view to union actual and planned amounts. Then add this union-ed CDS view to HRF Vocabulary as a data object, and join it to the main data object. 

2. There is performance issue when comparing two sumerize values. Need further investigation.

3. ~Prerequisite~ realized using Decision Table is not performance good. It is worth to consider using to rule services. First check prerequisite rule service, if passed, then check the actual rules.

*Realization:*

1. Create a CDS view on ACDOCA to summarize actual values happened.
   CDS View: I_Acdoca_Rtc_Tst
2. Create a CDS view on COEP to summarize planned values happened.
   CDS View: I_Coep_Rtc_Tst
3. Create a CDS view unions above 2.
   CDS View: I_Actual_Plan_RTC_TST
4. Add I_Actual_Plan_RTC_TST to HRF vocabulary.
   Vocabulary: tmp.fi.rtc.hrf.ZTEST.HRFTest::posting
5. There should be an ACDOCA-like data object to accept input line-items from internal table. Here I just use ACDOCA to simulate. But there is a drawback that you just can not add the current value to happened value to get a simulation.
6. Join ACDOCA to I_Actual_Plan_RTC_TST.
7. Create a rule ~Posting_ActualvsPlan~ and rule service ~DocumentPosting02~:

| Prerequisite | Actual Value | Outputs |
|--------------+--------------+---------|
| false        |              | 'S'     |
| true         | < PlanValue  | 'S'     |
| true         |              | 'E'     |

Where 3 alias are defined like this:
1. ~Prerequisite~: CtrlArea of the ACDOCA = '0001' and Account of the ACDOCA = '0000476000'
2. ~ActualValue~: sum of AMOUNT of all ActualPlans of an ACDOCA where VERSION = '000'
3. ~PlanValue~: sum of AMOUNT of all ActualPlans of an ACDOCA where VERSION = '100'

*Test Cases:*
| Expectation |    Doc No. | Item No. |    Account | CostCenter | Period |            Actual |           Planned |
|-------------+------------+----------+------------+------------+--------+-------------------+-------------------|
| should pass | 0100027332 |   000001 | 0000476000 | CC01       |    010 |              -127 |               -13 |
| should fail | 0100036001 |   000002 | 0000476000 | CC02       |    004 |               132 |              NULL |
| should fail | 0100000702 |   000001 | 0000476000 | CC100      |    006 |               200 |               100 |
| should fail | 0100000352 |   000002 | 0000476000 | CC200      |    005 | 112,345,679,135.1 | 112,345,679,135.1 |
| should pass | 0100001835 |   000002 | 0000400000 | CC200      |    007 |            144.48 |             44.48 |

#+CAPTION: Check Actual and Planned amount 
#+BEGIN_SRC sql 
  select * from SAPER9.Z_ACTPLAN_RTC
           WHERE CostCenter = 'CC200'
           and CtrlArea = '0001'
           and Account = '0000476000'
           and FiscalYear = '2015'
           and Period = '005'
           -- and Period = '010'
#+END_SRC

#+CAPTION: Find corresponding FI documents 
#+BEGIN_SRC sql 
select 
"BELNR",
"DOCLN",
"RACCT",
"RCNTR",
"RHCUR",
"FISCYEARPER",
"HSL"
 from "SAPER9"."ACDOCA"
 WHERE RCLNT = '500'
   AND RLDNR = '0L'
   AND KOKRS = '0001'
   AND RCNTR = 'CC200'
   --AND RCNTR = 'CC01'
   AND RACCT = '0000476000'
   --AND RACCT = '0000400000'
   AND FISCYEARPER = '2015005'
#+END_SRC

#+CAPTION: Run HRF procedure in SQL console and get SQL Plan graph 
#+BEGIN_SRC sql
SELECT * FROM "SAP_HRF"."tmp.fi.rtc.hrf.service::DocumentPosting02.VIEW" 
('PLACEHOLDER' = ('$$DocNum$$', '0100027332'), 'PLACEHOLDER' = ('$$ItemNum$$', '000001'))
#+END_SRC
