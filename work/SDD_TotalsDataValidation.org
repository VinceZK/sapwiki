#+PAGEID: 1828633219
#+VERSION: 3
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Totals Validation
** Context
Totals data includes: 
1. *Reported financial data*
2. *Standardized financial data*  
3. *Consolidated data*
4. *Additional financial data* 

Totals data validation uses validation rules, which you can define in Customizing. To do this, you establish selection conditions (usually with items and subitems), which you then use in a formula. Then the system tests whether the validation rule is true orX1 false for a given data set. 

We will leverage HRF to realize the totals data validation. As HRF has a fancy rule editor and generates DB procedures to encapsulate rule logic. In our first release, we will re-use the HRF@BRF workbench as the rule maintenance UI, and provide an ABAP report to consume the generated HANA artifacts. Later on, we will consider how to integrate HRF's UI control into our rule maintenance apps, and establish a deep integration with BPC's control framework. 

*** Some examples for totals validations
+ Total assets = total liabilities
+ Net profit = appropriation of retained earnings
+ Retained earnings on balance sheet = annual net income on income statement

 
** Use Case Description

*** Personas
*IT Professional*: Create initial rule contexts, DB modeling, and deliver example rules. Knowledge transfer to accountants so that they can maintain rules by themselves. 

*Local Accountant*: Do validations on his own reported financial data based on the rules defined by group accountant. He can also define his local rules if possible.

*Group Accountant*: Do validations on all subsidaries' reported financial data. She defines group rules which should be applied to all subsidaries (Each subsidary could be assigned with different rules). She also validates the standardized financial data and the consolidated data.

*** Data Flow and Validations Point (runtime)
Data validation in RTC usually contains =Document Validation= and =Totals Validation=. =Document Validation= happens on every incoming financial document. It does validation on the transient data that supplied with middleware(Real-time Journal Replication) or UI(Manually Input). This SDD mainly presents  =Totals Validation= in RTC. 

=Totals Validation= does data aggregations and comparsions on the persisted data mainly in ACDOCA and ACDOCC. User could also have addtional data to be involved in the validation calculation. Following diagram describes details.

#+CAPTION: Validation in RTC
[[../image/ValidationEngineContext.png]]  

=Reported Financial Data= mainly resides in ACDOCA as in Central Finance case, we already have local financial data be replicated real-timely. The local data is then read and validated. Only if the validation is passed, the aggregated reported financial data can be saved in in ACDOCC. It is also possible the local data is coming from flexible uploading (through spreadsheet), then the data is not persisted. In this case, we could let the data be saved in ACDOCC first with a special status to indicate that it is not validated. After the successfully validation, the status is changed to "Validated".

When financial data is reported (with "Validated" status in ACDOCC), we can run standardising and currency translation tasks. The result is upserted into ACDOCC which forms a standardized data set. We run validation on the =Standardized Financial Data= to check certain rules is fulfilled. 

BPC will then do eliminations and consolidations on the standardized financial data. The result is again write-back to ACDOCC. Then we have the final consolidation result set which can be used for differentcorp level financial statements. But before the disclosure, we should run =Consolidated Data= validation again to make sure the result is correct. If error or inconsistency is found, you can adjust it through manual posting.   
 
*** Rule Authoring Process (design time)
There should be an easy use tool to allow accountants define their rules intuitively. This tool is Firoi-based and close to accountants context. But it won't be showed in the first release as to deliever a Fiori APP needs lots of gates to go through. We decide to leverage the BRF workbench as an temporal solution to let accountants maintain their rules. 

Thus the following workflow for rule design time is presented. 
 
#+CAPTION: Validation Engine in RTC
[[../image/VE_RuleDefination.png]]  

At first, IT professionals need to do rule context defination. That's mainly regarding with CDS views creation to form a rule context. The CDS views are mainly based on ACDOCA and ACDOCC with associations to master data dimension tables. Each CDS view is assigned to a BRF application in the web workbench. 

Group accountants can define their own rules based on the sample rules that IT professionals created. She can group rules into rule sets which can then be assigned to each consolidation group/unit. Local accountants can define their own rules too, but only effect on his own consolidation unit. Both of them use a same Tcode to run validation on different aspects.  

** Mapping BRF concept to RTC Validations
| BRF                                  | RTC                                       |
|--------------------------------------+-------------------------------------------|
| Application                          | Application Area + Callup Point (Context) |
| Function(Data Context)               | Validation name                           |
| Rule Set                             | Step(Prerequisite/Check/Message)          |
| Variables                            |                                           |
| Expressions initialize the Variables |                                           |
| Rules                                |                                           |


** HRF@BRF
*** Pre-Delivered Content
Application, functions, data objects and underlying CDS views

*** Examples of RTC rules in HRF
**** Actual vs Plan: ACDOCC/ACDOCA/COEP
~ERP is realized using User Exit~

=Prerequisite=:
If controlling area = "0001" and account type = "expense", 

=Check=:
1. Sum (planned amount of COEP) where account type = "expense" and cost center = "c001" and current period = "2015001" as "planned"
2. Sum (actual amount of ACDOCA) where account type = "expense" and cost center = "c001" and current period = "2015001" as "actual".
3. If (actual > planned), then give error message.

*Issues*:

1. HRF service can only do filtering on one data object. If you assign filter conditions on 2 different data objects, the reuslt will be the cartesian product of result of 2 data object. It is a usual requirement that you sum amounts of table A, and compare this value to the sum of amounts of table B, while Table A and Table B can not be joined together. 

   The workaround solution for this kind of senarios is to use CDS view to union actual and planned amounts. Then add this unioned CDS view to HRF Vocabulary as a data object, and join it to the main data object. 

2. There is performance issue when comparing two sumerize values. Need further inverstigation.

3. ~Prerequisite~ realized using Decision Table is not performance good. It is worth to consider using to rule services. First check prerequisite rule service, if passed, then check the actual rules.

*Realization:*

1. Create a CDS view on ACDOCA to summerize actual values happened.
   CDS View: I_Acdoca_Rtc_Tst
2. Create a CDS view on COEP to summerize planned values happened.
   CDS View: I_Coep_Rtc_Tst
3. Create a CDS view unions above 2.
   CDS View: I_Actual_Plan_RTC_TST
4. Add I_Actual_Plan_RTC_TST to HRF vocabulary.
   Vocabulary: tmp.fi.rtc.hrf.ZTEST.HRFTest::posting
5. There should be an ACDOCA-like data object to accept input line-items from interanl table. Here I just use ACDOCA to simulate. But there is a drawback that you just can not add the current value to happened value to get a simulation.
6. Join ACDOCA to I_Actual_Plan_RTC_TST.
7. Create a rule ~Posting_ActualvsPlan~ and rule service ~DocumentPosting02~:

| Prerequisite | Actual Value | Outputs |
|--------------+--------------+---------|
| false        |              | 'S'     |
| true         | < PlanValue  | 'S'     |
| true         |              | 'E'     |

Where 3 aliias are defined like this:
1. ~Prerequisite~: CtrlArea of the ACDOCA = '0001' and Account of the ACDOCA = '0000476000'
2. ~ActualValue~: sum of AMOUNT of all ActualPlans of an ACDOCA where VERSION = '000'
3. ~PlanValue~: sum of AMOUNT of all ActualPlans of an ACDOCA where VERSION = '100'

*Test Cases:*
| Expectation |    Doc No. | Item No. |    Account | CostCenter | Period |            Actual |           Planned |
|-------------+------------+----------+------------+------------+--------+-------------------+-------------------|
| should pass | 0100027332 |   000001 | 0000476000 | CC01       |    010 |              -127 |               -13 |
| should fail | 0100036001 |   000002 | 0000476000 | CC02       |    004 |               132 |              NULL |
| should fail | 0100000702 |   000001 | 0000476000 | CC100      |    006 |               200 |               100 |
| should fail | 0100000352 |   000002 | 0000476000 | CC200      |    005 | 112,345,679,135.1 | 112,345,679,135.1 |
| should pass | 0100001835 |   000002 | 0000400000 | CC200      |    007 |            144.48 |             44.48 |

#+CAPTION: Check Actual and Planned amount 
#+BEGIN_SRC sql 
  select * from SAPER9.Z_ACTPLAN_RTC
           WHERE CostCenter = 'CC200'
           and CtrlArea = '0001'
           and Account = '0000476000'
           and FiscalYear = '2015'
           and Period = '005'
           -- and Period = '010'
#+END_SRC

#+CAPTION: Find corresponding FI documents 
#+BEGIN_SRC sql 
select 
"BELNR",
"DOCLN",
"RACCT",
"RCNTR",
"RHCUR",
"FISCYEARPER",
"HSL"
 from "SAPER9"."ACDOCA"
 WHERE RCLNT = '500'
   AND RLDNR = '0L'
   AND KOKRS = '0001'
   AND RCNTR = 'CC200'
   --AND RCNTR = 'CC01'
   AND RACCT = '0000476000'
   --AND RACCT = '0000400000'
   AND FISCYEARPER = '2015005'
#+END_SRC

#+CAPTION: Run HRF procedure in SQL console and get SQL Plan graph 
#+BEGIN_SRC sql
SELECT * FROM "SAP_HRF"."tmp.fi.rtc.hrf.service::DocumentPosting02.VIEW" 
('PLACEHOLDER' = ('$$DocNum$$', '0100027332'), 'PLACEHOLDER' = ('$$ItemNum$$', '000001'))
#+END_SRC

*** User exists (rules)
*** RTC and BRF integration
**** Design time
