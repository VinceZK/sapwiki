#+PAGEID: 1829146305
#+VERSION: 11
#+STARTUP: align
#+OPTIONS: toc:1
#+TITLE: SDD-Pull Request for Consolidation

* Context
Local accountants can raise a =pull request= to submit financial reported data. A "Pull Request" contains timestamp and other filtering information to boundary an data area in ACDOCA/C so that group accountants can correctly pull the data to do validations and consolidations. To be simple, you can regard a "Pull Request" as a SQL where string which will be applied on the ACDOCA/C table.

Pull requests can be generated recurrently or occasionally. The former is auto-generated by defining a recurrence schedule, for example, the month end consolidation. The latter is for an occasionally re-open a period to posting adjustment documents. 

* Recurrence Pull Request
#+CAPTION: Recurrence Pull Request
[[../image/RecurrencePullRequest4FinCons.png]]  

Assume a recurrence automatically consolidation process is defined. A consolidation process contains multiple sub-processes which runs monthly. To be simple, we only involve 2 roles: Local accountant who does his tasks in a local financial system; Group accountant who run her consolidation tasks in the central system. Following tasks are executed in a chronography order:
1. The central system automatically raise the group period close request to the local system.
2. Local accountant gets the notification and close the period based on group fiscal year variant. A regular pull request is initiated and sent to the group accountant. A pull request contains the timestamp on when the "period close" happens, and other additional filtering on company code, ledger, posting date, and so on.
3. Group accountant gets the pull request notification for the specific local company. She opens it to check the actual data and runs reported data validations on it. If she thinks the data in the request is OK, she then accepts it. The consolidation system will pull the corresponding data described in the pull request. It will also update the "time marker" property of the local entity with the timestamp in the pull request. 
4. If group accountant thinks the data is not ready, she rejects the pull request. The pull request is then statued as "de-active".
5. Once the local accountant receives the rejected notification, he must do adjustments to fulfill the requirements raise by the group accountant. So he opens the group period and do adjustments and validations. Then he closes the group period again to forbid unwanted postings in this period. A pull request is raised along with his close activity which again contains the timestamp on when the close is happening.The interval between this timestamp and the last accepted pull request's timestamp is exactly the data the group accountant wants for this period.
6. Again the group accountant will receive the new pull request, and the same steps are executed recursively.

* Occasional Pull Request
#+CAPTION: Occasional Pull Request
[[../image/OccasionalPullRequest4FinCons.png]]  

Occasional pull requests share exactly the same logic as the recurrence approach. There is actually no difference on the technique point of view. The difference form business point of view is that the group accountant has one more option "defer" to deal with them. Detail processes are explained bellow:
1. When the local accountant decides to re-open the period, he must close it again after additional documents are posted in this period which will then raise a pull request automatically.
2. The pull request is notified and got by the group accountant, she decides whether it should be included in this consolidation run, or be deferred in next run. Of course, she can also reject it if she thinks it is a minor change.
3. If "include" is chosen, then the consolidation system pull the data according to the pull request. A delta run is the first choice, but if impossible, then a full run of this period is taken. The pull request is then flagged as "processed", and all the un-processed pull requests before it will be discarded. Meanwhile, the timestamp of the successfully processed pull request will be put on to the entity's "time marker" field. 
4. If "defer" is chosen, then the consolidation system will save the status for the pull request. The next time consolidation is run, the data in the pull request will be processed and consolidated into the next period. But user can still trace back to know that this data is belong to the previous period, although it is counted in this period. 
5. If "reject" is chosen, which means the data contains noncompliance, the local accountant will then receive the notification, but this time, he can decide if a resubmit is necessary or not. 

As said before, once a pull request is processed, then all the unprocessed ones before it will be discarded. Combined with recurrence run, as it requires each occurrence the local accountant must submit his local financial data, which means there will be no pull request could be deferred to *next next* occurrence. 

It is also very usual that the local accountant opens the periods and never closes them. As no pull request is raised, the group accountant can not pull the new data afterwords. But she can be informed, so that external process could be taken. Then, when the local accountant close those opened periods, each period should generate a pull request which points the documents only belongs to that period. All those pull requests will be included in the upcoming occurrence. 

* Comparison with On-the-Fly
The pull request approach is built on the conclusion that local accountants have the right to decide when and which data should be reported to the group accountants. If no pull request is raised by local accountants, then the group accountant is not allowed to pull the data from local company, even technically, the data is already in the central system. 

The pull request is somehow conflict with the on-the-fly consolidation in business duties. As on-the-fly means it always reads the latest data in the central system. Group accountants access the local data without local accountants' permission. _But that doesn't mean pull request can't co-exist with On-the-Fly_. 

We use pull request approach to process the legal period end consolidation statements, which requires more on data precise, security, and clear duties. Each period, a consolidated result will be generated. The On-the-Fly consolidation statements always runs on the latest data basis which only extract current period data in ACDOCA, combines with the last periods' consolidated results in ACDOCC, will form a full consolidated picture at anytime.

* DB Design for Pull Request
The tables holds the pull request resides in the central system. Each time, the local system raises a pull request, it will be synchronized to the central system. Of course, the local system should also save a copy of the pull request. We can use 2 tables to describe a pull request:
1. Pull request head table which contains the head information like the timestamp when the period is closed.
2. Pull request boundary item table which contains the filtering conditions to boundary the data in ACDOCA. 

#+CAPTION: Pull Request Head Table
| Field    | Key | Description                                    |
|----------+-----+------------------------------------------------|
| MANDT    | X   | SAP Client                                     |
| PRUUID   | X   | Pull Request UUID                              |
| MODEL    |     | Consolidation Model                            |
| DCATE    |     | BPC Data Category                              |
| REQ_TYPE |     | Pull Request Type: MonthEnd or Adjustment      |
| FYEAR    |     | Group Fiscal Year                              |
| FPERI    |     | Group Fiscal Period                            |
| PERIV    |     | Group Fiscal Variant                           |
| GROUP    |     | Consolidation Group                            |
| ENTITY   |     | Consolidation Entities: Company, Profit Center |
| CLTIME   |     | Period Close Timestamp                         |
| BELNR    |     | The Submitted Consolidation journal            |
| USTATUS  |     | User Status: Raise/Reject/Approve/Deffer       |
| SSTATUS  |     | System Status: Ready/Running/Processed/Error   |
| CREATOR  |     | Who creates the Pull Request                   |
| CTIME    |     | Pull Request Generate Time                     |

#+CAPTION: Pull Request Boundary Item Table
| Field  | Key | Description                                                  |
|--------+-----+--------------------------------------------------------------|
| MANDT  | X   | SAP Client                                                   |
| PRUUID | X   | Pull Request UUID                                            |
| ITEMNO | X   | Boundary Item No.                                            |
| FLFLD  |     | Filtering Field Name. Fields in ACDOCA, like RACCT, RACNT... |
| VALFR  |     | Value from                                                   |
| VALTO  |     | Value to                                                     |

* Raise Pull Requests 
The local accountant can raise pull requests when he thinks the data is ready. Before submitting the data, he may still need to run a validation. After that, he can raise pull requests to group accountant. The following screen mock-up explains detail on it. 

#+CAPTION: Pull Request Raise Screen 
[[../image/RaisePullRequest.png]]  

1. The local accountant login into the central system, and open the pull request raise application.
2. He chooses which consolidation model and which consolidation version the pull request should be sent to .
3. The "Fiscal Year/Period" is always the current of the chosen model which has a fiscal year variant be assigned.
4. "Current Water Mark" is the time when he enters in this application.
5. He can also select "Company Code" if he is granted authorization. 
6. When he clicks the button "Get Data", it will fetch the data between "Last Water Mark" and "Current Water Mark" group by "Fiscal Period" from ACDOCA. "Last Water Mark" stands for last successfully processed pull requests by period. But if there are pull requests exists but not processed, then the application will first check if there is new data between the last pull request and this one. If yes, then get the data between this one and the *last successfully processed one*; If no, then pop-up a message to tell the user there is no data changed.
7. The data showed to the local accountant only contains the changed account and their delta amounts. The already processed amounts will also be showed as a reference. Thus the local accountant can get a clear view of what has been changed in this interval.
8. He can then click the "Validate" button, which will navigate to the "Report Data Validation" App. It will do validations on the current period data(the consolidate data in ACDOCC) along with the delta ones(The new data in ACDOCA), thus to get a comprehensive validation result.
9. If no significant error is showed, then he can raise the pull requests. Click the "Raise" button will automatically generate pull requests group by periods. After successfully sent the pull requests, the data table will be refreshed empty if no new data is entering just now. 

* Process Pull Requests
Once the group accountant gets the pull request notification in BPC's consolidation monitor, she clicks it and a dialog window will pop-up and show a pull request list. She can then decides how to process the pull requests.  

~The dialog window is realized using an ABAP ALV report. The best way is to use BPC's UI5 framework.~

The pull request process application contains 3 screens: search screen, list screen, and the detail screen. If it is called from BPC's consolidation monitor, the "Search Screen" will be omitted as the search parameters is already filled by BPC. Then the "List Screen" will be showed to the user directly. 

#+CAPTION: Pull Request Search Screen 
[[../image/PullRequestProcess01.png]]  

The group accountant can of course open the pull request application directly in S/4. In the search screen, she can input search parameters to filer the pull requests. 

1. The "RTC Model" and "BPC Environment & BPC Model" are mandatory, but if one choose the "RTC Model" the "BPC Environment" and "BPC Model" are determined automatically, and vice verse.
2. Fiscal Year/Period has the default value of current fiscal year and period.
3. "BPC Category" and "Cons. Version" are too mutual determinable.
4. "Cons. Group",  "Cons. Entity", User Status, and System Status are all optional filtering parameters. 

#+CAPTION: Pull Request List Screen 
[[../image/PullRequestProcess02.png]]  

The list view lists all the pull requests that fulfill the search parameters. It is grouped by "Group" and "Entity". 

1. Pull request numbers are UUIDs with time sequence.
2. "Request type" includes =MonthEnd= and =Adjustment=. =MonthEnd= means the pull request is generated automatically by a consolidation recurrence schedule, and this kind of pull request must be processed by each period. =Adjustment= is for occasionally adjustment posts after the =MonthEnd= pull request is done.
3. "Timestamp" is the close time when the pull request is raised.
4. "User Status" are status on the perspective of end users, it contains: Raise/Reject/Approve/Defer.
5. "System Status" stands for how the consolidation system dealing with the pull requests. It contains: /Ignore/Processed/Ready/Running/Error.
6. The group accountant can do operations like "Validate", "Approve", "Defer", and "Reject" on multiple items. But it contains status constrains. For example, you can not approve the pull request that already has the system status "Running".

#+CAPTION: Pull Request Detail Screen 
[[../image/PullRequestProcess03.png]]  

The detail view contains the pull requests that belong to an entity, or "Group/Entity" combination. The list will always show the data between the latest pull request and the last successfully processed one. The pull requests between them will be omitted. Like the "pull request raise app", the list will be grouped by fiscal periods, with each period a water mark timestamp to indicate last successfully processed time.  

1. Validation is mandatory before approval and deferral. The validation will counts the new data into the already processed data, and do a comprehensive check.
2. If validation errors happen, then the pull request can only be rejected. Approval and Deferral can just not be executed.
3. Once the group accountant choose "Approve", the user status will be changed to "Approve" immediately, a notification will be sent to the local accountant, and the system status will be set to "Ready", which means it is ready to run consolidation tasks.
4. If the "Defer" button is clicked, user status will be set to "Defer", the system status will be left with empty. This pull request will then be counted in next occurrence run.
   
* Overall Data Flow
Here gives an bird's-eye view of the data flow.

#+CAPTION: Data Flow of S/4 Consolidation 
[[../image/DataFlowOverview.png]]  

1. Data comes from the local finance systems through Central Finance's real-time data replication. Data streams are substitute, derived, and validated at document level according to rules defined in the central system, and saved in the central journal table ACDOCA.
2. As not all the subsidiaries are involved in the central finance's landscape, those who can only provide  their reported financial data in spreadsheet format can submit via "Flexible Upload". The data will first be saved in a staging area before be counted into consolidation tasks.
3. Only the local accountants raise the pull requests can group accountants pull the data from ACDOCA or Staging area into ACDOCC. A pull request is a SQL where string which can be applied on ACDOCA or flexible upload staging table to boundary the data, which forms a "Reported Data View".
4. Group accountants can run totals validation on the "Reported Data View" and the former periods consolidated results in ACDOCC. If the validation is passed, the reported data is then posted into ACDOCC. Thus the data handover from local accountants to group accountants is finished. And this activity is called "Rollup" in consolidation, which saves the aggregated ACDOCA data into ACDOCC to form a valid data basis for the upcoming consolidation tasks.
5. A BPC consolidation view is created by union of ACDOCA and ACDOCC. The BPC consolidation engine then pumps the data through the union-ed view. It should carefully filter the data for different consolidation tasks and reports. As the data is overlapped between ACDOCA and ACDOCC, to be in mind, ACDOCC always have a aggregated copy of data in ACDOCA. It is supposed only the current period data is taken from ACDOCA for the On-the-Fly consolidation case. All other cases should get data only from ACDOCC.

** First Release 
In RTC's first release, pull request will be used as both a notification and timestamp filtering. The status control in the pull request will not be fully appeared. BPC can access the data directly in ACDOCA with timestamp filtering. The timestamp in the pull request which is submitted by the local acccountant reflects the local close time. Before the time, the data is allowed(by local accountants) for consolidation, and after the time, the data should not be counted for consolidation. 

For detials of the modeling for first release, please refer this page: [[wiki-page][https://wiki.wdf.sap.corp/wiki/x/Ds83bQ]]

The first release has following restrictions:

1. Once the local accountant raise the pull request, it is approved automatically, and group accountant can only accept it. There is no embedded control on this process, group accountant must notify the local accountant externally if she doesn't want the data. 
2. Delta consolidation is still not possible. Each time the local accountant raise a new pull request, BPC will always do a full re-consolidation based on the new timestamp. 
3. You can not defer amount to next period.
4. If consolidation is in "RUNNING" or "ERROR" status, reporting will produce data inconsistency.

I give following examples to explain detail data flow:

*** Example1: Local accountant submits data through flexible uploading 
*Step 1: Upload data but not submitted*: Data is saved in ACDOCC, a document number is given. The document status in in "Staging". When the user submit the data, he must choose the value of BPC category. The currency key of "CONS_SL" is set to "LC" for easy consumption for BPC. The actual currency key will be saved in HCURK. Currently, there is no pull request created, so BPC won't see the data.

=ACDOCC=  
| DOCNR | Status  | Entity |    Time | Currency | BPC Category | Group  | FLOW  | CONS_SL | PullReq |
|-------+---------+--------+---------+----------+--------------+--------+-------+---------+---------|
| 10001 | Staging | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |     100 |         |

*Step 2: Submit the data*: The orignal document status is changed to "posted". A pull request is created and the pull request number is set in the document lines. Now, BPC can see the data because there is a pull request exists which will be joined in the BPC consolidation view.

=ACDOCC=
| DOCNR | Status | Entity |   FTime | Currency | BPC Category | Group  | FLOW  | Amount | PullReq |
|-------+--------+--------+---------+----------+--------------+--------+-------+--------+---------|
| 10001 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    100 | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 3: Re-upload a new copy and submit*: The former submitted document will be kept as it is. A new document is  posted along with the pull requests. Through the consolidation view, BPC will get the data of the latest pull request for each group of Enity, Fiscal Time, and BPC Category. 
=ACDOCC=
| DOCNR | Status | Entity |   FTime | Currency | BPC Category | Group  | FLOW  | Amount | PullReq |
|-------+--------+--------+---------+----------+--------------+--------+-------+--------+---------|
| 10001 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    100 | 0000001 |
| 10002 | Posted | C100   | 2016.01 | LC       | Actual       | G_NONE | INPUT |    110 | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |

*** Example2: Local accountant submits data in ACDOCA  
If local data is in ACDOCA, then data copy to ACDOCC is unnecessary. Only raise a pull request with current timestamp is OK. The pull request is then used to join with the foundation view to get the filterred data before the recored timestamp. 

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category |     CTimestamp | USTATUS  |
|---------+------+--------+---------+----------+----------------+----------|
| 0000001 | A    | C100   | 2016.01 | Actual   | 20160302100020 | APPROVED |

*** Example3: Local accountants run currency translation in S/4, data comes from ACDOCA 
Local accountants can run currency translation in S/4 and then do data validations. The translated results will be saved in ACDOCC. BPC cannot see the translated results until he raises a pull request. In this case, BPC only gets data from ACDOCC rather than ACDOCA.

*Step 1: Local close*: Data in ACDOCA:  
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |

*Step 2: Run currency translation*: A rollup runs implicitly to create a local aggregated document. Translated results are also posted with each currency a dedicate document.
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      |         |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      |         |
 
*Step 3: Submit the data*: Raise a pull request
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 3: Re-submit a new set of translated data*: 
=ACDOCC=
| DOCNR | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |
| 10004 | C100   | 2016.01 | Actual       | 100 | CNY   |     200 | LC       | 0000002 |
| 10005 | C100   | 2016.01 | Actual       | 100 | CNY   |      40 | USD      | 0000002 |
| 10006 | C100   | 2016.01 | Actual       | 100 | CNY   |      36 | EUR      | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |

*** Example4: Local accountants run currency translation in S/4, data comes from flexible upload 

*Step 1: Upload local data*: Data must be in posted status, or currency translation can not run on it.
=ACDOCC=  
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |

*Step 2: Run currency translation*: Each currency will generate a document.
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       |         |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      |         |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      |         |
 
*Step 3: Submit the data*: Raise a pull request
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |

*Step 4: Re-submit a new set of translated data*: 
=ACDOCC=
| DOCNR | Status | Entity |    Time | BPC Category | HSL | HCURK | CONS_SL | CONS_KEY | PullReq |
|-------+--------+--------+---------+--------------+-----+-------+---------+----------+---------|
| 10001 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     100 | LC       | 0000001 |
| 10002 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      20 | USD      | 0000001 |
| 10003 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      18 | EUR      | 0000001 |
| 10004 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |     200 | LC       | 0000002 |
| 10005 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      40 | USD      | 0000002 |
| 10006 | Posted | C100   | 2016.01 | Actual       | 100 | CNY   |      36 | EUR      | 0000002 |

=RTC_PULL_REQ=
|    UUID | Type | Entity |   FTime | Category | USTATUS  |
|---------+------+--------+---------+----------+----------|
| 0000001 | C    | C100   | 2016.01 | Actual   | APPROVED |
| 0000002 | C    | C100   | 2016.01 | Actual   | APPROVED |


** Second Release

** Example1: Local accountant submits local amount, group accountant do currency translation 
=Notes:=
1. "LC" only reflects BPC point of view, it doesn't mean in ACDOCA the currency field stores "LC". In ACDOCC, is it allowed to store "LC"?
2. Exchange rate between local currency and group currency USD is 1:1.
3. Account number is omitted for simplicity.
4. Irrelevant columns are hided for different steps. 

*Step 1: Local close*: Data in ACDOCA:  
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |

*Step 2: Raise a month-end pull request*: Data is aggregated and posted to ACDOCC under a special category "VALIDATION". The category is only used in BPC for running control for the reported data. 
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |

*Step 3: Validate and approve the month-end pull request*: Document is copied to the "Actual" Category, audit trail is changed to "Input".
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |

*Step 4: Consolidation tasks are run in BPC*: Consolidation results are posted to ACDOCC.
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |
| 10003 | C100   | 2016.01 | USD      | Actual       | G_NONE | CT     |    100 | 0000001 |
| 10004 | C100   | 2016.01 | USD      | Actual       | G_1    | CT     |    100 | 0000001 |
| 10005 | C100   | 2016.01 | USD      | Actual       | G_1    | Elim   |    -20 | 0000001 |

*Step 5: Post new adjustment documents in ACDOCA*: The period is re-open after consolidation run. 
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |
| C100   | 2016.01 | LC       |      5 |

*Step 6: Raise an adjustment pull request*: The delta data is posted to ACDOCC under "VALIDATION" category. 
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |
| 10003 | C100   | 2016.01 | USD      | Actual       | G_NONE | Input  |    100 | 0000001 |
| 10004 | C100   | 2016.01 | USD      | Actual       | G_1    | CT     |    100 | 0000001 |
| 10005 | C100   | 2016.01 | USD      | Actual       | G_1    | Elim   |    -20 | 0000001 |
| 10006 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |      5 | 0000002 |

*Step 7.1: Data is re-validated and approved*: Delete all the consolidation results under the former pull request, post a new document under "Actual" category. Now data is ready for a consolidation re-run, you just iterate back to *step 3*.
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq | Del |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------+-----|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |     |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |     |
| 10003 | C100   | 2016.01 | USD      | Actual       | G_NONE | Input  |    100 | 0000001 | X   |
| 10004 | C100   | 2016.01 | USD      | Actual       | G_1    | CT     |    100 | 0000001 | X   |
| 10005 | C100   | 2016.01 | USD      | Actual       | G_1    | Elim   |    -20 | 0000001 | X   |
| 10006 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |      5 | 0000002 |     |
| 10007 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |      5 | 0000002 |     |

*Step 7.2: Data is re-validated and deferred*: Post a new document with the delta amount to the next period. 
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |
| 10003 | C100   | 2016.01 | USD      | Actual       | G_NONE | Input  |    100 | 0000001 |
| 10004 | C100   | 2016.01 | USD      | Actual       | G_1    | CT     |    100 | 0000001 |
| 10005 | C100   | 2016.01 | USD      | Actual       | G_1    | Elim   |    -20 | 0000001 |
| 10006 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |      5 | 0000002 |
| 10007 | C100   | 2016.02 | LC       | Actual       | G_NONE | Input  |      5 | 0000002 |

*Step 7.3: Data is re-validated and rejected*: Delete the document generated by the pull request
| DOCNR | Entity |    Time | Currency | BPC Category | Group  | Audit  | Amount | PullReq | Del |
|-------+--------+---------+----------+--------------+--------+--------+--------+---------+-----|
| 10001 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |    100 | 0000001 |     |
| 10002 | C100   | 2016.01 | LC       | Actual       | G_NONE | Input  |    100 | 0000001 |     |
| 10003 | C100   | 2016.01 | USD      | Actual       | G_NONE | Input  |    100 | 0000001 |     |
| 10004 | C100   | 2016.01 | USD      | Actual       | G_1    | CT     |    100 | 0000001 |     |
| 10005 | C100   | 2016.01 | USD      | Actual       | G_1    | Elim   |    -20 | 0000001 |     |
| 10006 | C100   | 2016.01 | LC       | VALIDATION   | G_NONE | SUBMIT |      5 | 0000002 | X   |

*The pull request id provides following usages:*
1. Flags a valid set of consolidation result lines that belongs to the last approved pull request.
2. Finds the right timestamp when drilling through to the corresponding source journal items in ACDOCA.

** Example2: Local accountant does the currency translation and submit to the group accountant.

*Step 1: Local close*: Data in ACDOCA:  
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |

*Step 2: Raise a month-end pull request*: Data is translated and posted to ACDOCC under category "VALIDATION". Before translation, a roll-up must be done to post aggregated local amount to ACDOCC. As the S/4 currency translation supports multiple currency/amount pairs. We can just store the local currency amount and the translated currency amount in one line. By doing so, it will  benefit in reporting when one tries to put local amount and translated amount side by side.  
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |

*Step 3: Validate and approve the month-end pull request*: The documents under "VALIDATION" category will be copied correspondingly to the "Actual" category(20001->20003, 20002->20004). Audit trail are both changed to "Input".
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 |

*Step 4: Consolidation tasks are run in BPC*: Consolidation results are posted to ACDOCC.
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 |
| 20005 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Input  |         |        100 | 0000011 |
| 20006 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Elim   |         |        -20 | 0000011 |

*Step 5: Post new adjustment documents in ACDOCA*: The period is re-open after consolidation run. 
| Entity |    Time | Currency | Amount |
|--------+---------+----------+--------|
| C100   | 2016.01 | LC       |    100 |
| C100   | 2016.01 | LC       |      5 |

*Step 6: Raise an adjustment pull request*: The delta data is posted to ACDOCC under "VALIDATION" category. 
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 |
| 20005 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Input  |         |        100 | 0000011 |
| 20006 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Elim   |         |        -20 | 0000011 |
| 20007 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |          5 | 0000011 |
| 20008 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |       5 |          5 | 0000012 |

*Step 7.1: Data is re-validated and approved*: Delete all the consolidation results under the former pull request, post 2 new documents(one for local currency, the other is for group currency) under "Actual" category. Now data is ready for a consolidation re-run, you just iterate back to *step 3*.
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq | Del |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------+-----|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |     |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |     |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |     |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 | X   |
| 20005 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Input  |         |        100 | 0000011 | X   |
| 20006 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Elim   |         |        -20 | 0000011 | X   |
| 20007 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |          5 | 0000012 |     |
| 20008 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |       5 |          5 | 0000012 |     |
| 20009 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |          5 | 0000012 |     |
| 20010 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |          5 | 0000012 |     |

*Step 7.2: Data is re-validated and deferred*: Post 2 new documents with the delta amount to the next period. 
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq | Del |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------+-----|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |     |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |     |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |     |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 |     |
| 20005 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Input  |         |        100 | 0000011 |     |
| 20006 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Elim   |         |        -20 | 0000011 |     |
| 20007 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |          5 | 0000012 |     |
| 20008 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |       5 |          5 | 0000012 |     |
| 20009 | C100   | 2016.02 |       | LC       | Actual       | G_NONE | Input  |         |          5 | 0000012 |     |
| 20010 | C100   | 2016.02 |       | USD      | Actual       | G_NONE | Input  |         |          5 | 0000012 |     |

*Step 7.3: Data is re-validated and rejected*: Delete the documents generated by the pull request
| DOCNR | Entity |    Time | LCurr | ConsCurr | BPC Category | Group  | Audit  | LAmount | ConsAmount | PullReq | Del |
|-------+--------+---------+-------+----------+--------------+--------+--------+---------+------------+---------+-----|
| 20001 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |        100 | 0000011 |     |
| 20002 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |     100 |        100 | 0000011 |     |
| 20003 | C100   | 2016.01 |       | LC       | Actual       | G_NONE | Input  |         |        100 | 0000011 |     |
| 20004 | C100   | 2016.01 |       | USD      | Actual       | G_NONE | Input  |         |        100 | 0000011 |     |
| 20005 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Input  |         |        100 | 0000011 |     |
| 20006 | C100   | 2016.01 |       | USD      | Actual       | G_1    | Elim   |         |        -20 | 0000011 |     |
| 20007 | C100   | 2016.01 |       | LC       | VALIDATION   | G_NONE | SUBMIT |         |          5 | 0000012 | X   |
| 20008 | C100   | 2016.01 | LC    | USD      | VALIDATION   | G_NONE | SUBMIT |       5 |          5 | 0000012 | X   |

* Group Level Lock/Unlock Posting Period Request
The local system synchronizes its FI documents into the central system, BPC access the data in the central system. The lock/unlock a period means both lock/unlock in the local system and the central system. Because although in most cases, documents are posted in the local system,  it is still possible to have documents directly posted in the central system. 

According to different corporation contexts, there could be 3 different scenarios regarding with who is the initiator for the Lock/Unlock request, the local accountant or group accountant?

** Lock is Requested by Group Accountant 

[[../image/GroupLevelPeriodLock01.png]]  

In this case, the group accountant can raise a posting period lock request directly in BPC's consolidation monitor. The lock request is saved in the central system, and send to the local system. Based on configuration, the local system can either do the lock automatically(which means the group accountant has the full authority to do period lock/unlock); Or send a notification to the local accountant, so that he can decide whether to do the Lock.

Once the group level posting period is locked in the lock system, it will also lock the counterpart in the central system. Because in central system, the account numbers may not be the same with those in the local system, necessary mapping should be done. Meanwhile, a pull request will be raised which includes all the changes(new documents line items) belong to this interval. The pull request is saved in central system, and the group accountant will be notified and do the data pulling.   

** Local Accountant Does the Lock

[[../image/GroupLevelPeriodLock02.png]]  

This case, the local accountant has the authority to do group level lock/unlock. The group accountant is only be notified that there is a new pull request should be processed.  

** Local Accountant Request for Unlock 

[[../image/GroupLevelPeriodLock03.png]]  

If group accountant has the full authority to do group level lock/unlock, then the local accountant  must raise a unlock request if he wants to do posting in a closed period. The unlock request is saved in the central system, and the group accountant decides whether to approve or reject it. The the unlock request gets approved, it will unlock the period both in the central system and the local system. 

** Mapping Group Lock/Unlock to Local Open/Close Posting Period
In either of the above 3 scenarios, mappings are needed as the account numbers and fiscal year variant are are different among BPC, central system, and local system. Each time a lock/unlock request, or a pull request is raised, the local financial master data should be correctly mapped to the central ones and the group ones, and vice verse. 

These mapping activities could be complicate. Take fiscal year variant as an example, which could be different between group and local. From the consolidation perspective, the lock/unlock period always means according to the group fiscal variant. But to the local accountant, he may cares more on open/close fiscal year/period based on local fiscal variant. It's involuntary to think to combine local open/close with group lock/unlock. So that no additional effort is introduced to the local accountants. But these attempts would introduce more complexity than simplification.

#+CAPTION: Existing Open and Close Posting Periods Maintenance View 
[[../image/OpenClosePeriodMaintView.png]]  

Above snapshot is taken from the IMG maintenance view for current open/close posting periods. The underlying table is ~T001B~, with the Tcode ~FAGL_EHP4_T001B_COFI~.  If you want to leverage this maintenance view to realize group level posting lock/unlock, you must convert the group fiscal year variant and account numbers into local ones before inserting items into this table. Besides, you should also determine:
1. Which open posting variant(first column in above table) should be used.
2. Which account type should be used.
3. If I close a period, do I have to delete a line and then add a new correct line, or I should modify an existing line?


